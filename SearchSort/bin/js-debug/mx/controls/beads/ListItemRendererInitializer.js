/**
 * Generated by Apache Royale Compiler from mx/controls/beads/ListItemRendererInitializer.as
 * mx.controls.beads.ListItemRendererInitializer
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.controls.beads.ListItemRendererInitializer');
/* Royale Dependency List: org.apache.royale.core.IIndexedItemRenderer,org.apache.royale.core.IItemRendererOwnerView,org.apache.royale.core.IOwnerViewItemRenderer,org.apache.royale.core.IStrand,org.apache.royale.core.IStrandWithModelView,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.html.beads.ListItemRendererInitializer');



/**
 *  constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.html.beads.ListItemRendererInitializer}
 */
mx.controls.beads.ListItemRendererInitializer = function() {
  mx.controls.beads.ListItemRendererInitializer.base(this, 'constructor');
};
goog.inherits(mx.controls.beads.ListItemRendererInitializer, org.apache.royale.html.beads.ListItemRendererInitializer);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.controls.beads.ListItemRendererInitializer', mx.controls.beads.ListItemRendererInitializer);


/**
 * @private
 * @type {org.apache.royale.core.IItemRendererOwnerView}
 */
mx.controls.beads.ListItemRendererInitializer.prototype.mx_controls_beads_ListItemRendererInitializer_ownerView;


/**
 *  @asprivate
 *  @royaleignorecoercion org.apache.royale.core.HTMLElementWrapper
 * @export
 * @override
 */
mx.controls.beads.ListItemRendererInitializer.prototype.initializeIndexedItemRenderer = function(ir, data, index) {
  if (!this.dataProviderModel)
    return;
  mx.controls.beads.ListItemRendererInitializer.superClass_.initializeIndexedItemRenderer.apply(this, [ ir, data, index] );
  if (org.apache.royale.utils.Language.is(ir, org.apache.royale.core.IOwnerViewItemRenderer))
    org.apache.royale.utils.Language.as(ir, org.apache.royale.core.IOwnerViewItemRenderer).itemRendererOwnerView = this.mx_controls_beads_ListItemRendererInitializer_ownerView;
};


mx.controls.beads.ListItemRendererInitializer.prototype.set__strand = function(value) {
  mx.controls.beads.ListItemRendererInitializer.superClass_.set__strand.apply(this, [ value] );
  this.mx_controls_beads_ListItemRendererInitializer_ownerView = org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(value, org.apache.royale.core.IStrandWithModelView).view, org.apache.royale.core.IItemRendererOwnerView);
};


Object.defineProperties(mx.controls.beads.ListItemRendererInitializer.prototype, /** @lends {mx.controls.beads.ListItemRendererInitializer.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: mx.controls.beads.ListItemRendererInitializer.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.controls.beads.ListItemRendererInitializer.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListItemRendererInitializer', qName: 'mx.controls.beads.ListItemRendererInitializer', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.controls.beads.ListItemRendererInitializer.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'mx.controls.beads.ListItemRendererInitializer'}
      };
    },
    methods: function () {
      return {
        'ListItemRendererInitializer': { type: '', declaredBy: 'mx.controls.beads.ListItemRendererInitializer'},
        'initializeIndexedItemRenderer': { type: 'void', declaredBy: 'mx.controls.beads.ListItemRendererInitializer', parameters: function () { return [ 'org.apache.royale.core.IIndexedItemRenderer', false ,'Object', false ,'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.controls.beads.ListItemRendererInitializer.prototype.ROYALE_COMPILE_FLAGS = 26;
