/**
 * Generated by Apache Royale Compiler from spark/components/supportClasses/GroupBase.as
 * spark.components.supportClasses.GroupBase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('spark.components.supportClasses.GroupBase');
/* Royale Dependency List: mx.core.IUIComponent,mx.core.IVisualElement,mx.core.mx_internal,org.apache.royale.binding.ContainerDataBinding,org.apache.royale.binding.DataBindingBase,org.apache.royale.core.IBeadLayout,org.apache.royale.core.ILayoutHost,org.apache.royale.core.IParent,org.apache.royale.core.ValuesManager,org.apache.royale.events.Event,org.apache.royale.events.ValueEvent,org.apache.royale.geom.Point,org.apache.royale.utils.loadBeadFromValuesManager,spark.layouts.BasicLayout,org.apache.royale.utils.Language,XML*/

goog.require('mx.core.UIComponent');
goog.require('org.apache.royale.core.IContainer');
goog.require('org.apache.royale.core.ILayoutParent');
goog.require('spark.core.IViewport');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @constructor
 * @extends {mx.core.UIComponent}
 * @implements {org.apache.royale.core.ILayoutParent}
 * @implements {org.apache.royale.core.IContainer}
 * @implements {spark.core.IViewport}
 */
spark.components.supportClasses.GroupBase = function() {
  spark.components.supportClasses.GroupBase.base(this, 'constructor');
};
goog.inherits(spark.components.supportClasses.GroupBase, mx.core.UIComponent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('spark.components.supportClasses.GroupBase', spark.components.supportClasses.GroupBase);


/**
 *  @asprivate
 * @export
 */
spark.components.supportClasses.GroupBase.prototype.childrenAdded = function() {
  this.dispatchEvent(new org.apache.royale.events.ValueEvent("childrenAdded"));
};


/**
 * @private
 * @type {Object}
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase__layout;


/**
 * Returns the ILayoutHost which is its view. From ILayoutParent.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.8
 * @export
 * @return {org.apache.royale.core.ILayoutHost}
 */
spark.components.supportClasses.GroupBase.prototype.getLayoutHost = function() {
  return org.apache.royale.utils.Language.as(this.view, org.apache.royale.core.ILayoutHost);
};


/**
 * @export
 * @param {number} index
 * @return {mx.core.IUIComponent}
 */
spark.components.supportClasses.GroupBase.prototype.getLayoutChildAt = function(index) {
  return org.apache.royale.utils.Language.as(this.getElementAt(index), mx.core.IUIComponent);
};


/**
 * @private
 * @type {boolean}
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase__clipAndEnableScrolling = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase__autoLayout = true;


/**
 *  @asprivate
 *  Invalidates the display list, but doesn't run layout updateDisplayList pass.
 *  This is useful for subclasses like Group that perform additional work on
 *  updateDisplayList - like redrawing the graphic elements.
 * @export
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.addedToParent = function() {
  if (!this.initialized) {
    org.apache.royale.core.ValuesManager["valuesImpl"].init(this);
  }
  spark.components.supportClasses.GroupBase.superClass_.addedToParent.apply(this);
  if (org.apache.royale.utils.loadBeadFromValuesManager(org.apache.royale.core.IBeadLayout, "iBeadLayout", this)) {
    this.dispatchEvent(new org.apache.royale.events.Event("initComplete"));
    if ((this.isHeightSizedToContent() || !isNaN(this.explicitHeight)) && (this.isWidthSizedToContent() || !isNaN(this.explicitWidth)))
      this.dispatchEvent(new org.apache.royale.events.Event("layoutNeeded"));
  }
};


/**
 *  <p>If the layout object has not been set yet, 
 *  createChildren() assigns this container a 
 *  default layout object, BasicLayout.</p>
 *  
 *  @copy mx.core.UIComponent:createChildren()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 2.5
 *  @productversion Royale 0.9.4.5
 * @protected
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.createChildren = function() {
  if (!this.layout)
    this.layout = new spark.layouts.BasicLayout();
  spark.components.supportClasses.GroupBase.superClass_.createChildren.apply(this);
  if (this.getBeadByType(org.apache.royale.binding.DataBindingBase) == null && this.mxmlDocument == this)
    this.addBead(new org.apache.royale.binding.ContainerDataBinding());
  this.dispatchEvent(new org.apache.royale.events.Event("initBindings"));
};


/**
 *  @asprivate
 * @protected
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.commitProperties = function() {
  spark.components.supportClasses.GroupBase.superClass_.commitProperties.apply(this);
};


/**
 *  @asprivate
 * @protected
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.measure = function() {
  this.spark_components_supportClasses_GroupBase__layout.measure();
};


/**
 *  @asprivate
 * @protected
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.updateDisplayList = function(unscaledWidth, unscaledHeight) {
  if (this.autoLayout && this.spark_components_supportClasses_GroupBase__layout)
    this.spark_components_supportClasses_GroupBase__layout.updateDisplayList(unscaledWidth, unscaledHeight);
};


/**
 *  @asprivate
 * @export
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.styleChanged = function(styleProp) {
  spark.components.supportClasses.GroupBase.superClass_.styleChanged.apply(this, [ styleProp] );
  var /** @type {boolean} */ allStyles = (styleProp == null || styleProp == "styleName");
  if (!this.enabled && (allStyles || styleProp == "disabledAlpha")) {
    var /** @type {number} */ disabledAlpha = Number(this.getStyle("disabledAlpha"));
    if (!isNaN(disabledAlpha))
      spark.components.supportClasses.GroupBase.superClass_.set__alpha.apply(this, [ disabledAlpha] );
  }
};


/**
 *  @asprivate 
 * @export
 * @override
 */
spark.components.supportClasses.GroupBase.prototype.globalToLocal = function(point) {
  return null;
};


/**
 * @private
 * @type {number}
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase__contentWidth = 0;


/**
 *  @asprivate
 * @private
 * @param {number} value
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase_setContentWidth = function(value) {
  if (value == this.spark_components_supportClasses_GroupBase__contentWidth)
    return;
  var /** @type {number} */ oldValue = this.spark_components_supportClasses_GroupBase__contentWidth;
  this.spark_components_supportClasses_GroupBase__contentWidth = value;
  this.dispatchPropertyChangeEvent("contentWidth", oldValue, value);
};


/**
 * @private
 * @type {number}
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase__contentHeight = 0;


/**
 *  @asprivate
 * @private
 * @param {number} value
 */
spark.components.supportClasses.GroupBase.prototype.spark_components_supportClasses_GroupBase_setContentHeight = function(value) {
  if (value == this.spark_components_supportClasses_GroupBase__contentHeight)
    return;
  var /** @type {number} */ oldValue = this.spark_components_supportClasses_GroupBase__contentHeight;
  this.spark_components_supportClasses_GroupBase__contentHeight = value;
  this.dispatchPropertyChangeEvent("contentHeight", oldValue, value);
};


/**
 *  Sets the <code>contentWidth</code> and <code>contentHeight</code>
 *  properties.
 * 
 *  This method is intended for layout class developers who should
 *  call it from <code>updateDisplayList()</code> methods.
 *
 *  @asparam width The new value of <code>contentWidth</code>.
 * 
 *  @asparam height The new value of <code>contentHeight</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {number} width
 * @param {number} height
 */
spark.components.supportClasses.GroupBase.prototype.setContentSize = function(width, height) {
  if ((width == this.spark_components_supportClasses_GroupBase__contentWidth) && (height == this.spark_components_supportClasses_GroupBase__contentHeight))
    return;
  this.spark_components_supportClasses_GroupBase_setContentWidth(width);
  this.spark_components_supportClasses_GroupBase_setContentHeight(height);
};


/**
 *  Layouts that honor the <code>useVirtualLayout</code> flag will use this 
 *  method at updateDisplayList() time to get layout elements that are "in view", 
 *  i.e. that overlap the Group's scrollRect.
 * 
 *  <p>If the element to be returned wasn't already a visible child, i.e. if 
 *  it was created or recycled, and either eltWidth or eltHeight is specified,
 *  then the element's initial size is set with setLayoutBoundsSize() before 
 *  it's validated.  This is important for components, like text, that reflow 
 *  when the layout is justified to the Group's width or height.</p>
 *  
 *  <p>The returned layout element will have been validated.</p>
 * 
 *  <p>This method will lazily create or "recycle" and validate layout
 *  elements as needed.</p>
 * 
 *  <p>This method is not intended to be called directly, layouts that
 *  support virutalization will call it.</p>
 * 
 *  @asparam index The index of the element to retrieve.
 *  @asparam eltWidth If specified, the newly created or recycled element's initial width.
 *  @asparam eltHeight If specified, the newly created or recycled element's initial height.
 *  @asreturn The validated element at the specified index.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {number} index
 * @param {number=} eltWidth
 * @param {number=} eltHeight
 * @return {mx.core.IVisualElement}
 */
spark.components.supportClasses.GroupBase.prototype.getVirtualElementAt = function(index, eltWidth, eltHeight) {
  eltWidth = typeof eltWidth !== 'undefined' ? eltWidth : NaN;
  eltHeight = typeof eltHeight !== 'undefined' ? eltHeight : NaN;
  return org.apache.royale.utils.Language.as(this.getElementAt(index), mx.core.IVisualElement);
};


spark.components.supportClasses.GroupBase.prototype.get__strandChildren = function() {
  return this;
};


spark.components.supportClasses.GroupBase.prototype.get__layout = function() {
  return this.spark_components_supportClasses_GroupBase__layout;
};


spark.components.supportClasses.GroupBase.prototype.set__layout = function(value) {
  if (this.spark_components_supportClasses_GroupBase__layout == value)
    return;
  this.spark_components_supportClasses_GroupBase__layout = value;
  if (this.spark_components_supportClasses_GroupBase__layout) {
    this.spark_components_supportClasses_GroupBase__layout.target = this;
  }
};


spark.components.supportClasses.GroupBase.prototype.get__measuredWidth = function() {
  if (isNaN(this._measuredWidth))
    this.measure();
  if (isNaN(this._measuredWidth))
    return this.width;
  return this._measuredWidth;
};


spark.components.supportClasses.GroupBase.prototype.get__measuredHeight = function() {
  if (isNaN(this._measuredHeight))
    this.measure();
  if (isNaN(this._measuredHeight))
    return this.height;
  return this._measuredHeight;
};


spark.components.supportClasses.GroupBase.prototype.get__horizontalScrollPosition = function() {
  if (this.spark_components_supportClasses_GroupBase__layout) {
    return Number(this.spark_components_supportClasses_GroupBase__layout.horizontalScrollPosition);
  }
  return 0;
};


spark.components.supportClasses.GroupBase.prototype.get__verticalScrollPosition = function() {
  if (this.spark_components_supportClasses_GroupBase__layout) {
    return Number(this.spark_components_supportClasses_GroupBase__layout.verticalScrollPosition);
  }
  return 0;
};


spark.components.supportClasses.GroupBase.prototype.get__clipAndEnableScrolling = function() {
  return this.element.style.overflow == "auto";
  
};


spark.components.supportClasses.GroupBase.prototype.set__clipAndEnableScrolling = function(value) {
  this.element.style.overflow = value ? "auto" : "none";
  
};


spark.components.supportClasses.GroupBase.prototype.get__autoLayout = function() {
  return this.spark_components_supportClasses_GroupBase__autoLayout;
};


spark.components.supportClasses.GroupBase.prototype.set__autoLayout = function(value) {
  if (this.spark_components_supportClasses_GroupBase__autoLayout == value)
    return;
  this.spark_components_supportClasses_GroupBase__autoLayout = value;
};


spark.components.supportClasses.GroupBase.prototype.get__contentWidth = function() {
  return this.spark_components_supportClasses_GroupBase__contentWidth;
};


spark.components.supportClasses.GroupBase.prototype.get__contentHeight = function() {
  return this.spark_components_supportClasses_GroupBase__contentHeight;
};


Object.defineProperties(spark.components.supportClasses.GroupBase.prototype, /** @lends {spark.components.supportClasses.GroupBase.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IParent} */
strandChildren: {
get: spark.components.supportClasses.GroupBase.prototype.get__strandChildren},
/**
  * @export
  * @type {Object} */
layout: {
get: spark.components.supportClasses.GroupBase.prototype.get__layout,
set: spark.components.supportClasses.GroupBase.prototype.set__layout},
/**
  * @export
  * @type {number} */
measuredWidth: {
get: spark.components.supportClasses.GroupBase.prototype.get__measuredWidth,
set: mx.core.UIComponent.prototype.set__measuredWidth},
/**
  * @export
  * @type {number} */
measuredHeight: {
get: spark.components.supportClasses.GroupBase.prototype.get__measuredHeight,
set: mx.core.UIComponent.prototype.set__measuredHeight},
/**
  * @export
  * @type {number} */
horizontalScrollPosition: {
get: spark.components.supportClasses.GroupBase.prototype.get__horizontalScrollPosition},
/**
  * @export
  * @type {number} */
verticalScrollPosition: {
get: spark.components.supportClasses.GroupBase.prototype.get__verticalScrollPosition},
/**
  * @export
  * @type {boolean} */
clipAndEnableScrolling: {
get: spark.components.supportClasses.GroupBase.prototype.get__clipAndEnableScrolling,
set: spark.components.supportClasses.GroupBase.prototype.set__clipAndEnableScrolling},
/**
  * @export
  * @type {boolean} */
autoLayout: {
get: spark.components.supportClasses.GroupBase.prototype.get__autoLayout,
set: spark.components.supportClasses.GroupBase.prototype.set__autoLayout},
/**
  * @export
  * @type {number} */
contentWidth: {
get: spark.components.supportClasses.GroupBase.prototype.get__contentWidth},
/**
  * @export
  * @type {number} */
contentHeight: {
get: spark.components.supportClasses.GroupBase.prototype.get__contentHeight}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
spark.components.supportClasses.GroupBase.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'GroupBase', qName: 'spark.components.supportClasses.GroupBase', kind: 'class' }], interfaces: [org.apache.royale.core.ILayoutParent, org.apache.royale.core.IContainer, spark.core.IViewport] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
spark.components.supportClasses.GroupBase.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strandChildren': { type: 'org.apache.royale.core.IParent', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'layout': { type: 'Object', access: 'readwrite', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'measuredWidth': { type: 'Number', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'measuredHeight': { type: 'Number', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'horizontalScrollPosition': { type: 'Number', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase', metadata: function () { return [ { name: 'Bindable' } ]; }},
        'verticalScrollPosition': { type: 'Number', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase', metadata: function () { return [ { name: 'Bindable' } ]; }},
        'clipAndEnableScrolling': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'autoLayout': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'contentWidth': { type: 'Number', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'contentHeight': { type: 'Number', access: 'readonly', declaredBy: 'spark.components.supportClasses.GroupBase', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }}
      };
    },
    methods: function () {
      return {
        'GroupBase': { type: '', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'childrenAdded': { type: 'void', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'getLayoutHost': { type: 'org.apache.royale.core.ILayoutHost', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'getLayoutChildAt': { type: 'mx.core.IUIComponent', declaredBy: 'spark.components.supportClasses.GroupBase', parameters: function () { return [ 'int', false ]; }},
        'addedToParent': { type: 'void', declaredBy: 'spark.components.supportClasses.GroupBase'},
        'styleChanged': { type: 'void', declaredBy: 'spark.components.supportClasses.GroupBase', parameters: function () { return [ 'String', false ]; }},
        'globalToLocal': { type: 'org.apache.royale.geom.Point', declaredBy: 'spark.components.supportClasses.GroupBase', parameters: function () { return [ 'org.apache.royale.geom.Point', false ]; }},
        'setContentSize': { type: 'void', declaredBy: 'spark.components.supportClasses.GroupBase', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'getVirtualElementAt': { type: 'mx.core.IVisualElement', declaredBy: 'spark.components.supportClasses.GroupBase', parameters: function () { return [ 'int', false ,'Number', true ,'Number', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
spark.components.supportClasses.GroupBase.prototype.ROYALE_COMPILE_FLAGS = 10;
