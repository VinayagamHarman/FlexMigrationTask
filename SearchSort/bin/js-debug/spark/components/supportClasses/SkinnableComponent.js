/**
 * Generated by Apache Royale Compiler from spark/components/supportClasses/SkinnableComponent.as
 * spark.components.supportClasses.SkinnableComponent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('spark.components.supportClasses.SkinnableComponent');
/* Royale Dependency List: mx.core.IFactory,mx.core.mx_internal,org.apache.royale.events.Event,org.apache.royale.reflection.MetaDataArgDefinition,org.apache.royale.reflection.MetaDataDefinition,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.VariableDefinition,org.apache.royale.reflection.describeType,spark.components.DataGroup,org.apache.royale.utils.Language,XML*/

goog.require('mx.core.UIComponent');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @constructor
 * @extends {mx.core.UIComponent}
 */
spark.components.supportClasses.SkinnableComponent = function() {
  spark.components.supportClasses.SkinnableComponent.base(this, 'constructor');
  this.addEventListener("layoutNeeded", org.apache.royale.utils.Language.closure(this.spark_components_supportClasses_SkinnableComponent_layoutSkinNeeded, this, 'spark_components_supportClasses_SkinnableComponent_layoutSkinNeeded'));
};
goog.inherits(spark.components.supportClasses.SkinnableComponent, mx.core.UIComponent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('spark.components.supportClasses.SkinnableComponent', spark.components.supportClasses.SkinnableComponent);


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
spark.components.supportClasses.SkinnableComponent.prototype.spark_components_supportClasses_SkinnableComponent_layoutSkinNeeded = function(event) {
  if (this.skin)
    this.skin.dispatchEvent(new org.apache.royale.events.Event("layoutNeeded"));
};


/**
 *  @asprivate
 * @protected
 * @override
 */
spark.components.supportClasses.SkinnableComponent.prototype.commitProperties = function() {
  spark.components.supportClasses.SkinnableComponent.superClass_.commitProperties.apply(this);
};


/**
 *  Marks the component so that the new state of the skin is set
 *  during a later screen update.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 */
spark.components.supportClasses.SkinnableComponent.prototype.invalidateSkinState = function() {
  if (goog.DEBUG)
    org.apache.royale.utils.Language.trace("invalidateSkinState not implemented");
};


/**
 * @private
 * @type {mx.core.UIComponent}
 */
spark.components.supportClasses.SkinnableComponent.prototype.spark_components_supportClasses_SkinnableComponent__skin;


/**
 *  @asprivate
 *  Setter for the skin instance.  This is so the bindable event
 *  is dispatched
 * @export
 * @param {mx.core.UIComponent} value
 */
spark.components.supportClasses.SkinnableComponent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setSkin = function(value) {
  if (value === this.spark_components_supportClasses_SkinnableComponent__skin)
    return;
  this.spark_components_supportClasses_SkinnableComponent__skin = value;
  this.findSkinParts();
  this.dispatchEvent(new org.apache.royale.events.Event("skinChanged"));
};


/**
 *  Find the skin parts in the skin class and assign them to the properties of the component.
 *  You do not call this method directly. 
 *  Flex calls it automatically when it calls the <code>attachSkin()</code> method.
 *  Typically, a subclass of SkinnableComponent does not override this method.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @protected
 */
spark.components.supportClasses.SkinnableComponent.prototype.findSkinParts = function() {
  if (this.skinParts) {
    for (var /** @type {string} */ id in this.skinParts) {
      if (this.skinParts[id] == true) {
        if (!(id in this.skin))
          throw new Error(this.resourceManager.getString("components", "requiredSkinPartNotFound", [id]));
      }
      if (id in this.skin) {
        this[id] = this.skin[id];
        if (this[id] != null && !org.apache.royale.utils.Language.is(this[id], mx.core.IFactory))
          this.partAdded(id, this[id]);
      }
    }
  }
};


/**
 *  Called when a skin part is added. 
 *  You do not call this method directly. 
 *  For static parts, Flex calls it automatically when it calls the <code>attachSkin()</code> method. 
 *  For dynamic parts, Flex calls it automatically when it calls 
 *  the <code>createDynamicPartInstance()</code> method. 
 *
 *  <p>Override this function to attach behavior to the part. 
 *  If you want to override behavior on a skin part that is inherited from a base class, 
 *  do not call the <code>super.partAdded()</code> method. 
 *  Otherwise, you should always call the <code>super.partAdded()</code> method.</p>
 *
 *  @asparam partname The name of the part.
 *
 *  @asparam instance The instance of the part.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @protected
 * @param {string} partName
 * @param {Object} instance
 */
spark.components.supportClasses.SkinnableComponent.prototype.partAdded = function(partName, instance) {
};


/**
 * @export
 * @type {spark.components.DataGroup}
 */
spark.components.supportClasses.SkinnableComponent.prototype.dataGroup;


/**
 * @protected
 * @return {string}
 */
spark.components.supportClasses.SkinnableComponent.prototype.getCurrentSkinState = function() {
  return this.enabled ? "normal" : "disabled";
};


spark.components.supportClasses.SkinnableComponent.prototype.get__chromeColor = function() {
  return (null) >>> 0;
};


spark.components.supportClasses.SkinnableComponent.prototype.set__chromeColor = function(value) {
};


spark.components.supportClasses.SkinnableComponent.prototype.get__skinClass = function() {
  return this.getStyle("skinClass");
};


spark.components.supportClasses.SkinnableComponent.prototype.set__skinClass = function(value) {
  this.setStyle("skinClass", value);
};


spark.components.supportClasses.SkinnableComponent.prototype.set__enabled = function(value) {
  spark.components.supportClasses.SkinnableComponent.superClass_.set__enabled.apply(this, [ value] );
  this.invalidateSkinState();
};


spark.components.supportClasses.SkinnableComponent.prototype.get__skin = function() {
  return this.spark_components_supportClasses_SkinnableComponent__skin;
};


spark.components.supportClasses.SkinnableComponent.prototype.get__skinParts = function() {
  var /** @type {Object} */ parts = {};
  var /** @type {org.apache.royale.reflection.TypeDefinition} */ td = org.apache.royale.reflection.describeType(this);
  var /** @type {Array} */ vars = td.variables;
  var foreachiter0_target = vars;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var vd = foreachiter0_target[foreachiter0];
  {
    var /** @type {Array} */ metadata = vd.metadata;
    var foreachiter1_target = metadata;
    for (var foreachiter1 in foreachiter1_target) 
    {
    var md = foreachiter1_target[foreachiter1];
    {
      if (md.name == "SkinPart") {
        var /** @type {boolean} */ required = false;
        var /** @type {Array} */ args = md.args;
        var foreachiter2_target = args;
        for (var foreachiter2 in foreachiter2_target) 
        {
        var arg = foreachiter2_target[foreachiter2];
        {
          if (arg.name == "required")
            required = (arg.value == "true");
        }}
        
        parts[vd.name] = required;
      }
    }}
    
  }}
  
  return parts;
};


Object.defineProperties(spark.components.supportClasses.SkinnableComponent.prototype, /** @lends {spark.components.supportClasses.SkinnableComponent.prototype} */ {
/**
  * @export
  * @type {number} */
chromeColor: {
get: spark.components.supportClasses.SkinnableComponent.prototype.get__chromeColor,
set: spark.components.supportClasses.SkinnableComponent.prototype.set__chromeColor},
/**
  * @export
  * @type {Object} */
skinClass: {
get: spark.components.supportClasses.SkinnableComponent.prototype.get__skinClass,
set: spark.components.supportClasses.SkinnableComponent.prototype.set__skinClass},
/**
  * @export
  * @type {boolean} */
enabled: {
get: mx.core.UIComponent.prototype.get__enabled,
set: spark.components.supportClasses.SkinnableComponent.prototype.set__enabled},
/**
  * @export
  * @type {mx.core.UIComponent} */
skin: {
get: spark.components.supportClasses.SkinnableComponent.prototype.get__skin},
/**
  * @type {Object} */
skinParts: {
get: spark.components.supportClasses.SkinnableComponent.prototype.get__skinParts}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
spark.components.supportClasses.SkinnableComponent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SkinnableComponent', qName: 'spark.components.supportClasses.SkinnableComponent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
spark.components.supportClasses.SkinnableComponent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'dataGroup': { type: 'spark.components.DataGroup', get_set: function (/** spark.components.supportClasses.SkinnableComponent */ inst, /** * */ v) {return v !== undefined ? inst.dataGroup = v : inst.dataGroup;}}
      };
    },
    accessors: function () {
      return {
        'chromeColor': { type: 'uint', access: 'readwrite', declaredBy: 'spark.components.supportClasses.SkinnableComponent'},
        'skinClass': { type: 'Class', access: 'readwrite', declaredBy: 'spark.components.supportClasses.SkinnableComponent'},
        'enabled': { type: 'Boolean', access: 'writeonly', declaredBy: 'spark.components.supportClasses.SkinnableComponent'},
        'skin': { type: 'mx.core.UIComponent', access: 'readonly', declaredBy: 'spark.components.supportClasses.SkinnableComponent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'skinChanged' } ] } ]; }}
      };
    },
    methods: function () {
      return {
        'SkinnableComponent': { type: '', declaredBy: 'spark.components.supportClasses.SkinnableComponent'},
        'invalidateSkinState': { type: 'void', declaredBy: 'spark.components.supportClasses.SkinnableComponent'},
        'http://www.adobe.com/2006/flex/mx/internal::setSkin': { type: 'void', declaredBy: 'spark.components.supportClasses.SkinnableComponent', parameters: function () { return [ 'mx.core.UIComponent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
spark.components.supportClasses.SkinnableComponent.prototype.ROYALE_COMPILE_FLAGS = 10;
