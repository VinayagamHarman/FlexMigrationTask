/**
 * Generated by Apache Royale Compiler from spark/components/RichEditableText.as
 * spark.components.RichEditableText
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('spark.components.RichEditableText');
/* Royale Dependency List: mx.core.mx_internal,mx.events.FlexEvent,mx.utils.StringUtil,org.apache.royale.textLayout.beads.DispatchTLFKeyboardEventBead,org.apache.royale.textLayout.container.TextContainerManager,org.apache.royale.textLayout.conversion.ITextExporter,org.apache.royale.textLayout.conversion.ITextImporter,org.apache.royale.textLayout.conversion.TextConverter,org.apache.royale.textLayout.edit.EditingMode,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.elements.TextFlow,org.apache.royale.textLayout.events.SelectionEvent,org.apache.royale.textLayout.factory.StandardTLFFactory,org.apache.royale.textLayout.factory.TLFFactory,spark.components.supportClasses.RichEditableTextContainerManager,org.apache.royale.utils.Language,XML*/

goog.require('mx.core.UIComponent');
goog.require('mx.managers.IFocusManagerComponent');
goog.require('spark.core.IEditableText');
goog.require('spark.core.IViewport');



/**
 *  Constructor. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @constructor
 * @extends {mx.core.UIComponent}
 * @implements {mx.managers.IFocusManagerComponent}
 * @implements {spark.core.IEditableText}
 * @implements {spark.core.IViewport}
 */
spark.components.RichEditableText = function() {
  spark.components.RichEditableText.base(this, 'constructor');
  this.typeNames = "RichEditableText";
  spark.components.RichEditableText.initClass();
  this.text = "";
  this.spark_components_RichEditableText__textContainerManager = this.http_$$www_adobe_com$2006$flex$mx$internal__createTextContainerManager();
};
goog.inherits(spark.components.RichEditableText, mx.core.UIComponent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('spark.components.RichEditableText', spark.components.RichEditableText);


/**
 *  @asprivate
 *  This method initializes the static vars of this class.
 *  Rather than calling it at static initialization time,
 *  we call it in the constructor to do the class initialization
 *  when the first instance is created.
 *  (It does an immediate return if it has already run.)
 *  By doing so, we avoid any static initialization issues
 *  related to whether this class or the TLF classes
 *  that it uses are initialized first.
 * @private
 */
spark.components.RichEditableText.initClass = function() {
  if (spark.components.RichEditableText.classInitialized)
    return;
  if (!org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"])
    org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"] = new org.apache.royale.textLayout.factory.StandardTLFFactory();
  spark.components.RichEditableText.staticPlainTextImporter = org.apache.royale.textLayout.conversion.TextConverter.getImporter(org.apache.royale.textLayout.conversion.TextConverter.PLAIN_TEXT_FORMAT);
  spark.components.RichEditableText.staticPlainTextImporter.throwOnError = true;
  spark.components.RichEditableText.staticPlainTextExporter = org.apache.royale.textLayout.conversion.TextConverter.getExporter(org.apache.royale.textLayout.conversion.TextConverter.PLAIN_TEXT_FORMAT);
  spark.components.RichEditableText.classInitialized = true;
};


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.classInitialized = false;


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.ITextImporter}
 */
spark.components.RichEditableText.staticPlainTextImporter;


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.ITextExporter}
 */
spark.components.RichEditableText.staticPlainTextExporter;


/**
 * @private
 * @type {string}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_source = "text";


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_lastGeneration = 0;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_lastContentBoundsGeneration = 0;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_inUpdateDLMethod = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_remeasuringText = false;


/**
 * @type {string}
 */
spark.components.RichEditableText.prototype.http_$$www_adobe_com$2006$flex$mx$internal__passwordChar = "*";


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_widthConstraint = NaN;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_heightConstraint = NaN;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_hasProgrammaticSelectionRange = false;


/**
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.http_$$www_adobe_com$2006$flex$mx$internal__autoSize = false;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_lastUnscaledWidth;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_lastUnscaledHeight;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_enabledChanged = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__clipAndEnableScrolling = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_clipAndEnableScrollingChanged = false;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__horizontalScrollPosition = 0;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_horizontalScrollPositionChanged = false;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__verticalScrollPosition = 0;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_verticalScrollPositionChanged = false;


/**
 * @private
 * @type {Object}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__content;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_contentChanged = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__displayAsPassword = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_displayAsPasswordChanged = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__editable = true;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_editableChanged = false;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__heightInLines = NaN;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__maxChars = 0;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__multiline = true;


/**
 * @private
 * @type {string}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__restrict = null;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__selectable = true;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_selectableChanged = false;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__selectionActivePosition = -1;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__selectionAnchorPosition = -1;


/**
 * @private
 * @type {string}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__selectionHighlighting = "whenFocused";


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_selectionFormatsChanged = false;


/**
 * @private
 * @type {string}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__text = "";


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_textChanged = false;


/**
 * @private
 * @type {spark.components.supportClasses.RichEditableTextContainerManager}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__textContainerManager;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.TextFlow}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__textFlow;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_textFlowChanged = false;


/**
 * @private
 * @type {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_typicalTextChanged;


/**
 * @private
 * @type {string}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__typicalText;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.TextFlow}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__typicalTextFlow;


/**
 * @private
 * @type {number}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText__widthInChars = NaN;


/**
 *  @asprivate
 * @protected
 * @override
 */
spark.components.RichEditableText.prototype.commitProperties = function() {
  spark.components.RichEditableText.superClass_.commitProperties.apply(this);
  this.spark_components_RichEditableText_updateStylesIfChanged();
  var /** @type {number} */ oldAnchorPosition = this.spark_components_RichEditableText__selectionAnchorPosition;
  var /** @type {number} */ oldActivePosition = this.spark_components_RichEditableText__selectionActivePosition;
  if (this.spark_components_RichEditableText_enabledChanged || this.spark_components_RichEditableText_selectableChanged || this.spark_components_RichEditableText_editableChanged) {
    this.spark_components_RichEditableText_updateEditingMode();
    this.spark_components_RichEditableText_enabledChanged = false;
    this.spark_components_RichEditableText_editableChanged = false;
    this.spark_components_RichEditableText_selectableChanged = false;
  }
  if (this.spark_components_RichEditableText_textChanged) {
    if (this.spark_components_RichEditableText__text.indexOf("\n") != -1 || this.spark_components_RichEditableText__text.indexOf("\r") != -1) {
      this.spark_components_RichEditableText__textFlow = org.apache.royale.utils.Language.as(spark.components.RichEditableText.staticPlainTextImporter.importToFlow(this.spark_components_RichEditableText__text), org.apache.royale.textLayout.elements.TextFlow);
      this.spark_components_RichEditableText__textContainerManager.setTextFlow(this.spark_components_RichEditableText__textFlow);
    } else {
      this.spark_components_RichEditableText__textContainerManager.setText(this.spark_components_RichEditableText__text);
    }
  } else if (this.spark_components_RichEditableText_textFlowChanged) {
    this.spark_components_RichEditableText__textContainerManager.setTextFlow(this.spark_components_RichEditableText__textFlow);
  } else if (this.spark_components_RichEditableText_contentChanged) {
    this.spark_components_RichEditableText__textFlow = this.spark_components_RichEditableText_createTextFlowFromContent(this.spark_components_RichEditableText__content);
    this.spark_components_RichEditableText__textContainerManager.setTextFlow(this.spark_components_RichEditableText__textFlow);
    this.spark_components_RichEditableText__content = null;
  }
  if (this.spark_components_RichEditableText_textChanged || this.spark_components_RichEditableText_textFlowChanged || this.spark_components_RichEditableText_contentChanged) {
    this.spark_components_RichEditableText_lastGeneration = (this.spark_components_RichEditableText__textFlow ? this.spark_components_RichEditableText__textFlow.generation : 0) >>> 0;
    this.spark_components_RichEditableText_lastContentBoundsGeneration = 0;
    if (this.displayAsPassword)
      this.spark_components_RichEditableText_displayAsPasswordChanged = true;
    this.spark_components_RichEditableText_widthConstraint = NaN;
    this.spark_components_RichEditableText_heightConstraint = NaN;
    this.spark_components_RichEditableText_textChanged = false;
    this.spark_components_RichEditableText_textFlowChanged = false;
    this.spark_components_RichEditableText_contentChanged = false;
    this.invalidateSize();
    this.invalidateDisplayList();
  }
  if (this.spark_components_RichEditableText_displayAsPasswordChanged) {
    if (this.displayAsPassword) {
      this.spark_components_RichEditableText__text = this.spark_components_RichEditableText__textContainerManager.getText("\n");
      var /** @type {string} */ textToDisplay = mx.utils.StringUtil.repeat(this.http_$$www_adobe_com$2006$flex$mx$internal__passwordChar, (this.spark_components_RichEditableText__text.length) >> 0);
      this.spark_components_RichEditableText__textContainerManager.setText(textToDisplay);
    } else {
      this.spark_components_RichEditableText__textContainerManager.setText(this.spark_components_RichEditableText__text);
    }
    this.spark_components_RichEditableText__textFlow = null;
    this.spark_components_RichEditableText_lastGeneration = 0;
    this.spark_components_RichEditableText_lastContentBoundsGeneration = 0;
    this.spark_components_RichEditableText_displayAsPasswordChanged = false;
  }
  if (this.spark_components_RichEditableText_clipAndEnableScrollingChanged) {
    this.spark_components_RichEditableText__textContainerManager.horizontalScrollPolicy = "auto";
    this.spark_components_RichEditableText__textContainerManager.verticalScrollPolicy = "auto";
    this.spark_components_RichEditableText_clipAndEnableScrollingChanged = false;
  }
  if (this.spark_components_RichEditableText_horizontalScrollPositionChanged) {
    var /** @type {number} */ oldHorizontalScrollPosition = this.spark_components_RichEditableText__textContainerManager.horizontalScrollPosition;
    this.spark_components_RichEditableText__textContainerManager.horizontalScrollPosition = this.spark_components_RichEditableText__horizontalScrollPosition;
    this.dispatchPropertyChangeEvent("horizontalScrollPosition", oldHorizontalScrollPosition, this.spark_components_RichEditableText__horizontalScrollPosition);
    this.spark_components_RichEditableText_horizontalScrollPositionChanged = false;
  }
  if (this.spark_components_RichEditableText_verticalScrollPositionChanged) {
    var /** @type {number} */ oldVerticalScrollPosition = this.spark_components_RichEditableText__textContainerManager.verticalScrollPosition;
    this.spark_components_RichEditableText__textContainerManager.verticalScrollPosition = this.spark_components_RichEditableText__verticalScrollPosition;
    this.dispatchPropertyChangeEvent("verticalScrollPosition", oldVerticalScrollPosition, this.spark_components_RichEditableText__verticalScrollPosition);
    this.spark_components_RichEditableText_verticalScrollPositionChanged = false;
  }
};


/**
 *  @asprivate
 * @protected
 * @override
 */
spark.components.RichEditableText.prototype.updateDisplayList = function(unscaledWidth, unscaledHeight) {
  org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"].currentContainer = this;
  this.spark_components_RichEditableText_inUpdateDLMethod = true;
  this.spark_components_RichEditableText_updateStylesIfChanged();
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__autoSize && this.spark_components_RichEditableText_lastUnscaledHeight == unscaledHeight && this.spark_components_RichEditableText_lastUnscaledWidth == unscaledWidth && this.spark_components_RichEditableText_remeasureText(unscaledWidth, unscaledHeight)) {
    this.spark_components_RichEditableText_inUpdateDLMethod = false;
    return;
  }
  spark.components.RichEditableText.superClass_.updateDisplayList.apply(this, [ unscaledWidth, unscaledHeight] );
  if (!this.http_$$www_adobe_com$2006$flex$mx$internal__autoSize) {
    this.spark_components_RichEditableText__textContainerManager.compositionWidth = unscaledWidth;
    this.spark_components_RichEditableText__textContainerManager.compositionHeight = unscaledHeight;
  }
  if (this.clipAndEnableScrolling && this.spark_components_RichEditableText__textContainerManager.composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    this.spark_components_RichEditableText__textContainerManager.convertToTextFlowWithComposer();
  }
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__autoSize && !isNaN(this.spark_components_RichEditableText_lastUnscaledWidth) && (this.spark_components_RichEditableText_lastUnscaledWidth != unscaledWidth || this.spark_components_RichEditableText_lastUnscaledHeight != unscaledHeight)) {
    if (this.spark_components_RichEditableText__textContainerManager.composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
      this.spark_components_RichEditableText__textContainerManager.getTextFlow().flowComposer.getControllerAt(0).shapesInvalid = true;
    else if (!this.spark_components_RichEditableText__textContainerManager.isDamaged())
      this.spark_components_RichEditableText__textContainerManager.drawBackgroundAndSetScrollRect(0, 0);
  }
  this.spark_components_RichEditableText__textContainerManager.updateContainer();
  this.spark_components_RichEditableText_lastUnscaledWidth = unscaledWidth;
  this.spark_components_RichEditableText_lastUnscaledHeight = unscaledHeight;
  this.spark_components_RichEditableText_inUpdateDLMethod = false;
};


/**
 *  Inserts the specified text into the RichEditableText
 *  as if you had typed it.
 *
 *  <p>If a range was selected, the new text replaces the selected text.
 *  If there was an insertion point, the new text is inserted there.</p>
 *
 *  <p>An insertion point is then set after the new text.
 *  If necessary, the text will scroll to ensure
 *  that the insertion point is visible.</p>
 *
 *  @asparam text The text to be inserted.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {string} text
 */
spark.components.RichEditableText.prototype.insertText = function(text) {
  this.spark_components_RichEditableText_handleInsertText(text);
};


/**
 *  Appends the specified text to the end of the RichEditableText,
 *  as if you had clicked at the end and typed.
 *
 *  <p>An insertion point is then set after the new text.
 *  If necessary, the text will scroll to ensure
 *  that the insertion point is visible.</p>
 *
 *  @asparam text The text to be appended.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {string} text
 */
spark.components.RichEditableText.prototype.appendText = function(text) {
  this.spark_components_RichEditableText_handleInsertText(text, true);
};


/**
 *  @copy flashx.textLayout.container.ContainerController#scrollToRange() 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {number} anchorPosition
 * @param {number} activePosition
 */
spark.components.RichEditableText.prototype.scrollToRange = function(anchorPosition, activePosition) {
  this.validateProperties();
  this.http_$$www_adobe_com$2006$flex$mx$internal__textContainerManager.scrollToRange(anchorPosition, activePosition);
};


/**
 *  Selects a specified range of characters.
 *
 *  <p>If either position is negative, it will deselect the text range.</p>
 *
 *  @asparam anchorPosition The character position specifying the end
 *  of the selection that stays fixed when the selection is extended.
 *
 *  @asparam activePosition The character position specifying the end
 *  of the selection that moves when the selection is extended.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {number} anchorPosition
 * @param {number} activePosition
 */
spark.components.RichEditableText.prototype.selectRange = function(anchorPosition, activePosition) {
  this.validateProperties();
  if (this.spark_components_RichEditableText_editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_ONLY) {
    var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selectionState = new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, anchorPosition, activePosition);
    var /** @type {org.apache.royale.textLayout.events.SelectionEvent} */ selectionEvent = new org.apache.royale.textLayout.events.SelectionEvent(org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE, false, false, selectionState);
    this.spark_components_RichEditableText_textContainerManager_selectionChangeHandler(selectionEvent);
  } else {
    var /** @type {org.apache.royale.textLayout.edit.ISelectionManager} */ im = this.spark_components_RichEditableText__textContainerManager.beginInteraction();
    im.selectRange(anchorPosition, activePosition);
    im.refreshSelection();
    this.spark_components_RichEditableText__textContainerManager.endInteraction();
  }
  this.spark_components_RichEditableText_hasProgrammaticSelectionRange = (anchorPosition != activePosition);
};


/**
 *  Selects all of the text. This does not include the final paragraph
 *  terminator.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 */
spark.components.RichEditableText.prototype.selectAll = function() {
  this.selectRange(0, 2147483648);
};


/**
 *  @asprivate
 * @export
 * @return {spark.components.supportClasses.RichEditableTextContainerManager}
 */
spark.components.RichEditableText.prototype.http_$$www_adobe_com$2006$flex$mx$internal__createTextContainerManager = function() {
  return new spark.components.supportClasses.RichEditableTextContainerManager(this);
};


/**
 *  @asprivate
 * @private
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_updateStylesIfChanged = function() {
};


/**
 *  @asprivate
 *  If auto-sizing text, it may need to be remeasured if it is 
 *  constrained in one dimension by the layout manager.  If it is
 *  constrained in both dimensions there is no need to remeasure.  
 *  Changing one dimension may change the size of the measured text 
 *  and the layout manager needs to know this.
 * @private
 * @param {number} width
 * @param {number} height
 * @return {boolean}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_remeasureText = function(width, height) {
  if (width == this.measuredWidth && height == this.measuredHeight)
    return false;
  this.http_$$www_adobe_com$2006$flex$mx$internal__autoSize = false;
  if (width == 0 || height == 0)
    return false;
  if (this.typicalText != null)
    return false;
  if (this.spark_components_RichEditableText__textContainerManager.hostFormat.lineBreak == "explicit")
    return false;
  if (!isNaN(this.spark_components_RichEditableText_widthConstraint)) {
    if (!isNaN(this.explicitHeight) || !isNaN(this.spark_components_RichEditableText__heightInLines) || !isNaN(this.spark_components_RichEditableText_heightConstraint)) {
      return false;
    }
  }
  if (!isNaN(this.spark_components_RichEditableText_heightConstraint)) {
    if (!isNaN(this.explicitWidth) || !isNaN(this.spark_components_RichEditableText__widthInChars))
      return false;
  }
  this.invalidateSize();
  this.spark_components_RichEditableText_remeasuringText = true;
  return true;
};


/**
 *  @asprivate
 * @private
 * @param {Object} content
 * @return {org.apache.royale.textLayout.elements.TextFlow}
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_createTextFlowFromContent = function(content) {
  var /** @type {org.apache.royale.textLayout.elements.TextFlow} */ textFlow;
  if (org.apache.royale.utils.Language.is(content, org.apache.royale.textLayout.elements.TextFlow)) {
    textFlow = org.apache.royale.utils.Language.as(content, org.apache.royale.textLayout.elements.TextFlow);
  } else if (org.apache.royale.utils.Language.is(content, Array)) {
    textFlow = new org.apache.royale.textLayout.elements.TextFlow();
    textFlow.whiteSpaceCollapse = this.getStyle("whiteSpaceCollapse");
    textFlow.mxmlChildren = org.apache.royale.utils.Language.as(content, Array);
    textFlow.whiteSpaceCollapse = undefined;
  } else {
    textFlow = new org.apache.royale.textLayout.elements.TextFlow();
    textFlow.whiteSpaceCollapse = this.getStyle("whiteSpaceCollapse");
    textFlow.mxmlChildren = [content];
    textFlow.whiteSpaceCollapse = undefined;
  }
  return textFlow;
};


/**
 *  @asprivate
 * @private
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_updateEditingMode = function() {
  var /** @type {string} */ newEditingMode = org.apache.royale.textLayout.edit.EditingMode.READ_ONLY;
  if (this.enabled) {
    if (this.spark_components_RichEditableText__editable)
      newEditingMode = org.apache.royale.textLayout.edit.EditingMode.READ_WRITE;
    else if (this.spark_components_RichEditableText__selectable)
      newEditingMode = org.apache.royale.textLayout.edit.EditingMode.READ_SELECT;
  }
  this.spark_components_RichEditableText_editingMode = newEditingMode;
};


/**
 *  @asprivate
 * 
 *  This is used when text is either inserted or appended via the API.
 * @private
 * @param {string} newText
 * @param {boolean=} isAppend
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_handleInsertText = function(newText, isAppend) {
  isAppend = typeof isAppend !== 'undefined' ? isAppend : false;
  this.validateProperties();
  if (isAppend) {
    this.spark_components_RichEditableText__selectionAnchorPosition = (this.text.length) >> 0;
    this.spark_components_RichEditableText__selectionActivePosition = this.spark_components_RichEditableText__selectionAnchorPosition;
  } else {
    if (this.spark_components_RichEditableText__selectionAnchorPosition == -1 || this.spark_components_RichEditableText__selectionActivePosition == -1)
      return;
  }
  var /** @type {boolean} */ success = this.spark_components_RichEditableText__textContainerManager.http_$$www_adobe_com$2006$flex$mx$internal__insertTextOperation(newText, this.spark_components_RichEditableText__selectionAnchorPosition, this.spark_components_RichEditableText__selectionActivePosition);
  if (success)
    this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
};


/**
 *  @asprivate
 *  Called when the TextContainerManager dispatches a 'selectionChange' event.
 * @private
 * @param {org.apache.royale.textLayout.events.SelectionEvent} event
 */
spark.components.RichEditableText.prototype.spark_components_RichEditableText_textContainerManager_selectionChangeHandler = function(event) {
  var /** @type {number} */ oldAnchor = this.spark_components_RichEditableText__selectionAnchorPosition;
  var /** @type {number} */ oldActive = this.spark_components_RichEditableText__selectionActivePosition;
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selectionState = event.selectionState;
  if (selectionState) {
    this.spark_components_RichEditableText__selectionAnchorPosition = selectionState.anchorPosition;
    this.spark_components_RichEditableText__selectionActivePosition = selectionState.activePosition;
  } else {
    this.spark_components_RichEditableText__selectionAnchorPosition = -1;
    this.spark_components_RichEditableText__selectionActivePosition = -1;
  }
  this.spark_components_RichEditableText_hasProgrammaticSelectionRange = false;
  var /** @type {boolean} */ changed = oldAnchor != this.spark_components_RichEditableText__selectionAnchorPosition || oldActive != this.spark_components_RichEditableText__selectionActivePosition;
  if (changed) {
    this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.SELECTION_CHANGE));
  }
};


/**
 *  @asprivate
 *  release the textline as it is temporary.
 * @export
 * @override
 */
spark.components.RichEditableText.prototype.addedToParent = function() {
  spark.components.RichEditableText.superClass_.addedToParent.apply(this);
  this.commitProperties();
  this.measure();
  this.updateDisplayList(this.getExplicitOrMeasuredWidth(), this.getExplicitOrMeasuredHeight());
  if (this.element['tabIndex'] == -1)
    this.element['tabIndex'] = 0;
  this.addBead(new org.apache.royale.textLayout.beads.DispatchTLFKeyboardEventBead());
};


spark.components.RichEditableText.prototype.set__enabled = function(value) {
  if (value == spark.components.RichEditableText.superClass_.get__enabled.apply(this))
    return;
  spark.components.RichEditableText.superClass_.set__enabled.apply(this, [ value] );
  this.spark_components_RichEditableText_enabledChanged = true;
  this.invalidateProperties();
  this.invalidateDisplayList();
};


spark.components.RichEditableText.prototype.get__isTruncated = function() {
  return false;
};


spark.components.RichEditableText.prototype.get__clipAndEnableScrolling = function() {
  return this.spark_components_RichEditableText__clipAndEnableScrolling;
};


spark.components.RichEditableText.prototype.set__clipAndEnableScrolling = function(value) {
  if (value == this.spark_components_RichEditableText__clipAndEnableScrolling)
    return;
  this.spark_components_RichEditableText__clipAndEnableScrolling = value;
  this.spark_components_RichEditableText_clipAndEnableScrollingChanged = true;
  this.invalidateProperties();
};


spark.components.RichEditableText.prototype.get__horizontalScrollPosition = function() {
  return this.spark_components_RichEditableText__horizontalScrollPosition;
};


spark.components.RichEditableText.prototype.set__horizontalScrollPosition = function(value) {
  if (isNaN(value))
    value = 0;
  if (value == this.spark_components_RichEditableText__horizontalScrollPosition)
    return;
  this.spark_components_RichEditableText__horizontalScrollPosition = value;
  this.spark_components_RichEditableText_horizontalScrollPositionChanged = true;
  this.invalidateProperties();
};


spark.components.RichEditableText.prototype.get__verticalScrollPosition = function() {
  return this.spark_components_RichEditableText__verticalScrollPosition;
};


spark.components.RichEditableText.prototype.set__verticalScrollPosition = function(value) {
  if (isNaN(value))
    value = 0;
  if (value == this.spark_components_RichEditableText__verticalScrollPosition)
    return;
  this.spark_components_RichEditableText__verticalScrollPosition = value;
  this.spark_components_RichEditableText_verticalScrollPositionChanged = true;
  this.invalidateProperties();
};


spark.components.RichEditableText.prototype.get__content = function() {
  return this.spark_components_RichEditableText__content;
};


spark.components.RichEditableText.prototype.set__content = function(value) {
  if (value == null) {
    this.text = "";
    return;
  }
  if (value == this.spark_components_RichEditableText__content)
    return;
  this.spark_components_RichEditableText__content = value;
  this.spark_components_RichEditableText_contentChanged = true;
  this.spark_components_RichEditableText_source = "content";
  this.spark_components_RichEditableText_textChanged = false;
  this.spark_components_RichEditableText_textFlowChanged = false;
  this.spark_components_RichEditableText__text = null;
  this.spark_components_RichEditableText__textFlow = null;
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
  if (this.parent) {
    this.commitProperties();
    this.updateDisplayList(this.getExplicitOrMeasuredWidth(), this.getExplicitOrMeasuredHeight());
  }
};


spark.components.RichEditableText.prototype.get__displayAsPassword = function() {
  return this.spark_components_RichEditableText__displayAsPassword;
};


spark.components.RichEditableText.prototype.set__displayAsPassword = function(value) {
  if (value == this.spark_components_RichEditableText__displayAsPassword)
    return;
  this.spark_components_RichEditableText__displayAsPassword = value;
  this.spark_components_RichEditableText_displayAsPasswordChanged = true;
  this.invalidateProperties();
  this.invalidateSize();
  this.invalidateDisplayList();
};


spark.components.RichEditableText.prototype.get__editable = function() {
  return this.spark_components_RichEditableText__editable;
};


spark.components.RichEditableText.prototype.set__editable = function(value) {
  if (value == this.spark_components_RichEditableText__editable)
    return;
  this.spark_components_RichEditableText__editable = value;
};


spark.components.RichEditableText.prototype.get__spark_components_RichEditableText_editingMode = function() {
  if (this.spark_components_RichEditableText_enabledChanged || this.spark_components_RichEditableText_editableChanged || this.spark_components_RichEditableText_selectableChanged) {
    this.spark_components_RichEditableText_updateEditingMode();
    this.spark_components_RichEditableText_enabledChanged = false;
    this.spark_components_RichEditableText_editableChanged = false;
    this.spark_components_RichEditableText_selectableChanged = false;
  }
  return this.spark_components_RichEditableText__textContainerManager.editingMode;
};


spark.components.RichEditableText.prototype.set__spark_components_RichEditableText_editingMode = function(value) {
  var /** @type {string} */ lastEditingMode = this.spark_components_RichEditableText__textContainerManager.editingMode;
  if (lastEditingMode == value)
    return;
  this.spark_components_RichEditableText__textContainerManager.editingMode = value;
  if (value != org.apache.royale.textLayout.edit.EditingMode.READ_ONLY && this.spark_components_RichEditableText__selectionAnchorPosition != -1 && this.spark_components_RichEditableText__selectionActivePosition != -1) {
    var /** @type {org.apache.royale.textLayout.edit.ISelectionManager} */ selectionManager = this.spark_components_RichEditableText__textContainerManager.beginInteraction();
    selectionManager.selectRange(this.spark_components_RichEditableText__selectionAnchorPosition, this.spark_components_RichEditableText__selectionActivePosition);
    this.spark_components_RichEditableText__textContainerManager.endInteraction();
  }
};


spark.components.RichEditableText.prototype.get__heightInLines = function() {
  return this.spark_components_RichEditableText__heightInLines;
};


spark.components.RichEditableText.prototype.set__heightInLines = function(value) {
  if (value == this.spark_components_RichEditableText__heightInLines)
    return;
  this.spark_components_RichEditableText__heightInLines = value;
};


spark.components.RichEditableText.prototype.get__lineBreak = function() {
  return org.apache.royale.utils.Language.string(this.getStyle("lineBreak"));
};


spark.components.RichEditableText.prototype.set__lineBreak = function(value) {
  this.setStyle("lineBreak", value);
};


spark.components.RichEditableText.prototype.get__maxChars = function() {
  return this.spark_components_RichEditableText__maxChars;
};


spark.components.RichEditableText.prototype.set__maxChars = function(value) {
  this.spark_components_RichEditableText__maxChars = value;
};


spark.components.RichEditableText.prototype.get__multiline = function() {
  return this.spark_components_RichEditableText__multiline;
};


spark.components.RichEditableText.prototype.set__multiline = function(value) {
  this.spark_components_RichEditableText__multiline = value;
};


spark.components.RichEditableText.prototype.get__restrict = function() {
  return this.spark_components_RichEditableText__restrict;
};


spark.components.RichEditableText.prototype.set__restrict = function(value) {
  this.spark_components_RichEditableText__restrict = value;
};


spark.components.RichEditableText.prototype.get__selectable = function() {
  return this.spark_components_RichEditableText__selectable;
};


spark.components.RichEditableText.prototype.set__selectable = function(value) {
  if (value == this.spark_components_RichEditableText__selectable)
    return;
  this.spark_components_RichEditableText__selectable = value;
  this.spark_components_RichEditableText_selectableChanged = true;
  this.invalidateProperties();
  this.invalidateDisplayList();
};


spark.components.RichEditableText.prototype.get__selectionActivePosition = function() {
  return this.spark_components_RichEditableText__selectionActivePosition;
};


spark.components.RichEditableText.prototype.get__selectionAnchorPosition = function() {
  return this.spark_components_RichEditableText__selectionAnchorPosition;
};


spark.components.RichEditableText.prototype.get__selectionHighlighting = function() {
  return this.spark_components_RichEditableText__selectionHighlighting;
};


spark.components.RichEditableText.prototype.set__selectionHighlighting = function(value) {
  if (value == this.spark_components_RichEditableText__selectionHighlighting)
    return;
  this.spark_components_RichEditableText__selectionHighlighting = value;
  this.spark_components_RichEditableText_selectionFormatsChanged = true;
  this.invalidateProperties();
  this.invalidateDisplayList();
};


spark.components.RichEditableText.prototype.get__text = function() {
  return this.spark_components_RichEditableText__text;
};


spark.components.RichEditableText.prototype.set__text = function(value) {
  if (value == null)
    value = "";
  this.spark_components_RichEditableText__text = value;
  this.spark_components_RichEditableText_textChanged = true;
  this.spark_components_RichEditableText_source = "text";
  this.spark_components_RichEditableText_textFlowChanged = false;
  this.spark_components_RichEditableText_contentChanged = false;
  this.spark_components_RichEditableText__textFlow = null;
  this.spark_components_RichEditableText__content = null;
  this.invalidateProperties();
  this.invalidateSize();
  this.invalidateDisplayList();
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
  if (this.parent) {
    this.commitProperties();
    this.updateDisplayList(this.getExplicitOrMeasuredWidth(), this.getExplicitOrMeasuredHeight());
  }
};


spark.components.RichEditableText.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__textContainerManager = function() {
  return this.spark_components_RichEditableText__textContainerManager;
};


spark.components.RichEditableText.prototype.get__textFlow = function() {
  if (!this.spark_components_RichEditableText__textFlow) {
    if (this.spark_components_RichEditableText__content != null) {
      this.spark_components_RichEditableText__textFlow = this.spark_components_RichEditableText_createTextFlowFromContent(this.spark_components_RichEditableText__content);
      this.spark_components_RichEditableText__content = null;
    } else {
      this.spark_components_RichEditableText__textFlow = org.apache.royale.utils.Language.as(spark.components.RichEditableText.staticPlainTextImporter.importToFlow(this.spark_components_RichEditableText__text), org.apache.royale.textLayout.elements.TextFlow);
    }
    this.spark_components_RichEditableText_textFlowChanged = true;
  }
  if (this.spark_components_RichEditableText_textChanged || this.spark_components_RichEditableText_contentChanged || this.spark_components_RichEditableText_textFlowChanged) {
    this.spark_components_RichEditableText__textContainerManager.setTextFlow(this.spark_components_RichEditableText__textFlow);
    this.spark_components_RichEditableText_textChanged = this.spark_components_RichEditableText_contentChanged = this.spark_components_RichEditableText_textFlowChanged = false;
  }
  if (this.spark_components_RichEditableText_editingMode != org.apache.royale.textLayout.edit.EditingMode.READ_ONLY) {
    this.spark_components_RichEditableText__textContainerManager.beginInteraction();
    this.spark_components_RichEditableText__textContainerManager.endInteraction();
  }
  return this.spark_components_RichEditableText__textFlow;
};


spark.components.RichEditableText.prototype.set__textFlow = function(value) {
  if (value == null) {
    this.text = "";
    return;
  }
  if (value == this.spark_components_RichEditableText__textFlow)
    return;
  this.spark_components_RichEditableText__textFlow = value;
  this.spark_components_RichEditableText_textFlowChanged = true;
  this.spark_components_RichEditableText_source = "textFlow";
  this.spark_components_RichEditableText_textChanged = false;
  this.spark_components_RichEditableText_contentChanged = false;
  this.spark_components_RichEditableText__text = null;
  this.spark_components_RichEditableText__content = null;
  this.invalidateProperties();
  this.invalidateSize();
  this.invalidateDisplayList();
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
  if (this.parent) {
    this.commitProperties();
    this.updateDisplayList(this.getExplicitOrMeasuredWidth(), this.getExplicitOrMeasuredHeight());
  }
};


spark.components.RichEditableText.prototype.get__typicalText = function() {
  return this.spark_components_RichEditableText__typicalText;
};


spark.components.RichEditableText.prototype.set__typicalText = function(value) {
  if (value == this.spark_components_RichEditableText__typicalText)
    return;
  this.spark_components_RichEditableText__typicalText = value;
  this.spark_components_RichEditableText_typicalTextChanged = true;
  this.invalidateProperties();
  this.invalidateSize();
  this.invalidateDisplayList();
};


spark.components.RichEditableText.prototype.get__widthInChars = function() {
  return this.spark_components_RichEditableText__widthInChars;
};


spark.components.RichEditableText.prototype.set__widthInChars = function(value) {
  if (value == this.spark_components_RichEditableText__widthInChars)
    return;
  this.spark_components_RichEditableText__widthInChars = value;
};


Object.defineProperties(spark.components.RichEditableText.prototype, /** @lends {spark.components.RichEditableText.prototype} */ {
/**
  * @export
  * @type {boolean} */
enabled: {
get: mx.core.UIComponent.prototype.get__enabled,
set: spark.components.RichEditableText.prototype.set__enabled},
/**
  * @export
  * @type {boolean} */
isTruncated: {
get: spark.components.RichEditableText.prototype.get__isTruncated},
/**
  * @export
  * @type {boolean} */
clipAndEnableScrolling: {
get: spark.components.RichEditableText.prototype.get__clipAndEnableScrolling,
set: spark.components.RichEditableText.prototype.set__clipAndEnableScrolling},
/**
  * @export
  * @type {number} */
horizontalScrollPosition: {
get: spark.components.RichEditableText.prototype.get__horizontalScrollPosition,
set: spark.components.RichEditableText.prototype.set__horizontalScrollPosition},
/**
  * @export
  * @type {number} */
verticalScrollPosition: {
get: spark.components.RichEditableText.prototype.get__verticalScrollPosition,
set: spark.components.RichEditableText.prototype.set__verticalScrollPosition},
/**
  * @export
  * @type {Object} */
content: {
get: spark.components.RichEditableText.prototype.get__content,
set: spark.components.RichEditableText.prototype.set__content},
/**
  * @export
  * @type {boolean} */
displayAsPassword: {
get: spark.components.RichEditableText.prototype.get__displayAsPassword,
set: spark.components.RichEditableText.prototype.set__displayAsPassword},
/**
  * @export
  * @type {boolean} */
editable: {
get: spark.components.RichEditableText.prototype.get__editable,
set: spark.components.RichEditableText.prototype.set__editable},
/**
  * @type {string} */
spark_components_RichEditableText_editingMode: {
get: spark.components.RichEditableText.prototype.get__spark_components_RichEditableText_editingMode,
set: spark.components.RichEditableText.prototype.set__spark_components_RichEditableText_editingMode},
/**
  * @export
  * @type {number} */
heightInLines: {
get: spark.components.RichEditableText.prototype.get__heightInLines,
set: spark.components.RichEditableText.prototype.set__heightInLines},
/**
  * @export
  * @type {string} */
lineBreak: {
get: spark.components.RichEditableText.prototype.get__lineBreak,
set: spark.components.RichEditableText.prototype.set__lineBreak},
/**
  * @export
  * @type {number} */
maxChars: {
get: spark.components.RichEditableText.prototype.get__maxChars,
set: spark.components.RichEditableText.prototype.set__maxChars},
/**
  * @export
  * @type {boolean} */
multiline: {
get: spark.components.RichEditableText.prototype.get__multiline,
set: spark.components.RichEditableText.prototype.set__multiline},
/**
  * @export
  * @type {string} */
restrict: {
get: spark.components.RichEditableText.prototype.get__restrict,
set: spark.components.RichEditableText.prototype.set__restrict},
/**
  * @export
  * @type {boolean} */
selectable: {
get: spark.components.RichEditableText.prototype.get__selectable,
set: spark.components.RichEditableText.prototype.set__selectable},
/**
  * @export
  * @type {number} */
selectionActivePosition: {
get: spark.components.RichEditableText.prototype.get__selectionActivePosition},
/**
  * @export
  * @type {number} */
selectionAnchorPosition: {
get: spark.components.RichEditableText.prototype.get__selectionAnchorPosition},
/**
  * @export
  * @type {string} */
selectionHighlighting: {
get: spark.components.RichEditableText.prototype.get__selectionHighlighting,
set: spark.components.RichEditableText.prototype.set__selectionHighlighting},
/**
  * @export
  * @type {string} */
text: {
get: spark.components.RichEditableText.prototype.get__text,
set: spark.components.RichEditableText.prototype.set__text},
/**
  * @export
  * @type {org.apache.royale.textLayout.container.TextContainerManager} */
http_$$www_adobe_com$2006$flex$mx$internal__textContainerManager: {
get: spark.components.RichEditableText.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__textContainerManager},
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.TextFlow} */
textFlow: {
get: spark.components.RichEditableText.prototype.get__textFlow,
set: spark.components.RichEditableText.prototype.set__textFlow},
/**
  * @export
  * @type {string} */
typicalText: {
get: spark.components.RichEditableText.prototype.get__typicalText,
set: spark.components.RichEditableText.prototype.set__typicalText},
/**
  * @export
  * @type {number} */
widthInChars: {
get: spark.components.RichEditableText.prototype.get__widthInChars,
set: spark.components.RichEditableText.prototype.set__widthInChars}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
spark.components.RichEditableText.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RichEditableText', qName: 'spark.components.RichEditableText', kind: 'class' }], interfaces: [mx.managers.IFocusManagerComponent, spark.core.IEditableText, spark.core.IViewport] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
spark.components.RichEditableText.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'http://www.adobe.com/2006/flex/mx/internal::passwordChar': { type: 'String', get_set: function (/** spark.components.RichEditableText */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__passwordChar = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__passwordChar;}},
        'http://www.adobe.com/2006/flex/mx/internal::autoSize': { type: 'Boolean', get_set: function (/** spark.components.RichEditableText */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__autoSize = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__autoSize;}}
      };
    },
    accessors: function () {
      return {
        'enabled': { type: 'Boolean', access: 'writeonly', declaredBy: 'spark.components.RichEditableText'},
        'isTruncated': { type: 'Boolean', access: 'readonly', declaredBy: 'spark.components.RichEditableText'},
        'clipAndEnableScrolling': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'horizontalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'spark.components.RichEditableText', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'verticalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'spark.components.RichEditableText', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'content': { type: 'Object', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'displayAsPassword': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'editable': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'heightInLines': { type: 'Number', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'lineBreak': { type: 'String', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'maxChars': { type: 'int', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'multiline': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'restrict': { type: 'String', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'selectable': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'selectionActivePosition': { type: 'int', access: 'readonly', declaredBy: 'spark.components.RichEditableText', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'selectionChange' } ] } ]; }},
        'selectionAnchorPosition': { type: 'int', access: 'readonly', declaredBy: 'spark.components.RichEditableText', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'selectionChange' } ] } ]; }},
        'selectionHighlighting': { type: 'String', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'spark.components.RichEditableText', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::textContainerManager': { type: 'org.apache.royale.textLayout.container.TextContainerManager', access: 'readonly', declaredBy: 'spark.components.RichEditableText'},
        'textFlow': { type: 'org.apache.royale.textLayout.elements.TextFlow', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'typicalText': { type: 'String', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'},
        'widthInChars': { type: 'Number', access: 'readwrite', declaredBy: 'spark.components.RichEditableText'}
      };
    },
    methods: function () {
      return {
        'RichEditableText': { type: '', declaredBy: 'spark.components.RichEditableText'},
        'insertText': { type: 'void', declaredBy: 'spark.components.RichEditableText', parameters: function () { return [ 'String', false ]; }},
        'appendText': { type: 'void', declaredBy: 'spark.components.RichEditableText', parameters: function () { return [ 'String', false ]; }},
        'scrollToRange': { type: 'void', declaredBy: 'spark.components.RichEditableText', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'selectRange': { type: 'void', declaredBy: 'spark.components.RichEditableText', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'selectAll': { type: 'void', declaredBy: 'spark.components.RichEditableText'},
        'http://www.adobe.com/2006/flex/mx/internal::createTextContainerManager': { type: 'spark.components.supportClasses.RichEditableTextContainerManager', declaredBy: 'spark.components.RichEditableText'},
        'addedToParent': { type: 'void', declaredBy: 'spark.components.RichEditableText'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
spark.components.RichEditableText.prototype.ROYALE_COMPILE_FLAGS = 10;
