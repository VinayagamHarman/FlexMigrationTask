/**
 * Generated by Apache Royale Compiler from spark/components/RadioButtonGroup.as
 * spark.components.RadioButtonGroup
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('spark.components.RadioButtonGroup');
/* Royale Dependency List: mx.core.IFlexDisplayObject,mx.core.mx_internal,mx.events.FlexEvent,org.apache.royale.events.Event,spark.components.RadioButton,XML*/

goog.require('org.apache.royale.events.EventDispatcher');



/**
 *  Constructor.
 *
 *  @asparam document In simple cases where a class extends EventDispatcher,
 *  the <code>document</code> parameter should not be used.
 *
 *  @see flash.events.EventDispatcher
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @param {mx.core.IFlexDisplayObject=} document
 */
spark.components.RadioButtonGroup = function(document) {
  document = typeof document !== 'undefined' ? document : null;
  
  this.spark_components_RadioButtonGroup_radioButtons = [];
  spark.components.RadioButtonGroup.base(this, 'constructor');
};
goog.inherits(spark.components.RadioButtonGroup, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('spark.components.RadioButtonGroup', spark.components.RadioButtonGroup);


/**
 * @private
 * @type {Array}
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup_radioButtons;


/**
 * @private
 * @type {boolean}
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup__enabled = true;


/**
 * @private
 * @type {number}
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup__selectedIndex = -1;


/**
 * @private
 * @type {Object}
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup__selectedValue;


/**
 * @private
 * @type {spark.components.RadioButton}
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup__selection;


/**
 *  Returns the RadioButton component at the specified index.
 *
 *  @asparam index The 0-based index of the RadioButton in the
 *  RadioButtonGroup.
 *
 *  @asreturn The specified RadioButton component if index is between
 *  0 and <code>numRadioButtons</code> - 1.  Returns
 *  <code>null</code> if the index is invalid.
 * 
 *  @see numRadioButtons
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Royale 0.9.4
 * @export
 * @param {number} index
 * @return {spark.components.RadioButton}
 */
spark.components.RadioButtonGroup.prototype.getRadioButtonAt = function(index) {
  if (index >= 0 && index < this.numRadioButtons)
    return this.spark_components_RadioButtonGroup_radioButtons[index];
  return null;
};


/**
 *  @asprivate
 *  Add a radio button to the group.  This can be called by
 *  RadioButton or via the addedHandler when applying a state.
 * @export
 * @param {spark.components.RadioButton} instance
 */
spark.components.RadioButtonGroup.prototype.http_$$www_adobe_com$2006$flex$mx$internal__addInstance = function(instance) {
  this.spark_components_RadioButtonGroup_radioButtons.push(instance);
  for (var /** @type {number} */ i = 0; i < this.spark_components_RadioButtonGroup_radioButtons.length; i++)
    this.spark_components_RadioButtonGroup_radioButtons[i].indexNumber = i;
  if (this.spark_components_RadioButtonGroup__selectedValue != null)
    this.selectedValue = this.spark_components_RadioButtonGroup__selectedValue;
  if (instance.selected == true)
    this.selection = instance;
  instance.http_$$www_adobe_com$2006$flex$mx$internal__radioButtonGroup = this;
  instance.invalidateSkinState();
  this.dispatchEvent(new org.apache.royale.events.Event("numRadioButtonsChanged"));
};


/**
 * @private
 * @type {string}
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup__id;


/**
 *  @asprivate
 *  Remove a radio button from the group.  This can be called by
 *  RadioButton or via the removedHandler when removing a state.
 * @private
 * @param {spark.components.RadioButton} instance
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup_removeInstance = function(instance) {
  if (instance) {
    var /** @type {boolean} */ foundInstance = false;
    for (var /** @type {number} */ i = 0; i < this.numRadioButtons; i++) {
      var /** @type {spark.components.RadioButton} */ rb = this.getRadioButtonAt(i);
      if (foundInstance) {
        rb.http_$$www_adobe_com$2006$flex$mx$internal__indexNumber = (rb.http_$$www_adobe_com$2006$flex$mx$internal__indexNumber - 1) >> 0;
      } else if (rb == instance) {
        if (instance == this.spark_components_RadioButtonGroup__selection)
          this.spark_components_RadioButtonGroup__selection = null;
        instance.http_$$www_adobe_com$2006$flex$mx$internal__radioButtonGroup = null;
        instance.invalidateSkinState();
        this.spark_components_RadioButtonGroup_radioButtons.splice(i, 1);
        foundInstance = true;
        i--;
      }
    }
    if (foundInstance)
      this.dispatchEvent(new org.apache.royale.events.Event("numRadioButtonsChanged"));
  }
};


/**
 *  @asprivate
 * @export
 * @param {spark.components.RadioButton} value
 * @param {boolean=} fireChange
 */
spark.components.RadioButtonGroup.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setSelection = function(value, fireChange) {
  fireChange = typeof fireChange !== 'undefined' ? fireChange : true;
  if (this.spark_components_RadioButtonGroup__selection == value)
    return;
  if (value == null) {
    if (this.selection != null) {
      this.spark_components_RadioButtonGroup__selection.selected = false;
      this.spark_components_RadioButtonGroup__selection = null;
      this.spark_components_RadioButtonGroup__selectedIndex = -1;
      if (fireChange)
        this.dispatchEvent(new org.apache.royale.events.Event(org.apache.royale.events.Event.CHANGE));
    }
  } else {
    var /** @type {number} */ n = this.numRadioButtons;
    for (var /** @type {number} */ i = 0; i < n; i++) {
      if (value == this.getRadioButtonAt(i)) {
        this.spark_components_RadioButtonGroup_changeSelection(i, fireChange);
        break;
      }
    }
  }
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
};


/**
 *  @asprivate
 * @private
 * @param {number} index
 * @param {boolean=} fireChange
 */
spark.components.RadioButtonGroup.prototype.spark_components_RadioButtonGroup_changeSelection = function(index, fireChange) {
  fireChange = typeof fireChange !== 'undefined' ? fireChange : true;
  var /** @type {spark.components.RadioButton} */ rb = this.getRadioButtonAt(index);
  if (rb && rb != this.spark_components_RadioButtonGroup__selection) {
    if (this.spark_components_RadioButtonGroup__selection)
      this.spark_components_RadioButtonGroup__selection.selected = false;
    this.spark_components_RadioButtonGroup__selection = rb;
    this.spark_components_RadioButtonGroup__selection.selected = true;
    this.spark_components_RadioButtonGroup__selectedIndex = index;
    if (fireChange)
      this.dispatchEvent(new org.apache.royale.events.Event(org.apache.royale.events.Event.CHANGE));
  }
};


spark.components.RadioButtonGroup.prototype.get__enabled = function() {
  return this.spark_components_RadioButtonGroup__enabled;
};


spark.components.RadioButtonGroup.prototype.set__enabled = function(value) {
  if (this.spark_components_RadioButtonGroup__enabled == value)
    return;
  this.spark_components_RadioButtonGroup__enabled = value;
};


spark.components.RadioButtonGroup.prototype.get__numRadioButtons = function() {
  return (this.spark_components_RadioButtonGroup_radioButtons.length) >> 0;
};


spark.components.RadioButtonGroup.prototype.get__selectedIndex = function() {
  return this.spark_components_RadioButtonGroup__selectedIndex;
};


spark.components.RadioButtonGroup.prototype.set__selectedIndex = function(newValue) {
  if (newValue == this.spark_components_RadioButtonGroup__selectedIndex) {
    return;
  }
  if (newValue == -1) {
    this.http_$$www_adobe_com$2006$flex$mx$internal__setSelection(null, false);
    this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
    return;
  }
  this.spark_components_RadioButtonGroup_changeSelection(newValue, false);
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
};


spark.components.RadioButtonGroup.prototype.get__selectedValue = function() {
  if (this.selection) {
    return this.selection.value != null ? this.selection.value : this.selection.label;
  }
  return null;
};


spark.components.RadioButtonGroup.prototype.set__selectedValue = function(value) {
  this.spark_components_RadioButtonGroup__selectedValue = value;
  if (value == null) {
    this.http_$$www_adobe_com$2006$flex$mx$internal__setSelection(null, false);
    return;
  }
  var /** @type {number} */ n = this.numRadioButtons;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {spark.components.RadioButton} */ radioButton = this.getRadioButtonAt(i);
    if (radioButton.value == value || radioButton.label == value) {
      this.spark_components_RadioButtonGroup_changeSelection(i, false);
      this.spark_components_RadioButtonGroup__selectedValue = null;
      this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
      break;
    }
  }
};


spark.components.RadioButtonGroup.prototype.get__selection = function() {
  return this.spark_components_RadioButtonGroup__selection;
};


spark.components.RadioButtonGroup.prototype.set__selection = function(value) {
  if (this.spark_components_RadioButtonGroup__selection == value)
    return;
  this.http_$$www_adobe_com$2006$flex$mx$internal__setSelection(value, false);
};


spark.components.RadioButtonGroup.prototype.get__id = function() {
  return this.spark_components_RadioButtonGroup__id;
};


spark.components.RadioButtonGroup.prototype.set__id = function(value) {
  this.spark_components_RadioButtonGroup__id = value;
};


Object.defineProperties(spark.components.RadioButtonGroup.prototype, /** @lends {spark.components.RadioButtonGroup.prototype} */ {
/**
  * @export
  * @type {boolean} */
enabled: {
get: spark.components.RadioButtonGroup.prototype.get__enabled,
set: spark.components.RadioButtonGroup.prototype.set__enabled},
/**
  * @export
  * @type {number} */
numRadioButtons: {
get: spark.components.RadioButtonGroup.prototype.get__numRadioButtons},
/**
  * @export
  * @type {number} */
selectedIndex: {
get: spark.components.RadioButtonGroup.prototype.get__selectedIndex,
set: spark.components.RadioButtonGroup.prototype.set__selectedIndex},
/**
  * @export
  * @type {Object} */
selectedValue: {
get: spark.components.RadioButtonGroup.prototype.get__selectedValue,
set: spark.components.RadioButtonGroup.prototype.set__selectedValue},
/**
  * @export
  * @type {spark.components.RadioButton} */
selection: {
get: spark.components.RadioButtonGroup.prototype.get__selection,
set: spark.components.RadioButtonGroup.prototype.set__selection},
/**
  * @export
  * @type {string} */
id: {
get: spark.components.RadioButtonGroup.prototype.get__id,
set: spark.components.RadioButtonGroup.prototype.set__id}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
spark.components.RadioButtonGroup.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RadioButtonGroup', qName: 'spark.components.RadioButtonGroup', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
spark.components.RadioButtonGroup.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'enabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'spark.components.RadioButtonGroup'},
        'numRadioButtons': { type: 'int', access: 'readonly', declaredBy: 'spark.components.RadioButtonGroup'},
        'selectedIndex': { type: 'int', access: 'readwrite', declaredBy: 'spark.components.RadioButtonGroup'},
        'selectedValue': { type: 'Object', access: 'readwrite', declaredBy: 'spark.components.RadioButtonGroup', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'selection': { type: 'spark.components.RadioButton', access: 'readwrite', declaredBy: 'spark.components.RadioButtonGroup', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] }, { name: 'Bindable', args: [ { key: '', value: 'valueCommit' } ] } ]; }},
        'id': { type: 'String', access: 'readwrite', declaredBy: 'spark.components.RadioButtonGroup'}
      };
    },
    methods: function () {
      return {
        'RadioButtonGroup': { type: '', declaredBy: 'spark.components.RadioButtonGroup', parameters: function () { return [ 'mx.core.IFlexDisplayObject', true ]; }},
        'getRadioButtonAt': { type: 'spark.components.RadioButton', declaredBy: 'spark.components.RadioButtonGroup', parameters: function () { return [ 'int', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::addInstance': { type: 'void', declaredBy: 'spark.components.RadioButtonGroup', parameters: function () { return [ 'spark.components.RadioButton', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::setSelection': { type: 'void', declaredBy: 'spark.components.RadioButtonGroup', parameters: function () { return [ 'spark.components.RadioButton', false ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
spark.components.RadioButtonGroup.prototype.ROYALE_COMPILE_FLAGS = 10;
