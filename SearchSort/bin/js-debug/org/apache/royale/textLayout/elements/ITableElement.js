/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/ITableElement.as
 * org.apache.royale.textLayout.elements.ITableElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.ITableElement');
/* Royale Dependency List: org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.elements.CellCoordinates,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableColElement,org.apache.royale.textLayout.elements.ITableRowElement,org.apache.royale.textLayout.elements.TableColElement,org.apache.royale.textLayout.formats.ITextLayoutFormat,XML*/

goog.require('org.apache.royale.textLayout.elements.ITableFormattedElement');



/**
 * @interface
 * @extends {org.apache.royale.textLayout.elements.ITableFormattedElement}
 */
org.apache.royale.textLayout.elements.ITableElement = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.elements.ITableElement', org.apache.royale.textLayout.elements.ITableElement);
/**  * @type {number}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.numRows;
/**  * @type {number}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.numColumns;
/**  * @type {number}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.numCells;
/**  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.defaultRowFormat;
/**  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.defaultColumnFormat;
/**
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.addRow = function(format) {
};
/**
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.addRowAt = function(idx, format) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.addColumn = function(format) {
};
/**
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.addColumnAt = function(idx, format) {
};
/**
 * @export
 * @param {number} columnIndex
 * @return {org.apache.royale.textLayout.elements.ITableColElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getColumnAt = function(columnIndex) {
};
/**
 * @export
 * @param {number} rowIndex
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getRowAt = function(rowIndex) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {number}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getRowIndex = function(row) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsForRow = function(row) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsForRowArray = function(row) {
};
/**
 * @export
 * @param {number} index
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsForRowAt = function(index) {
};
/**
 * @export
 * @param {number} index
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsForRowAtArray = function(index) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsForColumn = function(column) {
};
/**
 * @export
 * @param {number} index
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsForColumnAt = function(index) {
};
/**
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.hasMergedCells = function() {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.TableColElement=} column
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.insertColumn = function(column, cells) {
};
/**
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.elements.TableColElement=} column
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.insertColumnAt = function(idx, column, cells) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement=} row
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.insertRow = function(row, cells) {
};
/**
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.elements.ITableRowElement=} row
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.insertRowAt = function(idx, row, cells) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeRow = function(row) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeRowWithContent = function(row) {
};
/**
 * @export
 * @param {number} idx
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeRowAt = function(idx) {
};
/**
 * @export
 * @param {number} idx
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeRowWithContentAt = function(idx) {
};
org.apache.royale.textLayout.elements.ITableElement.prototype.removeAllRowsWithContent = function() {
};
org.apache.royale.textLayout.elements.ITableElement.prototype.removeAllRows = function() {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 * @return {org.apache.royale.textLayout.elements.ITableColElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeColumn = function(column) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeColumnWithContent = function(column) {
};
/**
 * @export
 * @param {number} idx
 * @return {org.apache.royale.textLayout.elements.ITableColElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeColumnAt = function(idx) {
};
/**
 * @export
 * @param {number} idx
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.removeColumnWithContentAt = function(idx) {
};
org.apache.royale.textLayout.elements.ITableElement.prototype.normalizeCells = function() {
};
/**
 * @export
 * @param {number} columnIndex
 * @param {*} value
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.setColumnWidth = function(columnIndex, value) {
};
/**
 * @export
 * @param {number} rowIdx
 * @param {*} value
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.setRowHeight = function(rowIdx, value) {
};
/**
 * @export
 * @param {number} columnIndex
 * @return {*}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getColumnWidth = function(columnIndex) {
};
org.apache.royale.textLayout.elements.ITableElement.prototype.composeCells = function() {
};
/**
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getHeaderRows = function() {
};
/**
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getFooterRows = function() {
};
/**
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getBodyRows = function() {
};
/**
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getNextRow = function() {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} tableCell
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getNextCell = function(tableCell) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} tableCell
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getPreviousCell = function(tableCell) {
};
/**
 * @export
 * @param {number} rowIndex
 * @param {number} columnIndex
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellAt = function(rowIndex, columnIndex) {
};
/**
 * @export
 * @return {number}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getHeaderHeight = function() {
};
/**
 * @export
 * @return {number}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getFooterHeight = function() {
};
/**
 * @export
 * @param {number=} suggestedWidth
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.normalizeColumnWidths = function(suggestedWidth) {
};
/**
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCells = function() {
};
/**
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsArray = function() {
};
/**  * @type {number}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.width;
/**  * @type {boolean}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.hasCellDamage;
/**  * @type {number}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.headerRowCount;
/**  * @type {number}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.footerRowCount;
/**
 * @export
 * @return {org.apache.royale.textLayout.compose.ITextFlowTableBlock}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getFirstBlock = function() {
};
/**
 * @export
 * @return {org.apache.royale.textLayout.compose.ITextFlowTableBlock}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getNextBlock = function() {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} anchorCoords
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} activeCoords
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock=} block
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellsInRange = function(anchorCoords, activeCoords, block) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} coords
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.findCell = function(coords) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock} block
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.addCellToBlock = function(cell, block) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 * @return {org.apache.royale.textLayout.compose.ITextFlowTableBlock}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getCellBlock = function(cell) {
};
/**  * @type {Array}
 */org.apache.royale.textLayout.elements.ITableElement.prototype.tableBlocks;
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} start
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} end
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.getTableBlocksInRange = function(start, end) {
};
/**
 * @export
 * @param {number} index
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} defaultRowFormat
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.createRowElement = function(index, defaultRowFormat) {
};
/**
 * @export
 * @param {number} index
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} defaultColumnFormat
 * @return {org.apache.royale.textLayout.elements.TableColElement}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.createColumnElement = function(index, defaultColumnFormat) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ITableElement', qName: 'org.apache.royale.textLayout.elements.ITableElement', kind: 'interface' }], interfaces: [org.apache.royale.textLayout.elements.ITableFormattedElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'numRows': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'numColumns': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'numCells': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'defaultRowFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'defaultColumnFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'width': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'hasCellDamage': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'headerRowCount': { type: 'uint', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'footerRowCount': { type: 'uint', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'tableBlocks': { type: 'Vector.<org.apache.royale.textLayout.compose.ITextFlowTableBlock>', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'}
      };
    },
    methods: function () {
      return {
        'addRow': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'addRowAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'addColumn': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'addColumnAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'getColumnAt': { type: 'org.apache.royale.textLayout.elements.ITableColElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'getRowAt': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'getRowIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'getCellsForRow': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'getCellsForRowArray': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'getCellsForRowAt': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'getCellsForRowAtArray': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'getCellsForColumn': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'getCellsForColumnAt': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'hasMergedCells': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'insertColumn': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TableColElement', true ,'Array', true ]; }},
        'insertColumnAt': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.elements.TableColElement', true ,'Array', true ]; }},
        'insertRow': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', true ,'Array', true ]; }},
        'insertRowAt': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.elements.ITableRowElement', true ,'Array', true ]; }},
        'removeRow': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'removeRowWithContent': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'removeRowAt': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'removeRowWithContentAt': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'removeAllRowsWithContent': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'removeAllRows': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'removeColumn': { type: 'org.apache.royale.textLayout.elements.ITableColElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'removeColumnWithContent': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'removeColumnAt': { type: 'org.apache.royale.textLayout.elements.ITableColElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'removeColumnWithContentAt': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'normalizeCells': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'setColumnWidth': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'*', false ]; }},
        'setRowHeight': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'*', false ]; }},
        'getColumnWidth': { type: '*', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ]; }},
        'composeCells': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getHeaderRows': { type: 'Vector.<Vector.<org.apache.royale.textLayout.elements.ITableCellElement>>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getFooterRows': { type: 'Vector.<Vector.<org.apache.royale.textLayout.elements.ITableCellElement>>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getBodyRows': { type: 'Vector.<Vector.<org.apache.royale.textLayout.elements.ITableCellElement>>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getNextRow': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getNextCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'getPreviousCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'getCellAt': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'getHeaderHeight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getFooterHeight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'normalizeColumnWidths': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'Number', true ]; }},
        'getCells': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getCellsArray': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getFirstBlock': { type: 'org.apache.royale.textLayout.compose.ITextFlowTableBlock', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getNextBlock': { type: 'org.apache.royale.textLayout.compose.ITextFlowTableBlock', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement'},
        'getCellsInRange': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', true ]; }},
        'findCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'addCellToBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', false ]; }},
        'getCellBlock': { type: 'org.apache.royale.textLayout.compose.ITextFlowTableBlock', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'getTableBlocksInRange': { type: 'Vector.<org.apache.royale.textLayout.compose.ITextFlowTableBlock>', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'createRowElement': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'createColumnElement': { type: 'org.apache.royale.textLayout.elements.TableColElement', declaredBy: 'org.apache.royale.textLayout.elements.ITableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ITableElement.prototype.ROYALE_COMPILE_FLAGS = 10;
