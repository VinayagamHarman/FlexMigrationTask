/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/TableElement.as
 * org.apache.royale.textLayout.elements.TableElement
 *
 * @fileoverview
 *  @suppress {missingRequire}
 *
 * @suppress {checkTypes|accessControls}
 */

/* Royale Dependency List: org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.compose.TextFlowTableBlock,org.apache.royale.textLayout.elements.CellCoordinates,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableColElement,org.apache.royale.textLayout.elements.ITableRowElement,org.apache.royale.textLayout.elements.TableColElement,org.apache.royale.textLayout.elements.TableLeafElement,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.Language,XML*/
goog.provide('org.apache.royale.textLayout.elements.TableElement');
goog.provide('org.apache.royale.textLayout.elements.TableElement.CellCoords');

goog.require('org.apache.royale.textLayout.elements.TableFormattedElement');
goog.require('org.apache.royale.textLayout.elements.ITableElement');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.TableFormattedElement}
 * @implements {org.apache.royale.textLayout.elements.ITableElement}
 */
org.apache.royale.textLayout.elements.TableElement = function() {
  
  this.org_apache_royale_textLayout_elements_TableElement_columns = [];
  this.org_apache_royale_textLayout_elements_TableElement_rows = [];
  org.apache.royale.textLayout.elements.TableElement.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.elements.TableElement, org.apache.royale.textLayout.elements.TableFormattedElement);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.elements.TableElement', org.apache.royale.textLayout.elements.TableElement);


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__computedWidth;


/**
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.x;


/**
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.y;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_columns;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_rows;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__hasCellDamage = true;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__headerRowCount = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__footerRowCount = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__tableRowsComputed;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__headerRows;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__footerRows;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__bodyRows;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__composedRowIndex = 0;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__tableBlocks;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__tableBlockIndex = 0;


/**
 * @private
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__tableBlockDict;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.TableLeafElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__leaf;


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.canOwnFlowElement = function(elem) {
  return org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableCellElement) || org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableRowElement) || org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableColElement);
};


/** @asprivate if its in a numbered list expand the damage to all list items - causes the numbers to be regenerated 
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.modelChanged = function(changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration) {
  needNormalize = typeof needNormalize !== 'undefined' ? needNormalize : true;
  bumpGeneration = typeof bumpGeneration !== 'undefined' ? bumpGeneration : true;
  org.apache.royale.textLayout.elements.TableElement.superClass_.modelChanged.apply(this, [ changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration] );
};


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__defaultRowFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement__defaultColumnFormat;


/**
 * Adds a table cell element to the table. 
 * @inheritDoc
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.addChild = function(child) {
  if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.TableFormattedElement)) {
    org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.TableFormattedElement, true).table = this;
  }
  org.apache.royale.textLayout.elements.TableElement.superClass_.addChild.apply(this, [ child] );
  return child;
};


/**
 * Removes a table cell element from the table. 
 * @inheritDoc
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeChild = function(child) {
  org.apache.royale.textLayout.elements.TableElement.superClass_.removeChild.apply(this, [ child] );
  if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.TableFormattedElement)) {
    org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.TableFormattedElement, true).table = null;
  }
  return child;
};


/**
 * Add a row at the end of the table. You would use this if you want to add a row
 * without changing the table cells. 
 * @see addRowAt
 * @see insertRow
 * @see insertRowAt
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.TableElement.prototype.addRow = function(format) {
  format = typeof format !== 'undefined' ? format : null;
  this.addRowAt((this.org_apache_royale_textLayout_elements_TableElement_rows.length) >> 0, format);
};


/**
 * Add a row at the index specified. 
 * @see addRow
 * @see insertRow
 * @see insertRowAt
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.TableElement.prototype.addRowAt = function(idx, format) {
  format = typeof format !== 'undefined' ? format : null;
  if (idx < 0 || idx > this.org_apache_royale_textLayout_elements_TableElement_rows.length)
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("badPropertyValue"));
  var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = this.createRowElement(idx, format);
  this.org_apache_royale_textLayout_elements_TableElement_rows.splice(idx, 0, row);
  row.composedHeight = Number(row.computedFormat.minCellHeight);
  row.isMaxHeight = row.computedFormat.minCellHeight == row.computedFormat.maxCellHeight;
  row.setParentAndRelativeStartOnly(this, 1);
};


/**
 * Adds a column. You would use this if you want to add a column without changing the table cells. 
 * The cells would reflow, so a cell in row 2 might move up to row 1.
 * @see addColumnAt
 * @see insertColumn
 * @see insertColumnAt
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.TableElement.prototype.addColumn = function(format) {
  format = typeof format !== 'undefined' ? format : null;
  this.addColumnAt((this.org_apache_royale_textLayout_elements_TableElement_columns.length) >> 0, format);
};


/**
 * Adds a column at the index specified. 
 * @see addColumn
 * @see insertColumn
 * @see insertColumnAt
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.TableElement.prototype.addColumnAt = function(idx, format) {
  format = typeof format !== 'undefined' ? format : null;
  if (idx < 0 || idx > this.org_apache_royale_textLayout_elements_TableElement_columns.length)
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("badPropertyValue"));
  if (!format) {
    format = this.defaultColumnFormat;
  }
  var /** @type {org.apache.royale.textLayout.elements.TableColElement} */ column = this.createColumnElement(idx, format);
  this.org_apache_royale_textLayout_elements_TableElement_columns.splice(idx, 0, column);
};


/**
 * Returns the column at the index specified or null if the index is out of range. 
 * @export
 * @param {number} columnIndex
 * @return {org.apache.royale.textLayout.elements.ITableColElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getColumnAt = function(columnIndex) {
  if (columnIndex < 0 || columnIndex >= this.numColumns)
    return null;
  return this.org_apache_royale_textLayout_elements_TableElement_columns[columnIndex];
};


/**
 * Returns the row at the index specified or null if the index is out of range. 
 * @export
 * @param {number} rowIndex
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getRowAt = function(rowIndex) {
  if (rowIndex < 0 || rowIndex >= this.numRows)
    return null;
  return this.org_apache_royale_textLayout_elements_TableElement_rows[rowIndex];
};


/**
 * Return the index of the row provided or -1 if the row is not found. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getRowIndex = function(row) {
  for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_elements_TableElement_rows.length; i++) {
    if (this.org_apache_royale_textLayout_elements_TableElement_rows[i] == row)
      return i;
  }
  return -1;
};


/**
 * Returns a vector of the cells for the row specified. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsForRow = function(row) {
  return this.getCellsForRowAt(row.rowIndex);
};


/**
 * Returns a vector of the cells for the row specified. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsForRowArray = function(row) {
  return this.getCellsForRowAtArray(row.rowIndex);
};


/**
 * Returns a vector of the cells for the row at the specified index. 
 * @export
 * @param {number} index
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsForRowAt = function(index) {
  var /** @type {Array} */ cells = [];
  if (index < 0) {
    return cells;
  }
  var foreachiter0_target = this.mxmlChildren;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var cell = foreachiter0_target[foreachiter0];
  {
    if (cell.rowIndex == index) {
      cells.push(cell);
    }
  }}
  
  return cells;
};


/**
 * Returns an array of the cells for the row specified. 
 * @export
 * @param {number} index
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsForRowAtArray = function(index) {
  var /** @type {Array} */ cells = [];
  if (index < 0) {
    return cells;
  }
  var foreachiter1_target = this.mxmlChildren;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var cell = foreachiter1_target[foreachiter1];
  {
    if (cell.rowIndex == index) {
      cells.push(cell);
    }
  }}
  
  return cells;
};


/**
 * Returns a Vector of the TableCellElements for the column specified. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsForColumn = function(column) {
  if (this.org_apache_royale_textLayout_elements_TableElement_columns.indexOf(column) < 0)
    return null;
  return this.getCellsForColumnAt(column.colIndex);
};


/**
 * Returns a Vector of the TableCellElements for the column at the specified index. 
 * @export
 * @param {number} index
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsForColumnAt = function(index) {
  var /** @type {Array} */ cells = [];
  if (index < 0) {
    return cells;
  }
  var foreachiter2_target = this.mxmlChildren;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var cell = foreachiter2_target[foreachiter2];
  {
    if (cell.colIndex == index) {
      cells.push(cell);
    }
  }}
  
  return cells;
};


/**
 * Convenience method for checking if table has merged cells
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.hasMergedCells = function() {
  var /** @type {Object} */ cell;
  var /** @type {*} */ child;
  if (this.mxmlChildren == null)
    return false;
  var foreachiter3_target = this.mxmlChildren;
  for (var foreachiter3 in foreachiter3_target) 
  {
  child = foreachiter3_target[foreachiter3];
  {
    cell = child;
    if (cell && (cell.columnSpan > 1 || cell.rowSpan > 1))
      return true;
  }}
  
  return false;
};


/**
 * Inserts a column at the end of the table. If a column is not provided one is created. 
 * 
 * @see addColumn
 * @see addColumnAt
 * @see insertColumnAt
 * @export
 * @param {org.apache.royale.textLayout.elements.TableColElement=} column
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.insertColumn = function(column, cells) {
  column = typeof column !== 'undefined' ? column : null;
  cells = typeof cells !== 'undefined' ? cells : null;
  return this.insertColumnAt(this.numColumns, column, cells);
};


/**
 * Inserts a column at the column specified. If the column is not provided it
 * creates a new column containing the cells supplied or creates the cells
 * based on the number of rows in the table. 
 * @see addColumn
 * @see addColumnAt
 * @see insertColumn
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.elements.TableColElement=} column
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.insertColumnAt = function(idx, column, cells) {
  column = typeof column !== 'undefined' ? column : null;
  cells = typeof cells !== 'undefined' ? cells : null;
  if (idx < 0 || idx > this.org_apache_royale_textLayout_elements_TableElement_columns.length) {
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("badPropertyValue"));
  }
  if (!column) {
    column = this.createColumnElement(idx, this.defaultColumnFormat);
  }
  this.org_apache_royale_textLayout_elements_TableElement_columns.splice(idx, 0, column);
  var /** @type {Array} */ blockedCoords = this.org_apache_royale_textLayout_elements_TableElement_getBlockedCoords(-1, idx);
  var /** @type {number} */ cellIdx = this.org_apache_royale_textLayout_elements_TableElement_getCellIndex(0, idx);
  if (cellIdx < 0)
    cellIdx = this.numChildren;
  var /** @type {number} */ rowIdx = 0;
  if (cells == null)
    cells = [];
  while (cells.length < this.numRows) {
    cells.push(org.apache.royale.textLayout.elements.ElementHelper.getTableCell());
  }
  var foreachiter4_target = cells;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var cell = foreachiter4_target[foreachiter4];
  {
    while (blockedCoords.length && blockedCoords[0].row == rowIdx) {
      rowIdx++;
      blockedCoords.shift();
    }
    cellIdx = this.org_apache_royale_textLayout_elements_TableElement_getCellIndex(rowIdx, idx);
    if (cellIdx < 0) {
      cellIdx = this.org_apache_royale_textLayout_elements_TableElement_getCellIndex(rowIdx, (idx - 1) >> 0);
      cellIdx++;
    }
    if (rowIdx < this.numRows) {
      this.addChildAt((cellIdx) >>> 0, cell);
    }
    rowIdx++;
  }}
  
  return true;
};


/**
 * Inserts a row at the end of the table. If a row is not provided one is created. 
 * @see insertRowAt
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement=} row
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.insertRow = function(row, cells) {
  row = typeof row !== 'undefined' ? row : null;
  cells = typeof cells !== 'undefined' ? cells : null;
  return this.insertRowAt(this.numRows, row, cells);
};


/**
 * Inserts a row at the index specified. If the row is not provided it
 * creates a new row containing the cells supplied or creates the cells
 * based on the number of columns in the table. 
 * @export
 * @param {number} idx
 * @param {org.apache.royale.textLayout.elements.ITableRowElement=} row
 * @param {Array=} cells
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.insertRowAt = function(idx, row, cells) {
  row = typeof row !== 'undefined' ? row : null;
  cells = typeof cells !== 'undefined' ? cells : null;
  if (idx < 0 || idx > this.org_apache_royale_textLayout_elements_TableElement_rows.length) {
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("badPropertyValue"));
  }
  if (!row) {
    row = this.createRowElement(idx, this.defaultRowFormat);
  }
  this.org_apache_royale_textLayout_elements_TableElement_rows.splice(idx, 0, row);
  row.composedHeight = Number(row.computedFormat.minCellHeight);
  row.isMaxHeight = row.computedFormat.minCellHeight == row.computedFormat.maxCellHeight;
  var /** @type {number} */ cellIdx = this.org_apache_royale_textLayout_elements_TableElement_getCellIndex(idx, 0);
  if (cellIdx < 0)
    cellIdx = this.numChildren;
  var /** @type {number} */ colIdx = 0;
  if (cells == null)
    cells = [];
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell;
  var /** @type {number} */ occupiedColumns = 0;
  var foreachiter5_target = cells;
  for (var foreachiter5 in foreachiter5_target) 
  {
  cell = foreachiter5_target[foreachiter5];
  
    occupiedColumns += (cell.columnSpan) >> 0;}
  
  while (occupiedColumns < this.numColumns) {
    cells.push(org.apache.royale.textLayout.elements.ElementHelper.getTableCell());
    occupiedColumns++;
  }
  var foreachiter6_target = cells;
  for (var foreachiter6 in foreachiter6_target) 
  {
  cell = foreachiter6_target[foreachiter6];
  {
    if (colIdx < this.numColumns) {
      this.addChildAt((cellIdx++) >>> 0, cell);
      cell.damage();
    }
    colIdx += ((cell.columnSpan - 1)) >> 0;
  }}
  
  return true;
};


/**
 * Removes the row
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeRow = function(row) {
  var /** @type {number} */ i = this.org_apache_royale_textLayout_elements_TableElement_rows.indexOf(row);
  if (i < 0)
    return null;
  return this.removeRowAt(i);
};


/**
 * Removes the row and the cells it contains.
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeRowWithContent = function(row) {
  var /** @type {number} */ i = this.org_apache_royale_textLayout_elements_TableElement_rows.indexOf(row);
  if (i < 0)
    return null;
  return this.removeRowWithContentAt(i);
};


/**
 * Removes the row at the index specified.
 * @see removeRowWithContentAt
 * @export
 * @param {number} idx
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeRowAt = function(idx) {
  if (idx < 0 || idx > this.org_apache_royale_textLayout_elements_TableElement_rows.length - 1)
    return null;
  var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_elements_TableElement_rows.splice(idx, 1)[0], org.apache.royale.textLayout.elements.ITableRowElement, true);
  this.normalizeCells();
  this.hasCellDamage = true;
  return row;
};


/**
 * Removes the row at the index specified and the cells it contains.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @param {number} idx
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeRowWithContentAt = function(idx) {
  var /** @type {Array} */ removedCells = [];
  if (this.mxmlChildren) {
    for (var /** @type {number} */ i = (this.mxmlChildren.length - 1) >> 0; i >= 0; i--) {
      var /** @type {*} */ child = this.mxmlChildren[i];
      if (!org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableCellElement))
        continue;
      var /** @type {Object} */ cell = child;
      if (cell.rowIndex == idx) {
        removedCells.unshift(this.removeChild(cell));
      }
    }
  }
  this.removeRowAt(idx);
  return removedCells;
};


/**
 * Removes all the rows and the cells.
 * @export
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeAllRowsWithContent = function() {
  var /** @type {number} */ rowCount = 0;
  //var /** @type {number} */ rowCount = 0;
  if (this.numRows > -1) {
    rowCount = (this.numRows - 1) >> 0;
    for (; rowCount > -1;) {
      this.removeRowWithContentAt(rowCount--);
    }
  }
};


/**
 * Removes all the rows. Does not remove the cells.
 * @see removeAllRowsWithContent
 * @export
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeAllRows = function() {
  var /** @type {number} */ rowCount = 0;
  //var /** @type {number} */ rowCount = 0;
  if (this.numRows > -1) {
    rowCount = this.numRows;
    for (var /** @type {number} */ i = 0; i < rowCount; i++) {
      this.removeRowAt(i);
    }
  }
};


/**
 * Removes the column
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 * @return {org.apache.royale.textLayout.elements.ITableColElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeColumn = function(column) {
  var /** @type {number} */ i = this.org_apache_royale_textLayout_elements_TableElement_columns.indexOf(column);
  if (i < 0)
    return null;
  return this.removeColumnAt(i);
};


/**
 * Removes the column and the cells it contains.
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeColumnWithContent = function(column) {
  var /** @type {number} */ i = this.org_apache_royale_textLayout_elements_TableElement_columns.indexOf(column);
  if (i < 0)
    return null;
  return this.removeColumnWithContentAt(i);
};


/**
 * Removes the column at the index specified
 * @export
 * @param {number} idx
 * @return {org.apache.royale.textLayout.elements.ITableColElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeColumnAt = function(idx) {
  if (idx < 0 || idx > this.org_apache_royale_textLayout_elements_TableElement_columns.length - 1)
    return null;
  var /** @type {org.apache.royale.textLayout.elements.ITableColElement} */ col = this.org_apache_royale_textLayout_elements_TableElement_columns.splice(idx, 1)[0];
  this.normalizeCells();
  this.hasCellDamage = true;
  return col;
};


/**
 * Removes the column at the index specified and the cells it contains. 
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @param {number} idx
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removeColumnWithContentAt = function(idx) {
  var /** @type {Array} */ removedCells = [];
  if (this.mxmlChildren) {
    for (var /** @type {number} */ i = (this.mxmlChildren.length - 1) >> 0; i >= 0; i--) {
      var /** @type {*} */ child = this.mxmlChildren[i];
      if (!org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableCellElement))
        continue;
      var /** @type {Object} */ cell = child;
      if (cell.colIndex == idx) {
        removedCells.unshift(this.removeChild(cell));
      }
    }
  }
  this.removeColumnAt(idx);
  return removedCells;
};


/**
 * Remove all cells
 * @inheritDoc
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.removed = function() {
  this.hasCellDamage = true;
};


/**
 * @asprivate
 * Gets table coordinates which represents the space occupied by cells spanning rows or columns
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @private
 * @param {number=} inRow
 * @param {number=} inColumn
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_getBlockedCoords = function(inRow, inColumn) {
  inRow = typeof inRow !== 'undefined' ? inRow : -1;
  inColumn = typeof inColumn !== 'undefined' ? inColumn : -1;
  var /** @type {Array} */ coords = [];
  var /** @type {number} */ curColumn = 0;
  if (this.mxmlChildren) {
    var foreachiter7_target = this.mxmlChildren;
    for (var foreachiter7 in foreachiter7_target) 
    {
    var child = foreachiter7_target[foreachiter7];
    {
      var /** @type {Object} */ cell = child;
      if (cell == null)
        continue;
      if (cell.columnSpan == 1 && cell.rowSpan == 1)
        continue;
      var /** @type {number} */ curRow = cell.rowIndex;
      if (inRow >= 0 && curRow != inRow)
        continue;
      if (inColumn >= 0 && inColumn != curColumn)
        continue;
      curColumn = cell.colIndex;
      var /** @type {number} */ endRow = (curRow + cell.rowSpan - 1) >> 0;
      var /** @type {number} */ endColumn = (curColumn + cell.columnSpan - 1) >> 0;
      for (var /** @type {number} */ rowIdx = curRow; rowIdx <= endRow; rowIdx++) {
        for (var /** @type {number} */ colIdx = curColumn; colIdx <= endColumn; colIdx++) {
          if (rowIdx == curRow && colIdx == curColumn) {
            continue;
          }
          coords.push(new org.apache.royale.textLayout.elements.TableElement.CellCoords(colIdx, rowIdx));
        }
      }
    }}
    
  }
  return coords;
};


/**
 * @suppress {uselessCode}
 * Sets the row and column indices of the cells in the table to match their logical position as described by the table columns and rows
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 */
org.apache.royale.textLayout.elements.TableElement.prototype.normalizeCells = function() {
  var /** @type {number} */ i = 0;
  this.numColumns;
  this.numRows;
  //var /** @type {number} */ i = 0;
  var /** @type {Array} */ blockedCoords = [];
  if (!this.mxmlChildren) {
    return;
  }
  var /** @type {number} */ curRow = 0;
  var /** @type {number} */ curColumn = 0;
  var foreachiter8_target = this.mxmlChildren;
  for (var foreachiter8 in foreachiter8_target) 
  {
  var child = foreachiter8_target[foreachiter8];
  {
    if (!org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableCellElement)) {
      continue;
    }
    var /** @type {Object} */ cell = child;
    if (cell.rowIndex != curRow || cell.colIndex != curColumn) {
      cell.rowIndex = curRow;
      cell.colIndex = curColumn;
      cell.damage();
    }
    var /** @type {number} */ endRow = (curRow + cell.rowSpan - 1) >> 0;
    var /** @type {number} */ endColumn = (curColumn + cell.columnSpan - 1) >> 0;
    for (var /** @type {number} */ rowIdx = curRow; rowIdx <= endRow; rowIdx++) {
      for (var /** @type {number} */ colIdx = curColumn; colIdx <= endColumn; colIdx++) {
        if (rowIdx == curRow && colIdx == curColumn) {
          continue;
        }
        blockedCoords.push(new org.apache.royale.textLayout.elements.TableElement.CellCoords(colIdx, rowIdx));
      }
    }
    do {
      curColumn++;
      if (curColumn >= this.numColumns) {
        curColumn = 0;
        curRow++;
      }
      var /** @type {boolean} */ advanced = true;
      for (i = 0; i < blockedCoords.length; i++) {
        if (blockedCoords[i].column == curColumn && blockedCoords[i].row == curRow) {
          advanced = false;
          blockedCoords.splice(i, 1);
        }
      }
      if (advanced) {
        break;
      }
    } while (1);
  }}
  
};


/**
 * Set the width of the specified column. The value can be a number or percent. 
 * @export
 * @param {number} columnIndex
 * @param {*} value
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.setColumnWidth = function(columnIndex, value) {
  var /** @type {org.apache.royale.textLayout.elements.ITableColElement} */ tableColElement = this.getColumnAt(columnIndex);
  if (!tableColElement)
    return false;
  tableColElement.tableColumnWidth = value;
  return true;
};


/**
 * Set the height of the specified row. The value can be a number or percent. 
 * @export
 * @param {number} rowIdx
 * @param {*} value
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.setRowHeight = function(rowIdx, value) {
  var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = this.getRowAt(rowIdx);
  if (!row)
    return false;
  return true;
};


/**
 * Get the width of the column. 
 * @export
 * @param {number} columnIndex
 * @return {*}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getColumnWidth = function(columnIndex) {
  var /** @type {org.apache.royale.textLayout.elements.TableColElement} */ tableColElement = this.getColumnAt(columnIndex);
  if (tableColElement)
    return tableColElement.tableColumnWidth;
  return 0;
};


/**
 * Sizes and positions the cells in the table. 
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 */
org.apache.royale.textLayout.elements.TableElement.prototype.composeCells = function() {
  this.normalizeCells();
  this.org_apache_royale_textLayout_elements_TableElement__composedRowIndex = 0;
  if (!this.hasCellDamage)
    return;
  var /** @type {Array} */ damagedCells = this.org_apache_royale_textLayout_elements_TableElement_getDamagedCells();
  var /** @type {Object} */ cell;
  var foreachiter9_target = damagedCells;
  for (var foreachiter9 in foreachiter9_target) 
  {
  cell = foreachiter9_target[foreachiter9];
  {
    cell.compose();
  }}
  
  var foreachiter10_target = this.org_apache_royale_textLayout_elements_TableElement_rows;
  for (var foreachiter10 in foreachiter10_target) 
  {
  var row = foreachiter10_target[foreachiter10];
  {
    var /** @type {number} */ minH = Number(row.computedFormat.minCellHeight);
    var /** @type {number} */ maxH = Number(row.computedFormat.maxCellHeight);
    row.totalHeight = row.composedHeight = minH;
    if (maxH > minH)
      row.isMaxHeight = false;
    else
      row.isMaxHeight = true;
  }}
  
  var /** @type {number} */ xPos = 0;
  var foreachiter11_target = this.org_apache_royale_textLayout_elements_TableElement_columns;
  for (var foreachiter11 in foreachiter11_target) 
  {
  var col = foreachiter11_target[foreachiter11];
  {
    col.x = xPos;
    xPos += Number(col.columnWidth);
  }}
  
  if (this.mxmlChildren) {
    for (var /** @type {number} */ i = 0; i < this.mxmlChildren.length; i++) {
      if (!org.apache.royale.utils.Language.is(this.mxmlChildren[i], org.apache.royale.textLayout.elements.ITableCellElement))
        continue;
      cell = this.mxmlChildren[i];
      while (this.org_apache_royale_textLayout_elements_TableElement_rows.length < cell.rowIndex + 1) {
        this.addRow(this.defaultRowFormat);
      }
      row = this.getRowAt(cell.rowIndex);
      if (!row)
        throw new Error("this should not happen...");
      if (row.isMaxHeight) {
        continue;
      }
      var /** @type {number} */ cellHeight = cell.getComposedHeight();
      if (cell.rowSpan > 1) {
        row.totalHeight = Math.max(row.totalHeight, cellHeight);
      } else {
        row.composedHeight = Math.max(row.composedHeight, cellHeight);
        row.composedHeight = Math.min(row.composedHeight, row.computedFormat.maxCellHeight);
        row.totalHeight = Math.max(row.composedHeight, row.totalHeight);
      }
      if (row.composedHeight == row.computedFormat.maxCellHeight)
        row.isMaxHeight = true;
    }
  }
  if (!this.org_apache_royale_textLayout_elements_TableElement__tableRowsComputed) {
    this.org_apache_royale_textLayout_elements_TableElement__bodyRows = [];
    if (this.mxmlChildren) {
      for (i = 0; i < this.mxmlChildren.length; i++) {
        if (!org.apache.royale.utils.Language.is(this.mxmlChildren[i], org.apache.royale.textLayout.elements.ITableCellElement)) {
          continue;
        }
        cell = this.mxmlChildren[i];
        while (cell.rowIndex >= this.org_apache_royale_textLayout_elements_TableElement__bodyRows.length)
          this.org_apache_royale_textLayout_elements_TableElement__bodyRows.push([]);
        var /** @type {Array} */ rowVec = this.org_apache_royale_textLayout_elements_TableElement__bodyRows[cell.rowIndex];
        if (!rowVec) {
          rowVec = [];
          this.org_apache_royale_textLayout_elements_TableElement__bodyRows[cell.rowIndex] = rowVec;
        }
        if (rowVec.length > cell.colIndex && rowVec[cell.colIndex]) {
          throw new Error("Two cells cannot have the same coordinates");
        }
        rowVec.push(cell);
      }
    }
    if (this.headerRowCount > 0) {
      this.org_apache_royale_textLayout_elements_TableElement__headerRows = this.org_apache_royale_textLayout_elements_TableElement__bodyRows.splice(0, this.headerRowCount);
    } else {
      this.org_apache_royale_textLayout_elements_TableElement__headerRows = null;
    }
    if (this.footerRowCount > 0) {
      this.org_apache_royale_textLayout_elements_TableElement__footerRows = this.org_apache_royale_textLayout_elements_TableElement__bodyRows.splice((-this.footerRowCount) >> 0, (Number.MAX_VALUE) >>> 0);
    } else {
      this.org_apache_royale_textLayout_elements_TableElement__footerRows = null;
    }
  }
};


/**
 * returns the header rows for composition
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getHeaderRows = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__headerRows;
};


/**
 * returns the footer rows for composition
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getFooterRows = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__footerRows;
};


/**
 * returns the body rows (sans header and footer cells) for composition
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getBodyRows = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__bodyRows;
};


/**
 * returns a vector of table cells in the next row during composition
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getNextRow = function() {
  if (this.org_apache_royale_textLayout_elements_TableElement__composedRowIndex >= this.org_apache_royale_textLayout_elements_TableElement__bodyRows.length)
    return null;
  return this.org_apache_royale_textLayout_elements_TableElement__bodyRows[this.org_apache_royale_textLayout_elements_TableElement__composedRowIndex++];
};


/**
 * Returns the next table cell after the supplied table cell
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} tableCell
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getNextCell = function(tableCell) {
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell;
  var foreachiter12_target = this.mxmlChildren;
  for (var foreachiter12 in foreachiter12_target) 
  {
  var element = foreachiter12_target[foreachiter12];
  {
    cell = element;
    if (cell) {
      if (cell.rowIndex == tableCell.rowIndex && cell.colIndex - 1 == tableCell.colIndex) {
        return cell;
      }
      if (cell.rowIndex - 1 == tableCell.rowIndex && cell.colIndex == 0) {
        return cell;
      }
    }
  }}
  
  return null;
};


/**
 * Returns the previous table cell after the supplied table cell
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @param {Object} tableCell
 * @return {Object}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getPreviousCell = function(tableCell) {
  var /** @type {Object} */ cell;
  var /** @type {number} */ highestCellIndex = -1;
  var /** @type {number} */ rowIndex = -1;
  var foreachiter13_target = this.mxmlChildren;
  for (var foreachiter13 in foreachiter13_target) 
  {
  var element = foreachiter13_target[foreachiter13];
  {
    if (element.className == "TableCellElement") {
      cell = element;
      if (cell.rowIndex == tableCell.rowIndex && cell.colIndex + 1 == tableCell.colIndex) {
        return cell;
      }
      if (cell.rowIndex + 1 == tableCell.rowIndex) {
        rowIndex = cell.rowIndex;
        if (highestCellIndex < cell.colIndex) {
          highestCellIndex = cell.colIndex;
        }
      }
    }
  }}
  
  if (rowIndex > -1 && highestCellIndex > -1) {
    return this.getCellAt(rowIndex, highestCellIndex);
  }
  return null;
};


/**
 * Returns the table cell at the row and column specified.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @param {number} rowIndex
 * @param {number} columnIndex
 * @return {Object}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellAt = function(rowIndex, columnIndex) {
  var /** @type {Object} */ cell;
  var foreachiter14_target = this.mxmlChildren;
  for (var foreachiter14 in foreachiter14_target) 
  {
  var element = foreachiter14_target[foreachiter14];
  {
    cell = element;
    if (cell && cell.rowIndex == rowIndex && cell.colIndex == columnIndex) {
      return cell;
    }
  }}
  
  return null;
};


/**
 * Computed height of the header cells
 * @export
 * @return {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getHeaderHeight = function() {
  return 0;
};


/**
 * Computed height of the footer cells
 * @export
 * @return {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getFooterHeight = function() {
  return 0;
};


/**
 * Accepts a suggested table width and calculates the column widths. 
 * @export
 * @param {number=} suggestedWidth
 */
org.apache.royale.textLayout.elements.TableElement.prototype.normalizeColumnWidths = function(suggestedWidth) {
  suggestedWidth = typeof suggestedWidth !== 'undefined' ? suggestedWidth : 600;
  var /** @type {*} */ setCount = this.computedFormat.columnCount;
  if (!setCount) {
  } else if (setCount == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
  } else {
    var /** @type {number} */ cCount = Number(this.computedFormat.columnCount);
  }
  while (cCount > this.org_apache_royale_textLayout_elements_TableElement_columns.length) {
    this.addColumn();
  }
  var /** @type {number} */ w = suggestedWidth;
  if (typeof((this.computedFormat.tableWidth)) == "string") {
    if (this.computedFormat.tableWidth.indexOf("%") > 0) {
      w = suggestedWidth / (parseFloat(this.computedFormat.tableWidth) / 100);
    }
  }
  if (isNaN(w))
    w = 600;
  if (w > 20000)
    w = 600;
  this.org_apache_royale_textLayout_elements_TableElement__computedWidth = w;
  var /** @type {number} */ numNonsetColumns = this.numColumns;
  var /** @type {org.apache.royale.textLayout.elements.TableColElement} */ col;
  var foreachiter15_target = this.org_apache_royale_textLayout_elements_TableElement_columns;
  for (var foreachiter15 in foreachiter15_target) 
  {
  col = foreachiter15_target[foreachiter15];
  {
    if (typeof((col.columnWidth)) == "number") {
      w -= Number(col.columnWidth);
      numNonsetColumns--;
    }
  }}
  
  var foreachiter16_target = this.org_apache_royale_textLayout_elements_TableElement_columns;
  for (var foreachiter16 in foreachiter16_target) 
  {
  col = foreachiter16_target[foreachiter16];
  {
    if (typeof((col.columnWidth)) == "number")
      continue;
    col.columnWidth = w / numNonsetColumns;
  }}
  
};


/**
 * Returns a vector of all the damaged cells in the table.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @private
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_getDamagedCells = function() {
  var /** @type {Array} */ cells = [];
  var foreachiter17_target = this.mxmlChildren;
  for (var foreachiter17 in foreachiter17_target) 
  {
  var cell = foreachiter17_target[foreachiter17];
  {
    if (org.apache.royale.utils.Language.is(cell, org.apache.royale.textLayout.elements.ITableCellElement) && cell.isDamaged())
      cells.push(cell);
  }}
  
  return cells;
};


/**
 * Marks all of the cells in the table as damaged.
 * @private
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_markCellsDamaged = function() {
  if (!this.mxmlChildren)
    return;
  var foreachiter18_target = this.mxmlChildren;
  for (var foreachiter18 in foreachiter18_target) 
  {
  var cell = foreachiter18_target[foreachiter18];
  {
    if (org.apache.royale.utils.Language.is(cell, org.apache.royale.textLayout.elements.ITableCellElement)) {
      cell.damage();
    }
  }}
  
};


/**
 * Returns a vector of all the table cell elements in the table.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCells = function() {
  var /** @type {Array} */ cells = [];
  var foreachiter19_target = this.mxmlChildren;
  for (var foreachiter19 in foreachiter19_target) 
  {
  var cell = foreachiter19_target[foreachiter19];
  {
    if (org.apache.royale.utils.Language.is(cell, org.apache.royale.textLayout.elements.ITableCellElement)) {
      cells.push(cell);
    }
  }}
  
  return cells;
};


/**
 * Returns an array of all the table cells.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsArray = function() {
  var /** @type {Array} */ cells = [];
  var foreachiter20_target = this.mxmlChildren;
  for (var foreachiter20 in foreachiter20_target) 
  {
  var cell = foreachiter20_target[foreachiter20];
  {
    if (org.apache.royale.utils.Language.is(cell, org.apache.royale.textLayout.elements.ITableCellElement)) {
      cells.push(cell);
    }
  }}
  
  return cells;
};


/**
 * Gets the first TextFlowTableBlock in the table. 
 * @export
 * @return {org.apache.royale.textLayout.compose.ITextFlowTableBlock}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getFirstBlock = function() {
  if (this.org_apache_royale_textLayout_elements_TableElement__tableBlocks == null)
    this.org_apache_royale_textLayout_elements_TableElement__tableBlocks = [];
  if (this.org_apache_royale_textLayout_elements_TableElement__tableBlocks.length == 0)
    this.org_apache_royale_textLayout_elements_TableElement__tableBlocks.push(new org.apache.royale.textLayout.compose.TextFlowTableBlock(0));
  this.org_apache_royale_textLayout_elements_TableElement__tableBlockIndex = 0;
  this.org_apache_royale_textLayout_elements_TableElement__tableBlocks[0].parentTable = this;
  return this.org_apache_royale_textLayout_elements_TableElement__tableBlocks[0];
};


/**
 * Gets the next TextFlowTableBlock. 
 * @export
 * @return {org.apache.royale.textLayout.compose.ITextFlowTableBlock}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getNextBlock = function() {
  if (this.org_apache_royale_textLayout_elements_TableElement__tableBlocks == null)
    this.org_apache_royale_textLayout_elements_TableElement__tableBlocks = [];
  this.org_apache_royale_textLayout_elements_TableElement__tableBlockIndex++;
  while (this.org_apache_royale_textLayout_elements_TableElement__tableBlocks.length <= this.org_apache_royale_textLayout_elements_TableElement__tableBlockIndex) {
    this.org_apache_royale_textLayout_elements_TableElement__tableBlocks.push(new org.apache.royale.textLayout.compose.TextFlowTableBlock(this.org_apache_royale_textLayout_elements_TableElement__tableBlocks.length));
  }
  this.org_apache_royale_textLayout_elements_TableElement__tableBlocks[this.org_apache_royale_textLayout_elements_TableElement__tableBlockIndex].parentTable = this;
  return this.org_apache_royale_textLayout_elements_TableElement__tableBlocks[this.org_apache_royale_textLayout_elements_TableElement__tableBlockIndex];
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getText = function(relativeStart, relativeEnd, paragraphSeparator) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  paragraphSeparator = typeof paragraphSeparator !== 'undefined' ? paragraphSeparator : "\n";
  return "";
};


/**
 * Returns the cell at the specified row and column.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @private
 * @param {number} rowIdx
 * @param {number} columnIdx
 * @return {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_getCellIndex = function(rowIdx, columnIdx) {
  if (rowIdx == 0 && columnIdx == 0)
    return 0;
  for (var /** @type {number} */ i = 0; i < this.mxmlChildren.length; i++) {
    var /** @type {*} */ item = this.mxmlChildren[i];
    if (!org.apache.royale.utils.Language.is(item, org.apache.royale.textLayout.elements.ITableCellElement))
      continue;
    var /** @type {Object} */ cell = item;
    if (cell.rowIndex == rowIdx && cell.colIndex == columnIdx)
      return i;
  }
  return -1;
};


/**
 * Returns a vector of table cell elements in the given cell range. 
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} anchorCoords
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} activeCoords
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock=} block
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellsInRange = function(anchorCoords, activeCoords, block) {
  block = typeof block !== 'undefined' ? block : null;
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ firstCoords = anchorCoords.clone();
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ lastCoords = activeCoords.clone();
  if (lastCoords.row < firstCoords.row || (lastCoords.row == firstCoords.row && lastCoords.column < firstCoords.column)) {
    firstCoords = activeCoords.clone();
    lastCoords = anchorCoords.clone();
  }
  if (lastCoords.column < firstCoords.column) {
    var /** @type {number} */ col = firstCoords.column;
    firstCoords.column = lastCoords.column;
    lastCoords.column = col;
  }
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ firstCell = this.findCell(firstCoords);
  var /** @type {Array} */ cells = [];
  if (!block || this.getCellBlock(firstCell) == block)
    cells.push(firstCell);
  var /** @type {number} */ idx = (this.mxmlChildren.indexOf(firstCell)) >> 0;
  while (++idx < this.mxmlChildren.length) {
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ nextCell = this.mxmlChildren[idx];
    if (nextCell.rowIndex > lastCoords.row || (nextCell.rowIndex == lastCoords.row && nextCell.colIndex > lastCoords.column))
      break;
    if (nextCell.colIndex > lastCoords.column || nextCell.colIndex < firstCoords.column)
      continue;
    if (!block || this.getCellBlock(nextCell) == block)
      cells.push(nextCell);
  }
  return cells;
};


/**
 * Finds the cell at the specified cell coordinates or null if no cell is found. 
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} coords
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.findCell = function(coords) {
  var /** @type {number} */ idx = ((coords.row + 1) * (coords.column + 1) - 1) >> 0;
  if (idx >= this.numChildren)
    idx = (this.numChildren - 1) >> 0;
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell = this.mxmlChildren[idx];
  do {
    if (idx == this.numChildren - 1)
      break;
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ nextCell = this.mxmlChildren[idx + 1];
    if (nextCell.rowIndex > coords.row || (nextCell.rowIndex == coords.row && nextCell.colIndex > coords.column))
      break;
    cell = nextCell;
    idx++;
  } while (true);
  do {
    if (cell.colIndex <= coords.column && cell.colIndex + cell.columnSpan - 1 >= coords.column && cell.rowIndex <= coords.row && cell.rowIndex + cell.rowSpan - 1 >= coords.row)
      break;
    if (cell.colIndex == 0 && cell.rowIndex == 0)
      break;
    if (idx == 0)
      break;
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ prevCell = this.mxmlChildren[idx - 1];
    cell = prevCell;
    idx--;
  } while (true);
  return cell;
};


/**
 * Adds the table cell container to the table block specified. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock} block
 */
org.apache.royale.textLayout.elements.TableElement.prototype.addCellToBlock = function(cell, block) {
  block.addCell(cell.container);
  this.org_apache_royale_textLayout_elements_TableElement_tableBlockDict[cell] = block;
};


/**
 * Returns the table block for the given table cell. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 * @return {org.apache.royale.textLayout.compose.ITextFlowTableBlock}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getCellBlock = function(cell) {
  return this.org_apache_royale_textLayout_elements_TableElement_tableBlockDict[cell];
};


/**
 * Returns a vector of the table blocks in the specified cell range.
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} start
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} end
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getTableBlocksInRange = function(start, end) {
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ coords = start.clone();
  if (end.column < start.column) {
    coords = end.clone();
    end = start.clone();
  }
  var /** @type {Array} */ blocks = [];
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowTableBlock} */ block = this.getCellBlock(this.findCell(coords));
  if (block)
    blocks.push(block);
  while (block) {
    coords.row++;
    if (coords.row > end.row)
      break;
    if (this.getCellBlock(this.findCell(coords)) == block)
      continue;
    block = this.getCellBlock(this.findCell(coords));
    if (block)
      blocks.push(block);
  }
  return blocks;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getNextLeafHelper = function(limitElement, child) {
  return this.parent.getNextLeafHelper(limitElement, this);
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getPreviousLeafHelper = function(limitElement, child) {
  return this.parent.getPreviousLeafHelper(limitElement, this);
};


/**
 * @private
 * @return {org.apache.royale.textLayout.elements.TableLeafElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.org_apache_royale_textLayout_elements_TableElement_getLeaf = function() {
  if (this.org_apache_royale_textLayout_elements_TableElement__leaf == null)
    this.org_apache_royale_textLayout_elements_TableElement__leaf = new org.apache.royale.textLayout.elements.TableLeafElement(this);
  return this.org_apache_royale_textLayout_elements_TableElement__leaf;
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.findLeaf = function(relativePosition) {
  return this.org_apache_royale_textLayout_elements_TableElement_getLeaf();
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getLastLeaf = function() {
  return this.org_apache_royale_textLayout_elements_TableElement_getLeaf();
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.getFirstLeaf = function() {
  return this.org_apache_royale_textLayout_elements_TableElement_getLeaf();
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.createContentElement = function() {
};


/** @asprivate 
 * Release the FTE data structure that corresponds to the FlowElement, so it can be gc'ed
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.releaseContentElement = function() {
};


/**
 * Creates and returns a default row 
 * @export
 * @param {number} index
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} defaultRowFormat
 * @return {org.apache.royale.textLayout.elements.ITableRowElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.createRowElement = function(index, defaultRowFormat) {
  var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = org.apache.royale.textLayout.elements.ElementHelper.getTableRow(defaultRowFormat);
  row.rowIndex = index;
  row.table = this;
  return row;
};


/**
 * Creates and returns a default column 
 * @export
 * @param {number} index
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} defaultColumnFormat
 * @return {org.apache.royale.textLayout.elements.TableColElement}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.createColumnElement = function(index, defaultColumnFormat) {
  var /** @type {org.apache.royale.textLayout.elements.TableColElement} */ column = new org.apache.royale.textLayout.elements.TableColElement(defaultColumnFormat);
  column.colIndex = index;
  column.table = this;
  return column;
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.elements.TableElement.prototype.normalizeRange = function(normalizeStart, normalizeEnd) {
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__className = function() {
  return "TableElement";
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__defaultTypeName = function() {
  return "table";
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__cellSpacing = function(cellSpacingValue) {
  this.org_apache_royale_textLayout_elements_TableElement_markCellsDamaged();
  this.hasCellDamage = true;
  this.normalizeCells();
  org.apache.royale.textLayout.elements.TableElement.superClass_.set__cellSpacing.apply(this, [ cellSpacingValue] );
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__numRows = function() {
  return (this.org_apache_royale_textLayout_elements_TableElement_rows.length) >> 0;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__numRows = function(value) {
  while (value < this.numRows) {
    this.org_apache_royale_textLayout_elements_TableElement_rows.pop();
  }
  var /** @type {number} */ num = this.numRows;
  for (var /** @type {number} */ i = num; i < value; i++) {
    var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = this.createRowElement(i, this.defaultRowFormat);
    this.org_apache_royale_textLayout_elements_TableElement_rows.push(row);
  }
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__numColumns = function() {
  return (this.org_apache_royale_textLayout_elements_TableElement_columns.length) >> 0;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__numColumns = function(value) {
  while (value < this.numColumns) {
    this.org_apache_royale_textLayout_elements_TableElement_columns.pop();
  }
  var /** @type {number} */ num = this.numColumns;
  for (var /** @type {number} */ i = num; i < value; i++) {
    var /** @type {org.apache.royale.textLayout.elements.TableColElement} */ column = this.createColumnElement(i, this.defaultColumnFormat);
    this.org_apache_royale_textLayout_elements_TableElement_columns.push(column);
  }
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__numCells = function() {
  return (this.getCells().length) >> 0;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__defaultRowFormat = function() {
  if (!this.org_apache_royale_textLayout_elements_TableElement__defaultRowFormat)
    this.org_apache_royale_textLayout_elements_TableElement__defaultRowFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(this.computedFormat);
  return this.org_apache_royale_textLayout_elements_TableElement__defaultRowFormat;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__defaultRowFormat = function(value) {
  this.org_apache_royale_textLayout_elements_TableElement__defaultRowFormat = value;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__defaultColumnFormat = function() {
  if (!this.org_apache_royale_textLayout_elements_TableElement__defaultColumnFormat)
    this.org_apache_royale_textLayout_elements_TableElement__defaultColumnFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(this.computedFormat);
  return this.org_apache_royale_textLayout_elements_TableElement__defaultColumnFormat;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__defaultColumnFormat = function(value) {
  this.org_apache_royale_textLayout_elements_TableElement__defaultColumnFormat = value;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__width = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__computedWidth;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__width = function(value) {
  this.normalizeColumnWidths(value);
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__hasCellDamage = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__hasCellDamage;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__hasCellDamage = function(value) {
  this.org_apache_royale_textLayout_elements_TableElement__hasCellDamage = value;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__headerRowCount = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__headerRowCount;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__headerRowCount = function(value) {
  if (value != this.org_apache_royale_textLayout_elements_TableElement__headerRowCount)
    this.org_apache_royale_textLayout_elements_TableElement__tableRowsComputed = false;
  this.org_apache_royale_textLayout_elements_TableElement__headerRowCount = value;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__footerRowCount = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__footerRowCount;
};


org.apache.royale.textLayout.elements.TableElement.prototype.set__footerRowCount = function(value) {
  if (value != this.org_apache_royale_textLayout_elements_TableElement__footerRowCount)
    this.org_apache_royale_textLayout_elements_TableElement__tableRowsComputed = false;
  this.org_apache_royale_textLayout_elements_TableElement__footerRowCount = value;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__textLength = function() {
  return 1;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__org_apache_royale_textLayout_elements_TableElement_tableBlockDict = function() {
  if (this.org_apache_royale_textLayout_elements_TableElement__tableBlockDict == null)
    this.org_apache_royale_textLayout_elements_TableElement__tableBlockDict = new org.apache.royale.utils.ObjectMap();
  return this.org_apache_royale_textLayout_elements_TableElement__tableBlockDict;
};


org.apache.royale.textLayout.elements.TableElement.prototype.get__tableBlocks = function() {
  return this.org_apache_royale_textLayout_elements_TableElement__tableBlocks;
};


Object.defineProperties(org.apache.royale.textLayout.elements.TableElement.prototype, /** @lends {org.apache.royale.textLayout.elements.TableElement.prototype} */ {
/**
  * @export
  * @type {string} */
className: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__className},
/**
  * @type {boolean} */
abstract: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__abstract},
/**
  * @export
  * @type {string} */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__defaultTypeName},
/**
  * @export
  * @type {*} */
cellSpacing: {
get: org.apache.royale.textLayout.formats.TextLayoutFormatBase.prototype.get__cellSpacing,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__cellSpacing},
/**
  * @export
  * @type {number} */
numRows: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__numRows,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__numRows},
/**
  * @export
  * @type {number} */
numColumns: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__numColumns,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__numColumns},
/**
  * @export
  * @type {number} */
numCells: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__numCells},
/**
  * @export
  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */
defaultRowFormat: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__defaultRowFormat,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__defaultRowFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */
defaultColumnFormat: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__defaultColumnFormat,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__defaultColumnFormat},
/**
  * @export
  * @type {number} */
width: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__width,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__width},
/**
  * @export
  * @type {boolean} */
hasCellDamage: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__hasCellDamage,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__hasCellDamage},
/**
  * @export
  * @type {number} */
headerRowCount: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__headerRowCount,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__headerRowCount},
/**
  * @export
  * @type {number} */
footerRowCount: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__footerRowCount,
set: org.apache.royale.textLayout.elements.TableElement.prototype.set__footerRowCount},
/**
  * @export
  * @type {number} */
textLength: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__textLength},
/**
  * @type {org.apache.royale.utils.ObjectMap} */
org_apache_royale_textLayout_elements_TableElement_tableBlockDict: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__org_apache_royale_textLayout_elements_TableElement_tableBlockDict},
/**
  * @export
  * @type {Array.<ITextFlowTableBlock>} */
tableBlocks: {
get: org.apache.royale.textLayout.elements.TableElement.prototype.get__tableBlocks}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TableElement', qName: 'org.apache.royale.textLayout.elements.TableElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.ITableElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'x': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableElement */ inst, /** * */ v) {return v !== undefined ? inst.x = v : inst.x;}},
        'y': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableElement */ inst, /** * */ v) {return v !== undefined ? inst.y = v : inst.y;}}
      };
    },
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'cellSpacing': { type: '*', access: 'writeonly', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'numRows': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'numColumns': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'numCells': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'defaultRowFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'defaultColumnFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'width': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'hasCellDamage': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'headerRowCount': { type: 'uint', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'footerRowCount': { type: 'uint', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'textLength': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'tableBlocks': { type: 'Vector.<org.apache.royale.textLayout.compose.ITextFlowTableBlock>', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'}
      };
    },
    methods: function () {
      return {
        'TableElement': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'canOwnFlowElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'modelChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', false ,'int', false ,'Boolean', true ,'Boolean', true ]; }},
        'addChild': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'removeChild': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'addRow': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'addRowAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'addColumn': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'addColumnAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'getColumnAt': { type: 'org.apache.royale.textLayout.elements.ITableColElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'getRowAt': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'getRowIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'getCellsForRow': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'getCellsForRowArray': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'getCellsForRowAt': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'getCellsForRowAtArray': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'getCellsForColumn': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'getCellsForColumnAt': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'hasMergedCells': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'insertColumn': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TableColElement', true ,'Array', true ]; }},
        'insertColumnAt': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.elements.TableColElement', true ,'Array', true ]; }},
        'insertRow': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', true ,'Array', true ]; }},
        'insertRowAt': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.elements.ITableRowElement', true ,'Array', true ]; }},
        'removeRow': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'removeRowWithContent': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'removeRowAt': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'removeRowWithContentAt': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'removeAllRowsWithContent': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'removeAllRows': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'removeColumn': { type: 'org.apache.royale.textLayout.elements.ITableColElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'removeColumnWithContent': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'removeColumnAt': { type: 'org.apache.royale.textLayout.elements.ITableColElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'removeColumnWithContentAt': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'removed': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'normalizeCells': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'setColumnWidth': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'*', false ]; }},
        'setRowHeight': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'*', false ]; }},
        'getColumnWidth': { type: '*', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'composeCells': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getHeaderRows': { type: 'Vector.<Vector.<org.apache.royale.textLayout.elements.ITableCellElement>>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getFooterRows': { type: 'Vector.<Vector.<org.apache.royale.textLayout.elements.ITableCellElement>>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getBodyRows': { type: 'Vector.<Vector.<org.apache.royale.textLayout.elements.ITableCellElement>>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getNextRow': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getNextCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'getPreviousCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'getCellAt': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'getHeaderHeight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getFooterHeight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'normalizeColumnWidths': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'Number', true ]; }},
        'getCells': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getCellsArray': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getFirstBlock': { type: 'org.apache.royale.textLayout.compose.ITextFlowTableBlock', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getNextBlock': { type: 'org.apache.royale.textLayout.compose.ITextFlowTableBlock', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', true ,'int', true ,'String', true ]; }},
        'getCellsInRange': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', true ]; }},
        'findCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'addCellToBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', false ]; }},
        'getCellBlock': { type: 'org.apache.royale.textLayout.compose.ITextFlowTableBlock', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'getTableBlocksInRange': { type: 'Vector.<org.apache.royale.textLayout.compose.ITextFlowTableBlock>', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'getNextLeafHelper': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'getPreviousLeafHelper': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'findLeaf': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ]; }},
        'getLastLeaf': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'getFirstLeaf': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'createContentElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'releaseContentElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement'},
        'createRowElement': { type: 'org.apache.royale.textLayout.elements.ITableRowElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'createColumnElement': { type: 'org.apache.royale.textLayout.elements.TableColElement', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'normalizeRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableElement', parameters: function () { return [ 'uint', false ,'uint', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @constructor
 * @param {number} colIdx
 * @param {number} rowIdx
 */
org.apache.royale.textLayout.elements.TableElement.CellCoords = function(colIdx, rowIdx) {
  this.column = colIdx;
  this.row = rowIdx;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.elements.TableElement.CellCoords', org.apache.royale.textLayout.elements.TableElement.CellCoords);


/**
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.CellCoords.prototype.column = 0;


/**
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.CellCoords.prototype.row = 0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.TableElement.CellCoords.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CellCoords', qName: 'org.apache.royale.textLayout.elements.TableElement.CellCoords', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.TableElement.CellCoords.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'column': { type: 'int', get_set: function (/** org.apache.royale.textLayout.elements.TableElement.CellCoords */ inst, /** * */ v) {return v !== undefined ? inst.column = v : inst.column;}},
        'row': { type: 'int', get_set: function (/** org.apache.royale.textLayout.elements.TableElement.CellCoords */ inst, /** * */ v) {return v !== undefined ? inst.row = v : inst.row;}}
      };
    },
    methods: function () {
      return {
        'CellCoords': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.TableElement.CellCoords', parameters: function () { return [ 'int', false ,'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableElement.CellCoords.prototype.ROYALE_COMPILE_FLAGS = 10;
