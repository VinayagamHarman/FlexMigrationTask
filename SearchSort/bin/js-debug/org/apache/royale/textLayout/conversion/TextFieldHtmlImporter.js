/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/TextFieldHtmlImporter.as
 * org.apache.royale.textLayout.conversion.TextFieldHtmlImporter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.TextFieldHtmlImporter');
/* Royale Dependency List: XML,XMLList,org.apache.royale.text.engine.FontPosture,org.apache.royale.text.engine.FontWeight,org.apache.royale.text.engine.Kerning,org.apache.royale.textLayout.conversion.ImportExportConfiguration,org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter,org.apache.royale.textLayout.conversion.importers.FontImporter,org.apache.royale.textLayout.conversion.importers.HtmlCustomParaFormatImporter,org.apache.royale.textLayout.conversion.importers.TextFormatImporter,org.apache.royale.textLayout.elements.BreakElement,org.apache.royale.textLayout.elements.DivElement,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IListElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.InlineGraphicElement,org.apache.royale.textLayout.elements.LinkElement,org.apache.royale.textLayout.elements.SpanElement,org.apache.royale.textLayout.elements.SubParagraphGroupElement,org.apache.royale.textLayout.elements.SubParagraphGroupElementBase,org.apache.royale.textLayout.elements.TabElement,org.apache.royale.textLayout.elements.TextFlow,org.apache.royale.textLayout.factory.TLFFactory,org.apache.royale.textLayout.formats.Float,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.LeadingModel,org.apache.royale.textLayout.formats.ListMarkerFormat,org.apache.royale.textLayout.formats.ListStyleType,org.apache.royale.textLayout.formats.TextDecoration,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.property.PropertyFactory,org.apache.royale.textLayout.property.PropertyUtil,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.textLayout.conversion.BaseTextLayoutImporter');
goog.require('org.apache.royale.textLayout.conversion.IHTMLImporter');



/** Constructor 
 * @constructor
 * @extends {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter}
 * @implements {org.apache.royale.textLayout.conversion.IHTMLImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter = function() {
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.createConfig();
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.base(this, 'constructor', null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig);
};
goog.inherits(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', org.apache.royale.textLayout.conversion.TextFieldHtmlImporter);


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageMiscDescription_;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdDescription_;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.FontImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.TextFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.HtmlCustomParaFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeFormat_;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeParaFormat_;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat = null;


/**
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype._baseFontSize;


/**
 * @export
 * @nocollapse
 * @type {org.apache.royale.textLayout.conversion.ImportExportConfiguration}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig;


/**
 * @private
 * @type {Function}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__imageSourceResolveFunction;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__preserveBodyElement = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__importHtmlElement = false;


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.createConfig = function() {
  if (!org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig = new org.apache.royale.textLayout.conversion.ImportExportConfiguration();
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("BR", org.apache.royale.textLayout.elements.BreakElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseBreak, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("P", org.apache.royale.textLayout.elements.IParagraphElement, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parsePara, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("SPAN", org.apache.royale.textLayout.elements.SpanElement, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseSpan, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("A", org.apache.royale.textLayout.elements.LinkElement, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseLink, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("IMG", org.apache.royale.textLayout.elements.InlineGraphicElement, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseInlineGraphic, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("DIV", org.apache.royale.textLayout.elements.DivElement, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseDiv, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("HTML", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseHtmlElement, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("BODY", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseBody, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("FONT", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseFont, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("TEXTFORMAT", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseTextFormat, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("U", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseUnderline, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("I", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseItalic, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("B", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseBold, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("S", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseStrikeThrough, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("UL", null, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseList, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("OL", null, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseList, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig.addIEInfo("LI", null, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseListItem, null);
  }
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_classAndIdDescription"]["CLASS"] === undefined) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_classAndIdDescription"]["CLASS"] = org.apache.royale.textLayout.property.PropertyFactory.string("CLASS", null, false, null);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatImporter = new org.apache.royale.textLayout.conversion.importers.HtmlCustomParaFormatImporter(org.apache.royale.textLayout.formats.TextLayoutFormat, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_paragraphFormatDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatImporter = new org.apache.royale.textLayout.conversion.importers.TextFormatImporter(org.apache.royale.textLayout.formats.TextLayoutFormat, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_textFormatDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontImporter = new org.apache.royale.textLayout.conversion.importers.FontImporter(org.apache.royale.textLayout.formats.TextLayoutFormat, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_fontDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_fontMiscDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_textFormatMiscDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_linkHrefDescription"], false);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_linkTargetDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_imageDescription"]);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_imageMiscDescription"], false);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter = new org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter(org.apache.royale.utils.ObjectMap, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_classAndIdDescription"]);
  }
};


/** Parse and convert input data
 * 
 * @asparam source - the HTML string
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.importFromString = function(source) {
  var /** @type {org.apache.royale.textLayout.elements.TextFlow} */ textFlow;
  var /** @type {XML} */ xml = this.toXML(source);
  if (xml) {
    textFlow = this.importFromXML(xml);
  }
  return textFlow;
};


/** Parse and convert input XML data
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.importFromXML = function(xmlSource) {
  var /** @type {org.apache.royale.textLayout.elements.TextFlow} */ textFlow = new org.apache.royale.textLayout.elements.TextFlow(org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"], this._textFlowConfiguration);
  if (this.preserveHTMLElement)
    textFlow.typeName = "html";
  this._baseFontSize = Number(textFlow.fontSize === undefined ? 12 : textFlow.fontSize);
  
  this.parseObject(xmlSource.name().localName, xmlSource, textFlow);
  this.resetImpliedPara();
  
  textFlow.normalize();
  textFlow.applyWhiteSpaceCollapse(null);
  return textFlow;
};


/** @copy ConverterBase#clear()
 * @asprivate
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.clear = function() {
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeParaFormat"].clearStyles();
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"].clearStyles();
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.superClass_.clear.apply(this);
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createImpliedParagraph = function() {
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ rslt;
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ savedActiveFormat = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat)
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeFormat_ = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat;
  try {
    rslt = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.superClass_.createImpliedParagraph.apply(this);
  } finally {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeFormat_ = savedActiveFormat;
  }
  return rslt;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createParagraphFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paraElem = org.apache.royale.textLayout.elements.ElementHelper.getParagraph();
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter];
  this.parseAttributes(xmlToParse, formatImporters);
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ paragraphFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatImporter.result);
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeParaFormat"])
    paragraphFormat.apply(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeParaFormat"]);
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"])
    paragraphFormat.apply(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"]);
  var /** @type {XML} */ fontFormattingElement = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.getSingleFontChild(xmlToParse);
  if (fontFormattingElement)
    paragraphFormat.apply(this.parseFontAttributes(fontFormattingElement));
  if (paragraphFormat.lineHeight !== undefined)
    paragraphFormat.leadingModel = org.apache.royale.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD;
  paraElem.format = paragraphFormat;
  paraElem.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  paraElem.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  return paraElem;
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseListItem = function(importer, xmlToParse, parent) {
  if (!org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IListElement)) {
    var /** @type {org.apache.royale.textLayout.elements.IListElement} */ list = importer.createListFromXML(null);
    importer.addChild(parent, list);
    
    parent = list;
  }
  var /** @type {org.apache.royale.textLayout.elements.IListItemElement} */ listItem = importer.createListItemFromXML(xmlToParse);
  if (importer.addChild(parent, listItem)) {
    importer.parseFlowGroupElementChildren(xmlToParse, listItem);
    if (listItem.numChildren == 0)
      listItem.addChild(org.apache.royale.textLayout.elements.ElementHelper.getParagraph());
  }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createListFromXML = function(xmlToParse) {
  this.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
  var /** @type {org.apache.royale.textLayout.elements.IListElement} */ list = org.apache.royale.textLayout.elements.ElementHelper.getList();
  list.paddingLeft = 36;
  var /** @type {string} */ name = org.apache.royale.utils.Language.string(xmlToParse ? xmlToParse.name().localName : null);
  list.listStyleType = name == "OL" ? org.apache.royale.textLayout.formats.ListStyleType.DECIMAL : org.apache.royale.textLayout.formats.ListStyleType.DISC;
  var /** @type {org.apache.royale.textLayout.formats.ListMarkerFormat} */ lmf = new org.apache.royale.textLayout.formats.ListMarkerFormat();
  lmf.paragraphEndIndent = 14;
  list.listMarkerFormat = lmf;
  list.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  list.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  return list;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createListItemFromXML = function(xmlToParse) {
  this.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
  var /** @type {org.apache.royale.textLayout.elements.IListItemElement} */ listItem = org.apache.royale.textLayout.elements.ElementHelper.getListItem();
  listItem.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  listItem.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  return listItem;
};


/** Parse the supplied XML into a paragraph. Parse the <p/> element and its children.
 * @asprivate
 * @asparam importer	parser object
 * @asparam xmlToParse	content to parse
 * @asparam parent 		the parent for the new content
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parsePara = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paraElem = importer.createParagraphFromXML(xmlToParse);
  if (importer.addChild(parent, paraElem)) {
    var /** @type {XML} */ fontFormattingElement = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.getSingleFontChild(xmlToParse);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat(importer, fontFormattingElement ? fontFormattingElement : xmlToParse, paraElem, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], null);
    if (paraElem.numChildren == 0)
      paraElem.addChild(importer.createImpliedSpan(""));
  }
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.replaceBreakElementsWithParaSplits(paraElem);
};


/** Parse the supplied XML into a DivElement. Parse the <p/> element and its children.
 * @asprivate
 * @asparam importer	parser object
 * @asparam xmlToParse	content to parse
 * @asparam parent 		the parent for the new content
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseDiv = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ elem;
  if (parent.canOwnFlowElement(new org.apache.royale.textLayout.elements.DivElement()))
    elem = importer.createDivFromXML(xmlToParse); else {
    elem = importer.createSPGEFromXML(xmlToParse);
    elem.typeName = "div";
  }
  importer.addChild(parent, elem);
  importer.parseFlowGroupElementChildren(xmlToParse, elem);
};


/**
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseHtmlElement = function(importer, xmlToParse, parent) {
  if (importer.preserveHTMLElement) {
    if (!org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.TextFlow)) {
      var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ newParent = (org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IParagraphElement) || org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.SubParagraphGroupElementBase)) ? new org.apache.royale.textLayout.elements.SubParagraphGroupElement() : new org.apache.royale.textLayout.elements.DivElement();
      parent.addChild(newParent);
      parent = newParent;
    }
    importer.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
    parent.typeName = "html";
    parent.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
    parent.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  }
  importer.parseFlowGroupElementChildren(xmlToParse, parent, null, true);
};


/**
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseBody = function(importer, xmlToParse, parent) {
  if (importer.preserveBodyElement) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ newParent = (org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IParagraphElement) || org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.SubParagraphGroupElementBase)) ? new org.apache.royale.textLayout.elements.SubParagraphGroupElement() : new org.apache.royale.textLayout.elements.DivElement();
    parent.addChild(newParent);
    parent = newParent;
    importer.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
    parent.typeName = "body";
    parent.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
    parent.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  }
  importer.parseFlowGroupElementChildren(xmlToParse, parent, null, true);
};


/**
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.DivElement}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createDivFromXML = function(xmlToParse) {
  this.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
  var /** @type {org.apache.royale.textLayout.elements.DivElement} */ divElement = new org.apache.royale.textLayout.elements.DivElement();
  divElement.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  divElement.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  return divElement;
};


/**
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.SubParagraphGroupElement}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createSPGEFromXML = function(xmlToParse) {
  this.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
  var /** @type {org.apache.royale.textLayout.elements.SubParagraphGroupElement} */ spge = new org.apache.royale.textLayout.elements.SubParagraphGroupElement();
  spge.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  spge.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  return spge;
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.onResetImpliedPara = function(para) {
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.replaceBreakElementsWithParaSplits(para);
};


/** If the provided xml has a single child <FONT.../>, get it
 * @asprivate
 * @private
 * @param {XML} xmlToParse
 * @return {XML}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.getSingleFontChild = function(xmlToParse) {
  var /** @type {XMLList} */ children = xmlToParse.children();
  if (children.length() == 1) {
    var /** @type {XML} */ child = children[0];
    if (child.name() && child.name().localName.toUpperCase() == "FONT")
      return child;
  }
  return null;
};


/**
 * @private
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.LinkElement}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter_createLinkFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.LinkElement} */ linkElem = new org.apache.royale.textLayout.elements.LinkElement();
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter];
  this.parseAttributes(xmlToParse, formatImporters);
  linkElem.href = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefImporter.getFormatValue("HREF"));
  linkElem.target = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetImporter.getFormatValue("TARGET"));
  if (!linkElem.target)
    linkElem.target = "_self";
  linkElem.format = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
  linkElem.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  linkElem.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  return linkElem;
};


/** Parse the supplied XML into a LinkElement. Parse the <a/> element and its children.
 * @asprivate
 * @asparam importer	parser object
 * @asparam xmlToParse	content to parse
 * @asparam parent 		the parent for the new content
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseLink = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.LinkElement} */ linkElem = importer.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter_createLinkFromXML(xmlToParse);
  if (importer.addChild(parent, linkElem)) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat(importer, xmlToParse, linkElem, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], null);
  }
};


/** @asprivate returns a string if its a simple span otherwise null 
 * @export
 * @param {XML} xmlToParse
 * @return {string}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.extractSimpleSpanText = function(xmlToParse) {
  var /** @type {XMLList} */ elemList = xmlToParse[0].children();
  if (elemList.length() == 0)
    return "";
  if (elemList.length() != 1)
    return null;
  var foreachiter0_target = elemList;
  for (var foreachiter0 in foreachiter0_target.elementNames()) 
  {
  var child = foreachiter0_target[foreachiter0];
  
    break;}
  
  var /** @type {string} */ elemName = org.apache.royale.utils.Language.string(child.name() ? child.name().localName : null);
  if (elemName != null)
    return null;
  var /** @type {string} */ rslt = child.toString();
  return rslt ? rslt : "";
};


/** Static method for constructing a span from XML. Parse the <span> ... </span> tag. 
 * Insert the new content into its parent
 * Note: Differs from BaseTextLayoutImporter.parseSpan in that it allows nested <span/> elements. 
 * @asprivate
 * @asparam importer	parser object
 * @asparam xmlToParse	content to parse
 * @asparam parent 		the parent for the new content
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseSpan = function(importer, xmlToParse, parent) {
  importer.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
  var /** @type {*} */ classFormatValue = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  var /** @type {*} */ idFormatValue = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID");
  var /** @type {string} */ simpleSpanText = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.extractSimpleSpanText(xmlToParse);
  if (simpleSpanText == null) {
    if (classFormatValue !== undefined || idFormatValue !== undefined || !org.apache.royale.textLayout.formats.TextLayoutFormat.isEqual(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], org.apache.royale.textLayout.formats.TextLayoutFormat["emptyTextLayoutFormat"])) {
      var /** @type {org.apache.royale.textLayout.elements.SubParagraphGroupElement} */ spge = new org.apache.royale.textLayout.elements.SubParagraphGroupElement();
      spge.format = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
      spge.styleName = classFormatValue;
      spge.id = org.apache.royale.utils.Language.string(idFormatValue);
      spge.typeName = "span";
      importer.addChild(parent, spge);
      parent = spge;
    }
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat(importer, xmlToParse, parent, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], null);
    return;
  }
  var /** @type {org.apache.royale.textLayout.elements.SpanElement} */ span = new org.apache.royale.textLayout.elements.SpanElement();
  span.format = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
  span.styleName = classFormatValue;
  span.id = org.apache.royale.utils.Language.string(idFormatValue);
  span.text = simpleSpanText;
  importer.addChild(parent, span);
};


/** create an implied span with specified text 
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createImpliedSpan = function(text) {
  var /** @type {org.apache.royale.textLayout.elements.SpanElement} */ span = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.superClass_.createImpliedSpan.apply(this, [ text] );
  span.format = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
  return span;
};


/** @asprivate 
 * @protected
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.InlineGraphicElement}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createInlineGraphicFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.InlineGraphicElement} */ imgElem = new org.apache.royale.textLayout.elements.InlineGraphicElement();
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter];
  this.parseAttributes(xmlToParse, formatImporters);
  var /** @type {string} */ source = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter.getFormatValue("SRC"));
  imgElem.source = this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__imageSourceResolveFunction != null ? this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__imageSourceResolveFunction(source) : source;
  imgElem.height = org.apache.royale.textLayout.elements.InlineGraphicElement["heightPropertyDefinition"].setHelper(imgElem.height, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter.getFormatValue("HEIGHT"));
  imgElem.width = org.apache.royale.textLayout.elements.InlineGraphicElement["heightPropertyDefinition"].setHelper(imgElem.width, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter.getFormatValue("WIDTH"));
  var /** @type {string} */ floatVal = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter.getFormatValue("ALIGN"));
  if (floatVal == org.apache.royale.textLayout.formats.Float.LEFT || floatVal == org.apache.royale.textLayout.formats.Float.RIGHT)
    imgElem.float = floatVal;
  imgElem.format = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
  imgElem.id = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID"));
  imgElem.styleName = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  return imgElem;
};


/** Parse the supplied XML into an InlineGraphicElement. Parse the <img/> element.
 * @asprivate
 * @asparam importer	parser object
 * @asparam xmlToParse	content to parse
 * @asparam parent 		the parent for the new content
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseInlineGraphic = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.InlineGraphicElement} */ ilg = importer.createInlineGraphicFromXML(xmlToParse);
  importer.addChild(parent, ilg);
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.createTabFromXML = function(xmlToParse) {
  return null;
};


/** Parse the attributes of the <Font/> formatting element and returns the corresponding TLF format
 * @asprivate
 * @protected
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.parseFontAttributes = function(xmlToParse) {
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter];
  this.parseAttributes(xmlToParse, formatImporters);
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontImporter.result);
  var /** @type {string} */ kerning = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter.getFormatValue("KERNING"));
  if (kerning) {
    var /** @type {number} */ kerningVal = Number(kerning);
    newFormat.kerning = kerningVal == 0 ? org.apache.royale.text.engine.Kerning.OFF : org.apache.royale.text.engine.Kerning.AUTO;
  }
  var /** @type {string} */ size = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter.getFormatValue("SIZE"));
  if (size) {
    var /** @type {number} */ sizeVal = Number(org.apache.royale.textLayout.formats.TextLayoutFormat["fontSizeProperty"].setHelper(NaN, size));
    if (!isNaN(sizeVal)) {
      if (size.search(/\s*(-|\+)/) != -1)
        sizeVal += this._baseFontSize;
      newFormat.fontSize = sizeVal;
    }
  }
  return newFormat;
};


/** Parse the <Font/> formatting element
 * Calculates the new format to apply to _activeFormat and continues parsing down the hierarchy
 * @asprivate
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseFont = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ newFormat = importer.parseFontAttributes(xmlToParse);
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormatWithImpliedParaFormat(importer, xmlToParse, parent, newFormat);
};


/** Parse the <TextFormat> formatting element
 * Calculates the new format to apply to _activeParaFormat and continues parsing down the hierarchy
 * @asprivate
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseTextFormat = function(importer, xmlToParse, parent) {
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatImporter, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscImporter];
  importer.parseAttributes(xmlToParse, formatImporters);
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatImporter.result);
  var /** @type {*} */ blockIndent = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscImporter.getFormatValue("BLOCKINDENT");
  if (blockIndent !== undefined) {
    blockIndent = org.apache.royale.textLayout.formats.TextLayoutFormat["paragraphStartIndentProperty"].setHelper(undefined, blockIndent);
    if (blockIndent !== undefined) {
      var /** @type {number} */ blockIndentVal = Number(blockIndent);
      newFormat.paragraphStartIndent = newFormat.paragraphStartIndent === undefined ? blockIndentVal : newFormat.paragraphStartIndent + blockIndentVal;
    }
  }
  var /** @type {*} */ saveLineHeight = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"].lineHeight;
  if (org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IParagraphElement)) {
    if (parent.numChildren == 0) {
      var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ format = new org.apache.royale.textLayout.formats.TextLayoutFormat(parent.format);
      format.apply(newFormat);
      if (format.lineHeight !== undefined)
        format.leadingModel = org.apache.royale.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD;
      parent.format = format;
      newFormat.clearStyles();
    }
    else if (newFormat.lineHeight !== undefined)
      org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"].lineHeight = newFormat.lineHeight;
  }
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat(importer, xmlToParse, parent, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeParaFormat"], newFormat, true);
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"].lineHeight = saveLineHeight;
};


/** Parse the <b> formatting element
 * Calculates the new format to apply to _activeFormat and continues parsing down the hierarchy
 * @asprivate
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseBold = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  newFormat.fontWeight = org.apache.royale.text.engine.FontWeight.BOLD;
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormatWithImpliedParaFormat(importer, xmlToParse, parent, newFormat);
};


/** Parse the <i> formatting element
 * Calculates the new format to apply to _activeFormat and continues parsing down the hierarchy
 * @asprivate
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseItalic = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  newFormat.fontStyle = org.apache.royale.text.engine.FontPosture.ITALIC;
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormatWithImpliedParaFormat(importer, xmlToParse, parent, newFormat);
};


/** Parse the <s> formatting element
 * Calculates the new format to apply to _activeFormat and continues parsing down the hierarchy
 * @asprivate
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseStrikeThrough = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  newFormat.lineThrough = true;
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormatWithImpliedParaFormat(importer, xmlToParse, parent, newFormat);
};


/** Parse the <u> formatting element
 * Calculates the new format to apply to _activeFormat and continues parsing down the hierarchy
 * @asprivate
 * @export
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseUnderline = function(importer, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  newFormat.textDecoration = org.apache.royale.textLayout.formats.TextDecoration.UNDERLINE;
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormatWithImpliedParaFormat(importer, xmlToParse, parent, newFormat);
};


/** @asprivate 
 * @protected
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} newFormat
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormatWithImpliedParaFormat = function(importer, xmlToParse, parent, newFormat) {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ oldActiveImpliedParaFormat = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat;
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat == null)
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"]);
  try {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat(importer, xmlToParse, parent, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], newFormat, true);
  } finally {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat = oldActiveImpliedParaFormat;
  }
};


/** Updates the current active format and base font size as specified, parses children, and restores the active format and base font size
 * There are two different use cases for this method:
 * - Parsing children of a formatting XML element like <Font/> or <TextFormat/>. In this case, the TLF format corresponding to the formatting element
 * (newFormat) is applied to the currently active format (_activeFormat in the case of <Font/> and _activeParaFormat in the case of <TextFormat/>). 
 * Children of the formatting element are parsed under this new active format.
 * - Parsing children of a flow XML element like <P/> or <A/>. In this case, newFormat is null and the currently active format (_activeFormat) is reset.
 * Children of the flow element are parsed under this newly reset format. This is to avoid redundancy (the format is already applied to the flow element). 
 * 
 * @asparam importer	parser object
 * @asparam xmlToParse	content to parse
 * @asparam parent 		the parent for the parsed children
 * @asparam currFormat	the active format (_activeFormat or _activeParaFormat)
 * @asparam newFormat		the format to apply to currFormat while the children are being parsed. If null, currFormat is to be reset.
 * @asparam chainedParent whether parent actually corresponds to xmlToParse or has been chained (such as when xmlToParse is a formatting element). See BaseTextLayoutImporter.parseFlowGroupElementChildren
 * @asprivate
 * @protected
 * @param {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} importer
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} parent
 * @param {org.apache.royale.textLayout.formats.TextLayoutFormat} currFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} newFormat
 * @param {boolean=} chainedParent
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat = function(importer, xmlToParse, parent, currFormat, newFormat, chainedParent) {
  chainedParent = typeof chainedParent !== 'undefined' ? chainedParent : false;
  var /** @type {number} */ restoreBaseFontSize = importer._baseFontSize;
  var /** @type {Object} */ restoreStyles = org.apache.royale.textLayout.property.PropertyUtil.shallowCopy(currFormat.getStyles());
  if (newFormat) {
    if (newFormat.fontSize !== undefined)
      importer._baseFontSize = Number(newFormat.fontSize);
    currFormat.apply(newFormat);
  } else {
    currFormat.clearStyles();
  }
  try {
    var /** @type {number} */ beforeCount = parent.numChildren;
    importer.parseFlowGroupElementChildren(xmlToParse, parent, null, chainedParent);
    if (beforeCount == parent.numChildren) {
      var /** @type {org.apache.royale.textLayout.elements.SpanElement} */ span = importer.createImpliedSpan("");
      importer.addChild(parent, span);
    }
  } finally {
    currFormat.setStyles(restoreStyles, false);
    importer._baseFontSize = restoreBaseFontSize;
  }
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.handleUnknownAttribute = function(elementName, propertyName) {
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.handleUnknownElement = function(name, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ newParent;
  this.parseAttributes(xmlToParse, [org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter]);
  var /** @type {*} */ classFormatValue = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("CLASS");
  var /** @type {*} */ idFormatValue = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter.getFormatValue("ID");
  if (classFormatValue !== undefined || idFormatValue !== undefined || !org.apache.royale.textLayout.formats.TextLayoutFormat.isEqual(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], org.apache.royale.textLayout.formats.TextLayoutFormat["emptyTextLayoutFormat"]) || org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IListElement)) {
    newParent = (org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IParagraphElement) || org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.SubParagraphGroupElementBase)) ? new org.apache.royale.textLayout.elements.SubParagraphGroupElement() : new org.apache.royale.textLayout.elements.DivElement();
    this.addChild(parent, newParent);
    newParent.format = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"];
    newParent.typeName = name.toLowerCase();
    newParent.styleName = classFormatValue;
    newParent.id = org.apache.royale.utils.Language.string(idFormatValue);
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.parseChildrenUnderNewActiveFormat(this, xmlToParse, newParent, org.apache.royale.textLayout.conversion.TextFieldHtmlImporter["_activeFormat"], null);
    return;
  }
  var /** @type {number} */ befNumChildren = parent.numChildren;
  this.parseFlowGroupElementChildren(xmlToParse, parent, null, true);
  if (befNumChildren == parent.numChildren)
    return;
  if (befNumChildren + 1 == parent.numChildren) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ addedChild = parent.getChildAt(befNumChildren);
    if (addedChild.id == null && addedChild.styleName == null && addedChild.typeName == addedChild.defaultTypeName) {
      addedChild.typeName = name.toLowerCase();
      return;
    }
  }
  newParent = (org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IParagraphElement) || org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.SubParagraphGroupElementBase)) ? new org.apache.royale.textLayout.elements.SubParagraphGroupElement() : new org.apache.royale.textLayout.elements.DivElement();
  newParent.typeName = name.toLowerCase();
  newParent.replaceChildren(0, 0, parent.mxmlChildren.slice(befNumChildren));
  this.addChild(parent, newParent);
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.parseObject = function(name, xmlToParse, parent, exceptionElements) {
  exceptionElements = typeof exceptionElements !== 'undefined' ? exceptionElements : null;
  org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.superClass_.parseObject.apply(this, [ name.toUpperCase(), xmlToParse, parent, exceptionElements] );
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.checkNamespace = function(xmlToParse) {
  return true;
};


/** Splits the paragraph wherever a break element occurs and removes the latter
 * This is to replicate TextField handling of <br/>: splits the containing paragraph (implied or otherwise)
 * The <br/> itself doesn't survive.
 * @asprivate
 * @protected
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} para
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.replaceBreakElementsWithParaSplits = function(para) {
  var /** @type {number} */ paraIndex = 0;
  var /** @type {Array} */ paraArray;
  //var /** @type {number} */ paraIndex = 0;
  var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ paraParent;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ elem = para.getFirstLeaf();
  while (elem) {
    if (!org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.BreakElement)) {
      elem = elem.getNextLeaf(para);
      continue;
    }
    if (!paraArray) {
      paraArray = [para];
      paraParent = para.parent;
      paraIndex = paraParent.getChildIndex(para);
      paraParent.removeChildAt((paraIndex) >>> 0);
    }
    
    para = para.splitAtPosition((elem.getAbsoluteStart() + elem.textLength) >> 0);
    paraArray.push(para);
    elem.parent.removeChild(elem);
    elem = para.getFirstLeaf();
  }
  if (paraArray)
    paraParent.replaceChildren(paraIndex, paraIndex, paraArray);
};


/**
 * @export
 * @nocollapse
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.stripRegex = /<!--[^]*?-->|<\?("[^]*?"|'[^]*?'|[^>"']+)*>|<!("[^]*?"|'[^]*?'|[^>"']+)*>/g;


/**
 * @export
 * @nocollapse
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.tagRegex = /<(\/?)(\w+)((?:\s+\w+(?:\s*=\s*(?:"[^]*?"|'[^]*?'|[\w\.]+))?)*)\s*(\/?)>/g;


/**
 * @export
 * @nocollapse
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.attrRegex = /\s+(\w+)(?:\s*=\s*("[^]*?"|'[^]*?'|[\w\.]+))?/g;


/** Wrapper for core HTML parsing code that manages XML settings during the process
 * @asprivate
 * @protected
 * @param {string} source
 * @return {XML}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.toXML = function(source) {
  var /** @type {XML} */ xml;
  var /** @type {Object} */ originalSettings = XML.settings();
  try {
    XML.ignoreProcessingInstructions = false;
    XML.ignoreWhitespace = false;
    xml = this.toXMLInternal(source);
  } finally {
    XML.setSettings(originalSettings);
  }
  return xml;
};


/** Convert HTML string to well-formed xml, accounting for the following HTML oddities
 * 
 * 1) Start tags are optional for some elements.
 * Optional start tag not specified&lt;/html&gt;
 * TextField dialect: This is true for all elements. 
 * 
 * 2) End tags are optional for some elements. Elements with missing end tags may be implicitly closed by
 *    a) start-tag for a peer element
 *    &lt;p&gt;p element without end tag; closed by next p start tag
 *    &lt;p&gt;closes previous p element with missing end tag&lt;/p&gt;
 * 
 *    b) end-tag for an ancestor element 
 * 	  &lt;html&gt;&lt;p&gt;p element without end tag; closed by next end tag of an ancestor&lt;/html&gt;
 *     TextField dialect: This is true for all elements. 
 * 
 * 3) End tags are forbidden for some elements
 * &lt;br&gt; and &lt;br/&gt; are valid, but &lt;br&gt;&lt;/br&gt; is not
 * TextField dialect: Does not apply. 
 * 
 * 4) Element and attribute names may use any case
 * &lt;P ALign="left"&gt;&lt;/p&gt;
 * 
 * 5) Attribute values may be unquoted
 * &lt;p align=left/&gt;
 * 
 * 6) Boolean attributed may assume a minimized form
 * &lt;p selected/&gt; is equivalent to &lt;p selected="selected"/&gt;
 * @asprivate
 * @protected
 * @param {string} source
 * @return {XML}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.toXMLInternal = function(source) {
  source = source.replace(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.stripRegex, "");
  var /** @type {XML} */ root = new XML( '<HTML/>');
  var /** @type {XML} */ currElem = root;
  var /** @type {number} */ lastIndex = (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.tagRegex.lastIndex = 0) >> 0;
  var /** @type {string} */ openElemName;
  do {
    var /** @type {Object} */ result = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.tagRegex.exec(source);
    if (!result) {
      this.appendTextChild(currElem, source.substring(lastIndex));
      break;
    }
    if (result.index != lastIndex) {
      this.appendTextChild(currElem, source.substring(lastIndex, Number(result.index)));
    }
    var /** @type {string} */ tag = org.apache.royale.utils.Language.string(result[0]);
    var /** @type {boolean} */ hasStartModifier = (result[1] == "/");
    var /** @type {string} */ name = org.apache.royale.utils.Language.string(result[2].toUpperCase());
    var /** @type {string} */ attrs = org.apache.royale.utils.Language.string(result[3]);
    var /** @type {boolean} */ hasEndModifier = (result[4] == "/");
    if (!hasStartModifier) {
      if (name == "P" && currElem.name().localName == "P")
        currElem = currElem.parent();
      tag = "<" + name;
      do {
        var /** @type {Object} */ innerResult = org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.attrRegex.exec(attrs);
        if (!innerResult)
          break;
        var /** @type {string} */ attrName = org.apache.royale.utils.Language.string(innerResult[1].toUpperCase());
        tag += " " + attrName + "=";
        var /** @type {string} */ val = org.apache.royale.utils.Language.string(innerResult[2] ? innerResult[2] : attrName);
        var /** @type {string} */ startChar = val.charAt(0);
        tag += ((startChar == "'" || startChar == "\"") ? val : ("\"" + val + "\""));
      } while (true);
      tag += "/>";
      currElem.appendChild(new XML(tag));
      if (!hasEndModifier && !this.doesStartTagCloseElement(name))
        currElem = currElem.children()[currElem.children().length() - 1];
    } else {
      if (hasEndModifier || attrs.length) {
        this.reportError(org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("malformedTag", [tag])));
      } else {
        var /** @type {XML} */ openElem = currElem;
        do {
          openElemName = openElem.name().localName;
          openElem = openElem.parent();
          if (openElemName == name) {
            currElem = openElem;
            break;
          }
          if (!openElem) {
            break;
          }
        } while (true);
      }
    }
    lastIndex = (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.tagRegex.lastIndex) >> 0;
    if (lastIndex == source.length)
      break;
  } while (currElem);
  return root;
};


/** @asprivate 
 * @protected
 * @param {string} tagName
 * @return {boolean}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.doesStartTagCloseElement = function(tagName) {
  switch (tagName) {
    case "BR":
    
    case "IMG":
      return true;
    default:
      return false;
  }
};


/**
 * @export
 * @nocollapse
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.anyPrintChar = /[^\u0009\u000a\u000d\u0020]/g;


/** Adds text as a descendant of the specified XML element. Adds an intermediate <span> element is created if parent is not a <span>
 *  No action is taken for whitespace-only text
 * @asprivate
 * @protected
 * @param {XML} parent
 * @param {string} text
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.appendTextChild = function(parent, text) {
  var /** @type {boolean} */ parentIsSpan = (parent.localName() == "SPAN");
  var /** @type {string} */ elemName = parentIsSpan ? "DUMMY" : "SPAN";
  var /** @type {string} */ xmlText = "<" + elemName + ">" + text + "</" + elemName + ">";
  try {
    var /** @type {XML} */ xml = new XML(xmlText);
    parent.appendChild(parentIsSpan ? xml.children()[0] : xml);
  } catch (e) {
    this.reportError(org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("malformedMarkup", [text])));
  }
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.get__imageSourceResolveFunction = function() {
  return this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__imageSourceResolveFunction;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.set__imageSourceResolveFunction = function(resolver) {
  this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__imageSourceResolveFunction = resolver;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.get__preserveBodyElement = function() {
  return this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__preserveBodyElement;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.set__preserveBodyElement = function(value) {
  this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__preserveBodyElement = value;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.get__preserveHTMLElement = function() {
  return this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__importHtmlElement;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.set__preserveHTMLElement = function(value) {
  this.org_apache_royale_textLayout_conversion_TextFieldHtmlImporter__importHtmlElement = value;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype, /** @lends {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype} */ {
/**
  * @export
  * @type {Function} */
imageSourceResolveFunction: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.get__imageSourceResolveFunction,
set: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.set__imageSourceResolveFunction},
/**
  * @export
  * @type {boolean} */
preserveBodyElement: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.get__preserveBodyElement,
set: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.set__preserveBodyElement},
/**
  * @export
  * @type {boolean} */
preserveHTMLElement: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.get__preserveHTMLElement,
set: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.set__preserveHTMLElement}}
);


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___fontDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontDescription_ = {"color":org.apache.royale.textLayout.formats.TextLayoutFormat["colorProperty"], "trackingRight":org.apache.royale.textLayout.formats.TextLayoutFormat["trackingRightProperty"], "fontFamily":org.apache.royale.textLayout.formats.TextLayoutFormat["fontFamilyProperty"]};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___fontMiscDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscDescription_ = {"size":org.apache.royale.textLayout.property.PropertyFactory.string("size", null, false, null), "kerning":org.apache.royale.textLayout.property.PropertyFactory.string("kerning", null, false, null)};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___textFormatDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatDescription_ = {"paragraphStartIndent":org.apache.royale.textLayout.formats.TextLayoutFormat["paragraphStartIndentProperty"], "paragraphEndIndent":org.apache.royale.textLayout.formats.TextLayoutFormat["paragraphEndIndentProperty"], "textIndent":org.apache.royale.textLayout.formats.TextLayoutFormat["textIndentProperty"], "lineHeight":org.apache.royale.textLayout.formats.TextLayoutFormat["lineHeightProperty"], "tabStops":org.apache.royale.textLayout.formats.TextLayoutFormat["tabStopsProperty"]};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___textFormatMiscDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscDescription_ = {"blockIndent":org.apache.royale.textLayout.property.PropertyFactory.string("blockIndent", null, false, null)};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___paragraphFormatDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatDescription_ = {"textAlign":org.apache.royale.textLayout.formats.TextLayoutFormat["textAlignProperty"]};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___linkHrefDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefDescription_ = {"href":org.apache.royale.textLayout.property.PropertyFactory.string("href", null, false, null)};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___linkTargetDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetDescription_ = {"target":org.apache.royale.textLayout.property.PropertyFactory.string("target", null, false, null)};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___imageDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageDescription_ = {"height":org.apache.royale.textLayout.elements.InlineGraphicElement["heightPropertyDefinition"], "width":org.apache.royale.textLayout.elements.InlineGraphicElement["widthPropertyDefinition"]};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___imageMiscDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageMiscDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageMiscDescription_ = {"src":org.apache.royale.textLayout.property.PropertyFactory.string("src", null, false, null), "align":org.apache.royale.textLayout.property.PropertyFactory.string("align", null, false, null)};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._imageMiscDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___classAndIdDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdDescription_ = {"id":org.apache.royale.textLayout.property.PropertyFactory.string("ID", null, false, null)};
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdDescription_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___activeFormat = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeFormat_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeFormat_ = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeFormat_;
};


org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___activeParaFormat = function() {
  if (org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeParaFormat_ == null) {
    org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeParaFormat_ = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  }
  return org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeParaFormat_;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.TextFieldHtmlImporter, /** @lends {org.apache.royale.textLayout.conversion.TextFieldHtmlImporter} */ {
/**
  * @export
  * @type {Object} */
_fontDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___fontDescription},
/**
  * @export
  * @type {Object} */
_fontMiscDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___fontMiscDescription},
/**
  * @export
  * @type {Object} */
_textFormatDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___textFormatDescription},
/**
  * @export
  * @type {Object} */
_textFormatMiscDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___textFormatMiscDescription},
/**
  * @export
  * @type {Object} */
_paragraphFormatDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___paragraphFormatDescription},
/**
  * @export
  * @type {Object} */
_linkHrefDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___linkHrefDescription},
/**
  * @export
  * @type {Object} */
_linkTargetDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___linkTargetDescription},
/**
  * @export
  * @type {Object} */
_imageDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___imageDescription},
/**
  * @export
  * @type {Object} */
_imageMiscDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___imageMiscDescription},
/**
  * @export
  * @type {Object} */
_classAndIdDescription: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___classAndIdDescription},
/**
  * @export
  * @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */
_activeFormat: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___activeFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */
_activeParaFormat: {
get: org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.get___activeParaFormat}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextFieldHtmlImporter', qName: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', kind: 'class' }], interfaces: [org.apache.royale.textLayout.conversion.IHTMLImporter] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|_fontImporter': { type: 'org.apache.royale.textLayout.conversion.importers.FontImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontImporter;}},
        '|_fontMiscImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._fontMiscImporter;}},
        '|_textFormatImporter': { type: 'org.apache.royale.textLayout.conversion.importers.TextFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatImporter;}},
        '|_textFormatMiscImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._textFormatMiscImporter;}},
        '|_paragraphFormatImporter': { type: 'org.apache.royale.textLayout.conversion.importers.HtmlCustomParaFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._paragraphFormatImporter;}},
        '|_linkHrefImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkHrefImporter;}},
        '|_linkTargetImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._linkTargetImporter;}},
        '|_ilgFormatImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgFormatImporter;}},
        '|_ilgMiscFormatImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._ilgMiscFormatImporter;}},
        '|_classAndIdImporter': { type: 'org.apache.royale.textLayout.conversion.importers.CaseInsensitiveTLFFormatImporter', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._classAndIdImporter;}},
        '|_activeImpliedParaFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._activeImpliedParaFormat;}},
        '_baseFontSize': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.conversion.TextFieldHtmlImporter */ inst, /** * */ v) {return v !== undefined ? inst._baseFontSize = v : inst._baseFontSize;}},
        '|_htmlImporterConfig': { type: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig = v : org.apache.royale.textLayout.conversion.TextFieldHtmlImporter._htmlImporterConfig;}}
      };
    },
    accessors: function () {
      return {
        'imageSourceResolveFunction': { type: 'Function', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'},
        'preserveBodyElement': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'},
        'preserveHTMLElement': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'}
      };
    },
    methods: function () {
      return {
        'TextFieldHtmlImporter': { type: '', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'},
        '|createConfig': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'},
        'clear': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'},
        'createImpliedParagraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter'},
        'createParagraphFromXML': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parseListItem': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        'createListFromXML': { type: 'org.apache.royale.textLayout.elements.IListElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        'createListItemFromXML': { type: 'org.apache.royale.textLayout.elements.IListItemElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parsePara': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseDiv': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseHtmlElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseBody': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        'createDivFromXML': { type: 'org.apache.royale.textLayout.elements.DivElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        'createSPGEFromXML': { type: 'org.apache.royale.textLayout.elements.SubParagraphGroupElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parseLink': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|extractSimpleSpanText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parseSpan': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        'createImpliedSpan': { type: 'org.apache.royale.textLayout.elements.SpanElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'String', false ]; }},
        '|parseInlineGraphic': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        'createTabFromXML': { type: 'org.apache.royale.textLayout.elements.TabElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parseFont': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseTextFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseBold': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseItalic': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseStrikeThrough': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        '|parseUnderline': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ]; }},
        'parseObject': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextFieldHtmlImporter', parameters: function () { return [ 'String', false ,'XML', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'Object', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.TextFieldHtmlImporter.prototype.ROYALE_COMPILE_FLAGS = 10;
