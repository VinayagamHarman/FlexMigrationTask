/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/ConverterBase.as
 * org.apache.royale.textLayout.conversion.ConverterBase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.ConverterBase');
/* Royale Dependency List: org.apache.royale.textLayout.conversion.ImportExportConfiguration,XML*/




/**
 * @constructor
 */
org.apache.royale.textLayout.conversion.ConverterBase = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.ConverterBase', org.apache.royale.textLayout.conversion.ConverterBase);


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.org_apache_royale_textLayout_conversion_ConverterBase__errors = null;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.org_apache_royale_textLayout_conversion_ConverterBase__throwOnError = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.org_apache_royale_textLayout_conversion_ConverterBase__useClipboardAnnotations = false;


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.ImportExportConfiguration}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.org_apache_royale_textLayout_conversion_ConverterBase__config;


/** @asprivate
 * Clear errors.
 * @export
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.clear = function() {
  this.org_apache_royale_textLayout_conversion_ConverterBase__errors = null;
};


/** @asprivate
 * Register an error that was encountered while parsing. If throwOnError
 * is true, the error causes an exception. Otherwise it is logged and parsing
 * continues.
 * @asparam error	the String that describes the error
 * @export
 * @param {string} error
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.reportError = function(error) {
  if (this.org_apache_royale_textLayout_conversion_ConverterBase__throwOnError)
    throw new Error(error);
  if (!this.org_apache_royale_textLayout_conversion_ConverterBase__errors)
    this.org_apache_royale_textLayout_conversion_ConverterBase__errors = [];
  this.org_apache_royale_textLayout_conversion_ConverterBase__errors.push(error);
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__errors = function() {
  return this.org_apache_royale_textLayout_conversion_ConverterBase__errors;
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__throwOnError = function() {
  return this.org_apache_royale_textLayout_conversion_ConverterBase__throwOnError;
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.set__throwOnError = function(value) {
  this.org_apache_royale_textLayout_conversion_ConverterBase__throwOnError = value;
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__useClipboardAnnotations = function() {
  return this.org_apache_royale_textLayout_conversion_ConverterBase__useClipboardAnnotations;
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.set__useClipboardAnnotations = function(value) {
  this.org_apache_royale_textLayout_conversion_ConverterBase__useClipboardAnnotations = value;
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__config = function() {
  return this.org_apache_royale_textLayout_conversion_ConverterBase__config;
};


org.apache.royale.textLayout.conversion.ConverterBase.prototype.set__config = function(value) {
  this.org_apache_royale_textLayout_conversion_ConverterBase__config = value;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.ConverterBase.prototype, /** @lends {org.apache.royale.textLayout.conversion.ConverterBase.prototype} */ {
/**
  * @export
  * @type {Array.<string>} */
errors: {
get: org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__errors},
/**
  * @export
  * @type {boolean} */
throwOnError: {
get: org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__throwOnError,
set: org.apache.royale.textLayout.conversion.ConverterBase.prototype.set__throwOnError},
/**
  * @export
  * @type {boolean} */
useClipboardAnnotations: {
get: org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__useClipboardAnnotations,
set: org.apache.royale.textLayout.conversion.ConverterBase.prototype.set__useClipboardAnnotations},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.ImportExportConfiguration} */
config: {
get: org.apache.royale.textLayout.conversion.ConverterBase.prototype.get__config,
set: org.apache.royale.textLayout.conversion.ConverterBase.prototype.set__config}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ConverterBase', qName: 'org.apache.royale.textLayout.conversion.ConverterBase', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'errors': { type: 'Vector.<String>', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.conversion.ConverterBase'},
        'throwOnError': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.ConverterBase'},
        'useClipboardAnnotations': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.ConverterBase'},
        'config': { type: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.ConverterBase'}
      };
    },
    methods: function () {
      return {
        'clear': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.ConverterBase'},
        'reportError': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.ConverterBase', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.ConverterBase.prototype.ROYALE_COMPILE_FLAGS = 10;
