/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/PlainTextImporter.as
 * org.apache.royale.textLayout.conversion.PlainTextImporter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.PlainTextImporter');
/* Royale Dependency List: org.apache.royale.textLayout.conversion.ConversionConstants,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.IConfiguration,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TextFlow,org.apache.royale.textLayout.factory.TLFFactory,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.conversion.ConverterBase');
goog.require('org.apache.royale.textLayout.conversion.ITextImporter');



/** Constructor 
 * @constructor
 * @extends {org.apache.royale.textLayout.conversion.ConverterBase}
 * @implements {org.apache.royale.textLayout.conversion.ITextImporter}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter = function() {
  org.apache.royale.textLayout.conversion.PlainTextImporter.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.conversion.PlainTextImporter, org.apache.royale.textLayout.conversion.ConverterBase);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.PlainTextImporter', org.apache.royale.textLayout.conversion.PlainTextImporter);


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter.prototype._config = null;


/** @copy ITextImporter#importToFlow()
 * @export
 * @param {Object} source
 * @return {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.importToFlow = function(source) {
  if (org.apache.royale.utils.Language.is(source, String))
    return this.importFromString(String(source));
  return null;
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter._newLineRegex = /\u000a|\u000d\u000a?/g;


/** Import text content, from an external source, and convert it into a ITextFlow.
 * @asparam source		source data to convert
 * @asreturn textFlows[]	an array of ITextFlow objects that were created from the source.
 * @protected
 * @param {string} source
 * @return {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.importFromString = function(source) {
  var /** @type {Array} */ paragraphStrings = source.split(org.apache.royale.textLayout.conversion.PlainTextImporter._newLineRegex);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = new org.apache.royale.textLayout.elements.TextFlow(org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"], this._config);
  var /** @type {string} */ paraText;
  var foreachiter0_target = paragraphStrings;
  for (var foreachiter0 in foreachiter0_target) 
  {
  paraText = foreachiter0_target[foreachiter0];
  {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paragraph = org.apache.royale.textLayout.elements.ElementHelper.getParagraph();
    var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ span = org.apache.royale.textLayout.elements.ElementHelper.getSpan();
    span.replaceText(0, 0, paraText);
    paragraph.replaceChildren(0, 0, span);
    textFlow.replaceChildren(textFlow.numChildren, textFlow.numChildren, paragraph);
  }}
  
  if (this.useClipboardAnnotations && source.lastIndexOf('\n', source.length - 1) != source.length - 1) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ lastLeaf = textFlow.getLastLeaf();
    lastLeaf.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, "true");
    lastLeaf.parent.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, "true");
    textFlow.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, "true");
  }
  return textFlow;
};


org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.get__configuration = function() {
  return this._config;
};


org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.set__configuration = function(value) {
  this._config = value;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.PlainTextImporter.prototype, /** @lends {org.apache.royale.textLayout.conversion.PlainTextImporter.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.IConfiguration} */
configuration: {
get: org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.get__configuration,
set: org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.set__configuration}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'PlainTextImporter', qName: 'org.apache.royale.textLayout.conversion.PlainTextImporter', kind: 'class' }], interfaces: [org.apache.royale.textLayout.conversion.ITextImporter] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'configuration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.PlainTextImporter'}
      };
    },
    methods: function () {
      return {
        'PlainTextImporter': { type: '', declaredBy: 'org.apache.royale.textLayout.conversion.PlainTextImporter'},
        'importToFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', declaredBy: 'org.apache.royale.textLayout.conversion.PlainTextImporter', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.PlainTextImporter.prototype.ROYALE_COMPILE_FLAGS = 10;
