/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/TextLayoutImporter.as
 * org.apache.royale.textLayout.conversion.TextLayoutImporter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.TextLayoutImporter');
/* Royale Dependency List: Namespace,XML,XMLList,org.apache.royale.textLayout.TextLayoutVersion,org.apache.royale.textLayout.conversion.BaseTextLayoutExporter,org.apache.royale.textLayout.conversion.CustomFormatImporter,org.apache.royale.textLayout.conversion.ImportExportConfiguration,org.apache.royale.textLayout.conversion.SingletonAttributeImporter,org.apache.royale.textLayout.conversion.TLFormatImporter,org.apache.royale.textLayout.conversion.TextLayoutExporter,org.apache.royale.textLayout.elements.BreakElement,org.apache.royale.textLayout.elements.DivElement,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.FlowGroupElement,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IDivElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IListElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.InlineGraphicElement,org.apache.royale.textLayout.elements.LinkElement,org.apache.royale.textLayout.elements.ListElement,org.apache.royale.textLayout.elements.ListItemElement,org.apache.royale.textLayout.elements.SpanElement,org.apache.royale.textLayout.elements.SubParagraphGroupElement,org.apache.royale.textLayout.elements.TCYElement,org.apache.royale.textLayout.elements.TabElement,org.apache.royale.textLayout.elements.TableCellElement,org.apache.royale.textLayout.elements.TableElement,org.apache.royale.textLayout.elements.TableRowElement,org.apache.royale.textLayout.elements.TextFlow,org.apache.royale.textLayout.factory.TLFFactory,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.property.PropertyFactory,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.textLayout.conversion.BaseTextLayoutImporter');
goog.require('org.apache.royale.textLayout.conversion.ITextLayoutImporter');



/** Constructor 
 * @constructor
 * @extends {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter}
 * @implements {org.apache.royale.textLayout.conversion.ITextLayoutImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter = function() {
  org.apache.royale.textLayout.conversion.TextLayoutImporter.base(this, 'constructor', new Namespace("flow", "http://ns.adobe.com/textLayout/2008"), org.apache.royale.textLayout.conversion.TextLayoutImporter["defaultConfiguration"]);
};
goog.inherits(org.apache.royale.textLayout.conversion.TextLayoutImporter, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.TextLayoutImporter', org.apache.royale.textLayout.conversion.TextLayoutImporter);


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.ImportExportConfiguration}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration;


/** Set the default configuration back to its original value 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.restoreDefaults = function() {
  org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration = null;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.TLFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._formatImporter;


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.SingletonAttributeImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._idImporter;


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.SingletonAttributeImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._typeNameImporter;


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.CustomFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._customFormatImporter;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._flowElementFormatImporters;


/**
 * @private
 * @type {Function}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.org_apache_royale_textLayout_conversion_TextLayoutImporter__imageSourceResolveFunction;


/**  @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.parseContent = function(rootStory) {
  var /** @type {string} */ rootName = rootStory.name().localName;
  var /** @type {XML} */ textFlowElement = rootName == "TextFlow" ? rootStory : rootStory.descendants(new QName(null,'TextFlow'))[0];
  if (!textFlowElement) {
    this.reportError(org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("missingTextFlow")));
    return null;
  }
  if (!this.checkNamespace(textFlowElement))
    return null;
  return org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseTextFlow(this, textFlowElement);
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IFlowElement} flowElem
 * @param {XML} xmlToParse
 * @param {Array=} importers
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes = function(flowElem, xmlToParse, importers) {
  importers = typeof importers !== 'undefined' ? importers : null;
  if (importers == null)
    importers = org.apache.royale.textLayout.conversion.TextLayoutImporter._flowElementFormatImporters;
  this.parseAttributes(xmlToParse, importers);
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ textFormat = this.extractTextFormatAttributesHelper(flowElem.format, org.apache.royale.textLayout.conversion.TextLayoutImporter["formatImporter"]);
  if (textFormat) {
    
    flowElem.format = textFormat;
  }
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter["idImporter"].result)
    flowElem.id = org.apache.royale.textLayout.conversion.TextLayoutImporter["idImporter"].result;
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter["typeNameImporter"].result)
    flowElem.typeName = org.apache.royale.textLayout.conversion.TextLayoutImporter["typeNameImporter"].result;
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"].result) {
    for (var /** @type {string} */ styleName in org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"].result)
      flowElem.setStyle(styleName, org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"].result[styleName]);
  }
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createTextFlowFromXML = function(xmlToParse, textFlow) {
  textFlow = typeof textFlow !== 'undefined' ? textFlow : null;
  var /** @type {org.apache.royale.textLayout.elements.TextFlow} */ newFlow = null;
  if (!this.checkNamespace(xmlToParse))
    return newFlow;
  if (xmlToParse.hasOwnProperty("@version")) {
    var /** @type {string} */ version = org.apache.royale.utils.Language.string(xmlToParse.attribute('version'));
    if (version == "3.0.0")
      this._importVersion = org.apache.royale.textLayout.TextLayoutVersion.VERSION_3_0;
    else if (version == "2.0.0")
      this._importVersion = org.apache.royale.textLayout.TextLayoutVersion.VERSION_2_0;
    else if (version == "1.1.0" || version == "1.0.0")
      this._importVersion = org.apache.royale.textLayout.TextLayoutVersion.VERSION_1_0; else {
      this.reportError(org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("unsupportedVersion", [xmlToParse.attribute('version')])));
      this._importVersion = org.apache.royale.textLayout.TextLayoutVersion.CURRENT_VERSION;
    }
  }
  else
    this._importVersion = org.apache.royale.textLayout.TextLayoutVersion.VERSION_1_0;
  if (!newFlow)
    newFlow = new org.apache.royale.textLayout.elements.TextFlow(org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"]);
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(newFlow, xmlToParse);
  this.parseFlowGroupElementChildren(xmlToParse, newFlow);
  
  newFlow.normalize();
  newFlow.applyWhiteSpaceCollapse(null);
  return newFlow;
};


/**
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.IDivElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createDivFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.IDivElement} */ divElem = new org.apache.royale.textLayout.elements.DivElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(divElem, xmlToParse);
  return divElem;
};


/**
 * Create a table element from XML
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.ITableElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createTableFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.TableElement} */ tableElement = new org.apache.royale.textLayout.elements.TableElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(tableElement, xmlToParse);
  return tableElement;
};


/**
 * Create a table row element from XML
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.TableRowElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createTableRowFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.TableRowElement} */ tableRowElement = new org.apache.royale.textLayout.elements.TableRowElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(tableRowElement, xmlToParse);
  return tableRowElement;
};


/**
 * Create a table cell element from XML
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.TableCellElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createTableCellFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.TableCellElement} */ tableCellElement = new org.apache.royale.textLayout.elements.TableCellElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(tableCellElement, xmlToParse);
  return tableCellElement;
};


/**
 * Create a paragraph element from XML
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createParagraphFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paraElem = org.apache.royale.textLayout.elements.ElementHelper.getParagraph();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(paraElem, xmlToParse);
  return paraElem;
};


/**
 * Create a sub paragraph group element from XML
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.SubParagraphGroupElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createSubParagraphGroupFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.SubParagraphGroupElement} */ elem = new org.apache.royale.textLayout.elements.SubParagraphGroupElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(elem, xmlToParse);
  return elem;
};


/**
 * Create a tate chu yoko element from XML
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.TCYElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createTCYFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.TCYElement} */ tcyElem = new org.apache.royale.textLayout.elements.TCYElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(tcyElem, xmlToParse);
  return tcyElem;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.TLFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._linkFormatImporter;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._linkElementFormatImporters;


/** 
 * Parse a LinkElement Block.
 * 
 * @asparam - importFilter:BaseTextLayoutImporter - parser object
 * @asparam - xmlToParse:XML - the xml describing the Link
 * @asparam - parent:FlowBlockElement - the parent of the new Link
 * @asreturn LinkElement - a new LinkElement and its children
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.LinkElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createLinkFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.LinkElement} */ linkElem = new org.apache.royale.textLayout.elements.LinkElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(linkElem, xmlToParse, org.apache.royale.textLayout.conversion.TextLayoutImporter["linkElementFormatImporters"]);
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter["linkFormatImporter"].result) {
    linkElem.href = org.apache.royale.textLayout.conversion.TextLayoutImporter["linkFormatImporter"].result["href"];
    linkElem.target = org.apache.royale.textLayout.conversion.TextLayoutImporter["linkFormatImporter"].result["target"];
  }
  return linkElem;
};


/**
 * Create a span element from XML
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createSpanFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.SpanElement} */ spanElem = new org.apache.royale.textLayout.elements.SpanElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(spanElem, xmlToParse);
  return spanElem;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.conversion.TLFormatImporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgFormatImporter;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgElementFormatImporters;


/**
 * Create an inline graphic from XML
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.textLayout.elements.InlineGraphicElement}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createInlineGraphicFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.InlineGraphicElement} */ imgElem = new org.apache.royale.textLayout.elements.InlineGraphicElement();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(imgElem, xmlToParse, org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgElementFormatImporters"]);
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgFormatImporter"].result) {
    var /** @type {string} */ source = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgFormatImporter"].result["source"]);
    imgElem.source = this.org_apache_royale_textLayout_conversion_TextLayoutImporter__imageSourceResolveFunction != null ? this.org_apache_royale_textLayout_conversion_TextLayoutImporter__imageSourceResolveFunction(source) : source;
    imgElem.height = org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgFormatImporter"].result["height"];
    imgElem.width = org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgFormatImporter"].result["width"];
    imgElem.float = org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgFormatImporter"].result["float"];
  }
  return imgElem;
};


/**
 * Create a list element from XML
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createListFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.IListElement} */ rslt = org.apache.royale.textLayout.elements.ElementHelper.getList();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(rslt, xmlToParse);
  return rslt;
};


/**
 * Create a list item element from XML
 * @export
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createListItemFromXML = function(xmlToParse) {
  var /** @type {org.apache.royale.textLayout.elements.IListItemElement} */ rslt = org.apache.royale.textLayout.elements.ElementHelper.getListItem();
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter_parseStandardFlowElementAttributes(rslt, xmlToParse);
  return rslt;
};


/**
 * Extract text format attributes
 * @export
 * @param {Object} curAttrs
 * @param {org.apache.royale.textLayout.conversion.TLFormatImporter} importer
 * @return {Object}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.extractTextFormatAttributesHelper = function(curAttrs, importer) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.extractAttributesHelper(curAttrs, importer);
};


/** 
 * Parse an SPGE element
 * 
 * @asparam - importFilter:BaseTextLayoutImporter - parser object
 * @asparam - xmlToParse:XML - the xml describing the TCY Block
 * @asparam - parent:FlowBlockElement - the parent of the new TCY Block
 * @asreturn SubParagraphGroupElement - a new TCYBlockElement and its children
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseSPGE = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.SubParagraphGroupElement} */ elem = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createSubParagraphGroupFromXML(xmlToParse);
  if (importFilter.addChild(parent, elem)) {
    importFilter.parseFlowGroupElementChildren(xmlToParse, elem);
    if (elem.numChildren == 0)
      elem.addChild(new org.apache.royale.textLayout.elements.SpanElement());
  }
};


/** 
 * Parse a TCY Block.
 * 
 * @asparam - importFilter:BaseTextLayoutImporter - parser object
 * @asparam - xmlToParse:XML - the xml describing the TCY Block
 * @asparam - parent:FlowBlockElement - the parent of the new TCY Block
 * @asreturn TCYBlockElement - a new TCYBlockElement and its children
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTCY = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.TCYElement} */ tcyElem = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createTCYFromXML(xmlToParse);
  if (importFilter.addChild(parent, tcyElem)) {
    importFilter.parseFlowGroupElementChildren(xmlToParse, tcyElem);
    if (tcyElem.numChildren == 0)
      tcyElem.addChild(new org.apache.royale.textLayout.elements.SpanElement());
  }
};


/** 
 * Parse a LinkElement Block.
 * 
 * @asparam - importFilter:BaseTextLayoutImporter - parser object
 * @asparam - xmlToParse:XML - the xml describing the Link
 * @asparam - parent:FlowBlockElement - the parent of the new Link
 * @asreturn LinkElement - a new LinkElement and its children
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLink = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.LinkElement} */ linkElem = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createLinkFromXML(xmlToParse);
  if (importFilter.addChild(parent, linkElem)) {
    importFilter.parseFlowGroupElementChildren(xmlToParse, linkElem);
    if (linkElem.numChildren == 0)
      linkElem.addChild(new org.apache.royale.textLayout.elements.SpanElement());
  }
};


/**
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createDictionaryFromXML = function(xmlToParse) {
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"]];
  var /** @type {XMLList} */ formatList = xmlToParse.descendants(new QName(null,'TextLayoutFormat'));
  if (formatList.length() != 1)
    this.reportError(org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("expectedExactlyOneTextLayoutFormat", [xmlToParse.name()])));
  var /** @type {XML} */ parseThis = formatList.length() > 0 ? formatList[0] : xmlToParse;
  this.parseAttributes(parseThis, formatImporters);
  return org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"].result;
};


/**
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLinkNormalFormat = function(importFilter, xmlToParse, parent) {
  parent.linkNormalFormat = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createDictionaryFromXML(xmlToParse);
};


/**
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLinkActiveFormat = function(importFilter, xmlToParse, parent) {
  parent.linkActiveFormat = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createDictionaryFromXML(xmlToParse);
};


/**
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLinkHoverFormat = function(importFilter, xmlToParse, parent) {
  parent.linkHoverFormat = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createDictionaryFromXML(xmlToParse);
};


/**
 * @export
 * @param {XML} xmlToParse
 * @return {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.createListMarkerFormatDictionaryFromXML = function(xmlToParse) {
  var /** @type {Array} */ formatImporters = [org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"]];
  var /** @type {XMLList} */ formatList = xmlToParse.descendants(new QName(null,'ListMarkerFormat'));
  if (formatList.length() != 1)
    this.reportError(org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("expectedExactlyOneListMarkerFormat", [xmlToParse.name()])));
  var /** @type {XML} */ parseThis = formatList.length() > 0 ? formatList[0] : xmlToParse;
  this.parseAttributes(parseThis, formatImporters);
  return org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"].result;
};


/**
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseListMarkerFormat = function(importFilter, xmlToParse, parent) {
  parent.listMarkerFormat = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createListMarkerFormatDictionaryFromXML(xmlToParse);
};


/** 
 * Parse the <div ...> tag and all its children
 * 
 * @asparam - importFilter:BaseTextLayoutImportFilter - parser object
 * @asparam - xmlToParse:XML - the xml describing the Div
 * @asparam - parent:FlowBlockElement - the parent of the new Div
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseDivElement = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.IDivElement} */ divElem = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createDivFromXML(xmlToParse);
  if (importFilter.addChild(parent, divElem)) {
    importFilter.parseFlowGroupElementChildren(xmlToParse, divElem);
    if (divElem.numChildren == 0)
      divElem.addChild(org.apache.royale.textLayout.elements.ElementHelper.getParagraph());
  }
};


/** 
 * Parse a leaf element, the <img ...>  tag.
 * 
 * @asparam - importFilter:BaseTextLayoutImporter - parser object
 * @asparam - xmlToParse:XML - the xml describing the InlineGraphic FlowElement
 * @asparam - parent:FlowBlockElement - the parent of the new image FlowElement
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseInlineGraphic = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.InlineGraphicElement} */ ilg = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createInlineGraphicFromXML(xmlToParse);
  importFilter.addChild(parent, ilg);
};


/** 
 * Parse the <table ...> tag and all its children
 * 
 * @asparam - importFilter:BaseTextLayoutImportFilter - parser object
 * @asparam - xmlToParse:XML - the xml describing the Table
 * @asparam - parent:FlowBlockElement - the parent of the new Table
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTable = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ tableElement = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createTableFromXML(xmlToParse);
  if (importFilter.addChild(parent, tableElement)) {
    importFilter.parseFlowGroupElementChildren(xmlToParse, tableElement);
  }
};


/** 
 * Parse the <tr ...> tag (TableRowElement) and all its children
 * 
 * @asparam - importFilter:BaseTextLayoutImportFilter - parser object
 * @asparam - xmlToParse:XML - the xml describing the Table
 * @asparam - parent:FlowBlockElement - the parent of the new Table
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTableRow = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.TableRowElement} */ tableRowElement = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createTableRowFromXML(xmlToParse);
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table;
  if (importFilter.addChild(parent, tableRowElement)) {
    importFilter.parseFlowGroupElementChildren(xmlToParse, tableRowElement);
    table = tableRowElement.table;
    var /** @type {number} */ columnCount = tableRowElement.getColumnCount();
    if (table.numColumns < columnCount) {
      table.numColumns = columnCount;
    }
    table.insertRow(tableRowElement, tableRowElement.mxmlChildren);
  }
};


/** 
 * Parse the <td ...> or <th ...> tag (TableCellElement) and all its children
 * 
 * @asparam - importFilter:BaseTextLayoutImportFilter - parser object
 * @asparam - xmlToParse:XML - the xml describing the Table
 * @asparam - parent:FlowBlockElement - the parent of the new Table
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutImporter} importFilter
 * @param {XML} xmlToParse
 * @param {org.apache.royale.textLayout.elements.FlowGroupElement} parent
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTableCell = function(importFilter, xmlToParse, parent) {
  var /** @type {org.apache.royale.textLayout.elements.TableCellElement} */ tableCellElement = org.apache.royale.utils.Language.as(importFilter, org.apache.royale.textLayout.conversion.TextLayoutImporter, true).createTableCellFromXML(xmlToParse);
  if (importFilter.addChild(parent, tableCellElement)) {
    importFilter.parseTableCellElementChildren(xmlToParse, tableCellElement);
  }
  org.apache.royale.utils.Language.as(parent, org.apache.royale.textLayout.elements.TableRowElement, true).addCell(tableCellElement);
};


/**
 * Creates default text flow from the text value passed in. Used for table cell text flows. 
 * Used for testing. May be removed in the future. 
 * @export
 * @param {string=} text
 * @param {boolean=} selectable
 * @param {boolean=} editable
 * @return {org.apache.royale.textLayout.elements.TextFlow}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.getTextFlowContent = function(text, selectable, editable) {
  text = typeof text !== 'undefined' ? text : null;
  selectable = typeof selectable !== 'undefined' ? selectable : false;
  editable = typeof editable !== 'undefined' ? editable : false;
  var /** @type {org.apache.royale.textLayout.elements.TextFlow} */ textFlowContent = new org.apache.royale.textLayout.elements.TextFlow(org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"]);
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paragraph = org.apache.royale.textLayout.elements.ElementHelper.getParagraph();
  var /** @type {org.apache.royale.textLayout.elements.SpanElement} */ span = new org.apache.royale.textLayout.elements.SpanElement();
  if (text) {
    span.text = text;
  } else {
    span.text = "";
  }
  paragraph.backgroundAlpha = 0.2;
  paragraph.backgroundColor = 0xFF0000;
  paragraph.addChild(span);
  textFlowContent.addChild(paragraph);
  return textFlowContent;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.get__imageSourceResolveFunction = function() {
  return this.org_apache_royale_textLayout_conversion_TextLayoutImporter__imageSourceResolveFunction;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.set__imageSourceResolveFunction = function(resolver) {
  this.org_apache_royale_textLayout_conversion_TextLayoutImporter__imageSourceResolveFunction = resolver;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype, /** @lends {org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype} */ {
/**
  * @export
  * @type {Function} */
imageSourceResolveFunction: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.get__imageSourceResolveFunction,
set: org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.set__imageSourceResolveFunction}}
);


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__defaultConfiguration = function() {
  if (!org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration) {
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration = new org.apache.royale.textLayout.conversion.ImportExportConfiguration();
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("TextFlow", org.apache.royale.textLayout.elements.TextFlow, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseTextFlow, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportTextFlow);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("br", org.apache.royale.textLayout.elements.BreakElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseBreak, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportFlowElement);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("p", org.apache.royale.textLayout.elements.IParagraphElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parsePara, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportParagraphFormattedElement);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("span", org.apache.royale.textLayout.elements.SpanElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseSpan, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportSpan);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("tab", org.apache.royale.textLayout.elements.TabElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseTab, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportFlowElement);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("list", org.apache.royale.textLayout.elements.ListElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseList, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportList);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("li", org.apache.royale.textLayout.elements.ListItemElement, org.apache.royale.textLayout.conversion.BaseTextLayoutImporter.parseListItem, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportListItem);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("g", org.apache.royale.textLayout.elements.SubParagraphGroupElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseSPGE, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportSPGE);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("tcy", org.apache.royale.textLayout.elements.TCYElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTCY, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTCY);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("a", org.apache.royale.textLayout.elements.LinkElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLink, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportLink);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("div", org.apache.royale.textLayout.elements.DivElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseDivElement, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportDiv);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("img", org.apache.royale.textLayout.elements.InlineGraphicElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseInlineGraphic, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportImage);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("table", org.apache.royale.textLayout.elements.TableElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTable, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTable);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("tr", org.apache.royale.textLayout.elements.TableRowElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTableRow, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTableRow);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("th", org.apache.royale.textLayout.elements.TableCellElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTableCell, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTableCell);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("td", org.apache.royale.textLayout.elements.TableCellElement, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseTableCell, org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTableCell);
    
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("linkNormalFormat", null, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLinkNormalFormat, null);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("linkActiveFormat", null, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLinkActiveFormat, null);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("linkHoverFormat", null, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseLinkHoverFormat, null);
    org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration.addIEInfo("ListMarkerFormat", null, org.apache.royale.textLayout.conversion.TextLayoutImporter.parseListMarkerFormat, null);
  }
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._defaultConfiguration;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__formatImporter = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._formatImporter == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._formatImporter = new org.apache.royale.textLayout.conversion.TLFormatImporter(org.apache.royale.textLayout.formats.TextLayoutFormat, org.apache.royale.textLayout.formats.TextLayoutFormat["description"]);
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._formatImporter;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__idImporter = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._idImporter == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._idImporter = new org.apache.royale.textLayout.conversion.SingletonAttributeImporter("id");
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._idImporter;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__typeNameImporter = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._typeNameImporter == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._typeNameImporter = new org.apache.royale.textLayout.conversion.SingletonAttributeImporter("typeName");
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._typeNameImporter;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__customFormatImporter = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._customFormatImporter == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._customFormatImporter = new org.apache.royale.textLayout.conversion.CustomFormatImporter();
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._customFormatImporter;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__flowElementFormatImporters = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._flowElementFormatImporters == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._flowElementFormatImporters = [org.apache.royale.textLayout.conversion.TextLayoutImporter["formatImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["idImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["typeNameImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"]];
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._flowElementFormatImporters;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__linkFormatImporter = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._linkFormatImporter == null) {
    org.apache.royale.textLayout.conversion.TextLayoutImporter._linkFormatImporter = new org.apache.royale.textLayout.conversion.TLFormatImporter(org.apache.royale.utils.ObjectMap, {"href":org.apache.royale.textLayout.property.PropertyFactory.string("href", null, false, null), "target":org.apache.royale.textLayout.property.PropertyFactory.string("target", null, false, null)});
  }
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._linkFormatImporter;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__linkElementFormatImporters = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._linkElementFormatImporters == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._linkElementFormatImporters = [org.apache.royale.textLayout.conversion.TextLayoutImporter["linkFormatImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["formatImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["idImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["typeNameImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"]];
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._linkElementFormatImporters;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__ilgFormatImporter = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgFormatImporter == null)
    org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgFormatImporter = new org.apache.royale.textLayout.conversion.TLFormatImporter(org.apache.royale.utils.ObjectMap, {"height":org.apache.royale.textLayout.elements.InlineGraphicElement["heightPropertyDefinition"], "width":org.apache.royale.textLayout.elements.InlineGraphicElement["widthPropertyDefinition"], "source":org.apache.royale.textLayout.property.PropertyFactory.string("source", null, false, null), "float":org.apache.royale.textLayout.property.PropertyFactory.string("float", null, false, null), "rotation":org.apache.royale.textLayout.elements.InlineGraphicElement["rotationPropertyDefinition"]});
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgFormatImporter;
};


org.apache.royale.textLayout.conversion.TextLayoutImporter.get__ilgElementFormatImporters = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgElementFormatImporters == null) {
    org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgElementFormatImporters = [org.apache.royale.textLayout.conversion.TextLayoutImporter["ilgFormatImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["formatImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["idImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["typeNameImporter"], org.apache.royale.textLayout.conversion.TextLayoutImporter["customFormatImporter"]];
  }
  return org.apache.royale.textLayout.conversion.TextLayoutImporter._ilgElementFormatImporters;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.TextLayoutImporter, /** @lends {org.apache.royale.textLayout.conversion.TextLayoutImporter} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.ImportExportConfiguration} */
defaultConfiguration: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__defaultConfiguration},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.TLFormatImporter} */
formatImporter: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__formatImporter},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.SingletonAttributeImporter} */
idImporter: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__idImporter},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.SingletonAttributeImporter} */
typeNameImporter: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__typeNameImporter},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.CustomFormatImporter} */
customFormatImporter: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__customFormatImporter},
/**
  * @export
  * @type {Array} */
flowElementFormatImporters: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__flowElementFormatImporters},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.TLFormatImporter} */
linkFormatImporter: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__linkFormatImporter},
/**
  * @export
  * @type {Array} */
linkElementFormatImporters: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__linkElementFormatImporters},
/**
  * @export
  * @type {org.apache.royale.textLayout.conversion.TLFormatImporter} */
ilgFormatImporter: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__ilgFormatImporter},
/**
  * @export
  * @type {Array} */
ilgElementFormatImporters: {
get: org.apache.royale.textLayout.conversion.TextLayoutImporter.get__ilgElementFormatImporters}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextLayoutImporter', qName: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', kind: 'class' }], interfaces: [org.apache.royale.textLayout.conversion.ITextLayoutImporter] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|defaultConfiguration': { type: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter'},
        'imageSourceResolveFunction': { type: 'Function', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter'}
      };
    },
    methods: function () {
      return {
        '|restoreDefaults': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter'},
        'TextLayoutImporter': { type: '', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter'},
        'createTextFlowFromXML': { type: 'org.apache.royale.textLayout.elements.TextFlow', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ,'org.apache.royale.textLayout.elements.TextFlow', true ]; }},
        'createDivFromXML': { type: 'org.apache.royale.textLayout.elements.IDivElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createTableFromXML': { type: 'org.apache.royale.textLayout.elements.ITableElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createTableRowFromXML': { type: 'org.apache.royale.textLayout.elements.TableRowElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createTableCellFromXML': { type: 'org.apache.royale.textLayout.elements.TableCellElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createParagraphFromXML': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createSubParagraphGroupFromXML': { type: 'org.apache.royale.textLayout.elements.SubParagraphGroupElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createTCYFromXML': { type: 'org.apache.royale.textLayout.elements.TCYElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createLinkFromXML': { type: 'org.apache.royale.textLayout.elements.LinkElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createSpanFromXML': { type: 'org.apache.royale.textLayout.elements.ISpanElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createInlineGraphicFromXML': { type: 'org.apache.royale.textLayout.elements.InlineGraphicElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createListFromXML': { type: 'org.apache.royale.textLayout.elements.IListElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'createListItemFromXML': { type: 'org.apache.royale.textLayout.elements.IListItemElement', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        'extractTextFormatAttributesHelper': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'Object', false ,'org.apache.royale.textLayout.conversion.TLFormatImporter', false ]; }},
        '|parseSPGE': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseTCY': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseLink': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        'createDictionaryFromXML': { type: 'org.apache.royale.utils.ObjectMap', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parseLinkNormalFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseLinkActiveFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseLinkHoverFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        'createListMarkerFormatDictionaryFromXML': { type: 'org.apache.royale.utils.ObjectMap', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'XML', false ]; }},
        '|parseListMarkerFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseDivElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseInlineGraphic': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseTable': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseTableRow': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|parseTableCell': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutImporter', false ,'XML', false ,'org.apache.royale.textLayout.elements.FlowGroupElement', false ]; }},
        '|getTextFlowContent': { type: 'org.apache.royale.textLayout.elements.TextFlow', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutImporter', parameters: function () { return [ 'String', true ,'Boolean', true ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.TextLayoutImporter.prototype.ROYALE_COMPILE_FLAGS = 10;
