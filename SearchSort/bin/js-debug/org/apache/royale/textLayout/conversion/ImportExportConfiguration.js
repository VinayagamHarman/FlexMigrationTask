/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/ImportExportConfiguration.as
 * org.apache.royale.textLayout.conversion.ImportExportConfiguration
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.ImportExportConfiguration');
/* Royale Dependency List: org.apache.royale.textLayout.conversion.FlowElementInfo,org.apache.royale.textLayout.formats.WhiteSpaceCollapse,XML*/




/** 
 * Constructor.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration = function() {

this.flowElementInfoList = {};
this.flowElementClassList = {};
this.classToNameMap = {};
this.whiteSpaceCollapse = org.apache.royale.textLayout.formats.WhiteSpaceCollapse.PRESERVE;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.ImportExportConfiguration', org.apache.royale.textLayout.conversion.ImportExportConfiguration);


/**
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.flowElementInfoList;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.flowElementClassList;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.classToNameMap;


/**
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.whiteSpaceCollapse;


/** 
 * Add a parser for a new FlowElement type. This allows FlowElements to be added from outside the main system,
 * and still have the main system be able to import them from XML.
 * 
 * @asparam name		the name of the FlowElement class, as it appear in the XML
 * @asparam flowClass	the class of the FlowElement
 * @asparam parser	function fpr importing the XML into a FlowElement
 * @asparam exporter  function for exporting a FlowElement into XML
 * @asprivate
 * @export
 * @param {string} name
 * @param {Object} flowClass
 * @param {Function} parser
 * @param {Function} exporter
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.addIEInfo = function(name, flowClass, parser, exporter) {
  var /** @type {org.apache.royale.textLayout.conversion.FlowElementInfo} */ info = new org.apache.royale.textLayout.conversion.FlowElementInfo(flowClass, parser, exporter);
  if (name) {
    
    this.flowElementInfoList[name] = info;
  }
  if (flowClass) {
    
    this.flowElementClassList[info.flowClassName] = info;
  }
  if (name && flowClass)
    this.classToNameMap[info.flowClassName] = name;
};


/** 
 * Return the information being held about the FlowElement, as a FlowElementInfo.
 * 
 * @asparam name				the name of the FlowElement class, as it appears in the XML
 * @asreturn FlowElementInfo	the information being held, as it was supplied to addParseInfo
 * @asprivate
 * @export
 * @param {string} name
 * @return {org.apache.royale.textLayout.conversion.FlowElementInfo}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.lookup = function(name) {
  return this.flowElementInfoList[name];
};


/** 
 * Return the element name for the class
 * 
 * @asparam classToMatch		fully qualified class name of the FlowElement
 * @asreturn name				export name to use for class
 * @asprivate
 * @export
 * @param {string} classToMatch
 * @return {string}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.lookupName = function(classToMatch) {
  return org.apache.royale.utils.Language.string(this.classToNameMap[classToMatch]);
};


/** 
 * Return the information being held about the FlowElement, as a FlowElementInfo.
 * 
 * @asparam classToMatch		fully qualified class name of the FlowElement
 * @asreturn FlowElementInfo	the information being held, as it was supplied to addParseInfo
 * @asprivate
 * @export
 * @param {string} classToMatch
 * @return {org.apache.royale.textLayout.conversion.FlowElementInfo}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.lookupByClass = function(classToMatch) {
  return this.flowElementClassList[classToMatch];
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ImportExportConfiguration', qName: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'flowElementInfoList': { type: 'Object', get_set: function (/** org.apache.royale.textLayout.conversion.ImportExportConfiguration */ inst, /** * */ v) {return v !== undefined ? inst.flowElementInfoList = v : inst.flowElementInfoList;}},
        'flowElementClassList': { type: 'Object', get_set: function (/** org.apache.royale.textLayout.conversion.ImportExportConfiguration */ inst, /** * */ v) {return v !== undefined ? inst.flowElementClassList = v : inst.flowElementClassList;}},
        'classToNameMap': { type: 'Object', get_set: function (/** org.apache.royale.textLayout.conversion.ImportExportConfiguration */ inst, /** * */ v) {return v !== undefined ? inst.classToNameMap = v : inst.classToNameMap;}},
        'whiteSpaceCollapse': { type: 'String', get_set: function (/** org.apache.royale.textLayout.conversion.ImportExportConfiguration */ inst, /** * */ v) {return v !== undefined ? inst.whiteSpaceCollapse = v : inst.whiteSpaceCollapse;}}
      };
    },
    methods: function () {
      return {
        'ImportExportConfiguration': { type: '', declaredBy: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration'},
        'addIEInfo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', parameters: function () { return [ 'String', false ,'Class', false ,'Function', false ,'Function', false ]; }},
        'lookup': { type: 'org.apache.royale.textLayout.conversion.FlowElementInfo', declaredBy: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', parameters: function () { return [ 'String', false ]; }},
        'lookupName': { type: 'String', declaredBy: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', parameters: function () { return [ 'String', false ]; }},
        'lookupByClass': { type: 'org.apache.royale.textLayout.conversion.FlowElementInfo', declaredBy: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.ImportExportConfiguration.prototype.ROYALE_COMPILE_FLAGS = 10;
