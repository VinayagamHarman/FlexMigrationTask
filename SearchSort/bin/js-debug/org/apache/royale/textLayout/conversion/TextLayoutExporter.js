/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/TextLayoutExporter.as
 * org.apache.royale.textLayout.conversion.TextLayoutExporter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.TextLayoutExporter');
/* Royale Dependency List: Namespace,XML,XMLList,org.apache.royale.textLayout.conversion.TextLayoutImporter,org.apache.royale.textLayout.elements.IDivElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.InlineGraphicElement,org.apache.royale.textLayout.elements.LinkElement,org.apache.royale.textLayout.elements.SubParagraphGroupElement,org.apache.royale.textLayout.elements.TCYElement,org.apache.royale.textLayout.elements.TableCellElement,org.apache.royale.textLayout.elements.TableElement,org.apache.royale.textLayout.elements.TableRowElement,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ListMarkerFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.property.Property,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.textLayout.conversion.BaseTextLayoutExporter');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter = function() {
  org.apache.royale.textLayout.conversion.TextLayoutExporter.base(this, 'constructor', new Namespace("http://ns.adobe.com/textLayout/2008"), null, org.apache.royale.textLayout.conversion.TextLayoutImporter["defaultConfiguration"]);
};
goog.inherits(org.apache.royale.textLayout.conversion.TextLayoutExporter, org.apache.royale.textLayout.conversion.BaseTextLayoutExporter);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.TextLayoutExporter', org.apache.royale.textLayout.conversion.TextLayoutExporter);


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter._formatDescription_;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.brTabRegEx = new RegExp("[" + "\u2028" + "\t" + "]");


/** Gets the xml element used to represent a character in the export format
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.getSpanTextReplacementXML = function(ch) {
  var /** @type {XML} */ replacementXML;
  if (ch == '\u2028')
    replacementXML = new XML( '<br/>');
  else if (ch == '\t')
    replacementXML = new XML( '<tab/>'); else {
    
    return null;
  }
  replacementXML.setNamespace(this.flowNS);
  return replacementXML;
};


/** 
 * Helper function to export styles (core or user) in the form of xml attributes or xml children
 * 
 * @export
 * @param {Object} styles
 * @param {Object} description
 * @param {boolean} includeUserStyles
 * @param {Array} exclusions
 * @return {Array}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.createStylesFromDescription = function(styles, description, includeUserStyles, exclusions) {
  var /** @type {Array} */ sortableStyles = [];
  for (var /** @type {string} */ key in styles) {
    var /** @type {Object} */ val = styles[key];
    if (exclusions && exclusions.indexOf(val) != -1)
      continue;
    var /** @type {org.apache.royale.textLayout.property.Property} */ prop = description[key];
    if (!prop) {
      if (includeUserStyles) {
        if (org.apache.royale.utils.Language.is(val, String) || val.hasOwnProperty("toString")) {
          sortableStyles.push({xmlName:key, xmlVal:val});
        }
      }
    } else if (org.apache.royale.utils.Language.is(val, org.apache.royale.textLayout.formats.TextLayoutFormat)) {
      var /** @type {XMLList} */ customDictProp = this.exportObjectAsTextLayoutFormat(key, val.getStyles());
      if (customDictProp)
        sortableStyles.push({xmlName:key, xmlVal:customDictProp});
    }
    else
      sortableStyles.push({xmlName:key, xmlVal:prop.toXMLString(val)});
  }
  return sortableStyles;
};


/**
 * @export
 * @param {string} key
 * @param {Object} styleDict
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.exportObjectAsTextLayoutFormat = function(key, styleDict) {
  var /** @type {string} */ elementName;
  var /** @type {Object} */ description;
  if (key == "linkNormalFormat" || key == "linkActiveFormat" || key == "linkHoverFormat") {
    elementName = "TextLayoutFormat";
    description = org.apache.royale.textLayout.formats.TextLayoutFormat["description"];
  } else if (key == "ListMarkerFormat") {
    elementName = "ListMarkerFormat";
    description = org.apache.royale.textLayout.formats.ListMarkerFormat["description"];
  }
  if (elementName == null)
    return null;
  var /** @type {XML} */ formatXML = new XML( '<' + elementName + '/>');
  formatXML.setNamespace(this.flowNS);
  var /** @type {Array} */ sortableStyles = this.createStylesFromDescription(styleDict, description, true, null);
  this.exportStyles(XMLList.conversion(formatXML), sortableStyles);
  var /** @type {XMLList} */ propertyXML = XMLList.conversion(new XML( '<' + key + '/>'));
  propertyXML.appendChild(formatXML);
  return propertyXML;
};


/**
 * @protected
 * @override
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.exportFlowElement = function(flowElement) {
  var /** @type {XMLList} */ rslt = org.apache.royale.textLayout.conversion.TextLayoutExporter.superClass_.exportFlowElement.apply(this, [ flowElement] );
  var /** @type {Object} */ allStyles = flowElement.styles;
  if (allStyles) {
    delete allStyles[org.apache.royale.textLayout.formats.TextLayoutFormat["whiteSpaceCollapseProperty"].name];
    var /** @type {Array} */ sortableStyles = this.createStylesFromDescription(allStyles, this.formatDescription, true, flowElement.parent ? null : [org.apache.royale.textLayout.formats.FormatValue.INHERIT]);
    this.exportStyles(rslt, sortableStyles);
  }
  if (flowElement.id != null)
    rslt.setAttribute('id', flowElement.id);
  if (flowElement.typeName != flowElement.defaultTypeName)
    rslt.setAttribute('typeName', flowElement.typeName);
  return rslt;
};


/** 
 * Base functionality for exporting an Image. Exports as a FlowElement,
 * and exports image properties.
 * 
 * @asparam exporter	Root object for the export
 * @asparam image	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.InlineGraphicElement} image
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportImage = function(exporter, image) {
  var /** @type {XMLList} */ output = org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportFlowElement(exporter, image);
  if (image.height !== undefined)
    output.setAttribute('height', image.height);
  if (image.width !== undefined)
    output.setAttribute('width', image.width);
  if (image.source != null)
    output.setAttribute('source', image.source);
  if (image.float != undefined)
    output.setAttribute('float', image.float);
  return output;
};


/** 
 * Base functionality for exporting a LinkElement. Exports as a FlowGroupElement,
 * and exports link properties.
 * 
 * @asparam exporter	Root object for the export
 * @asparam link	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.LinkElement} link
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportLink = function(exporter, link) {
  var /** @type {XMLList} */ output = org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportFlowGroupElement(exporter, link);
  if (link.href)
    output.setAttribute('href', link.href);
  if (link.target)
    output.setAttribute('target', link.target);
  return output;
};


/** 
 * Base functionality for exporting a IDivElement. Exports as a FlowContainerFormattedElement
 * 
 * @asparam exporter	Root object for the export
 * @asparam div	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.IDivElement} div
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportDiv = function(exporter, div) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportContainerFormattedElement(exporter, div);
};


/** 
 * Base functionality for exporting a SubParagraphGroupElement. Exports as a FlowGroupElement
 * 
 * @asparam exporter	Root object for the export
 * @asparam elem	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.SubParagraphGroupElement} elem
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportSPGE = function(exporter, elem) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportFlowGroupElement(exporter, elem);
};


/** 
 * Base functionality for exporting a TCYElement. Exports as a FlowGroupElement
 * 
 * @asparam exporter	Root object for the export
 * @asparam tcy	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.TCYElement} tcy
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTCY = function(exporter, tcy) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportFlowGroupElement(exporter, tcy);
};


/** 
 * Base functionality for exporting a TableElement. 
 * 
 * @asparam exporter	Root object for the export
 * @asparam table	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.TableElement} table
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTable = function(exporter, table) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportTableElement(exporter, table);
};


/** 
 * Base functionality for exporting a TableRowElement. 
 * 
 * @asparam exporter	Root object for the export
 * @asparam table	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.TableRowElement} tableRow
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTableRow = function(exporter, tableRow) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportTableRowElement(exporter, tableRow);
};


/** 
 * Base functionality for exporting a TableCellElement. 
 * 
 * @asparam exporter	Root object for the export
 * @asparam table	Element to export
 * @asreturn XMLList	XML for the element
 * @export
 * @param {org.apache.royale.textLayout.conversion.BaseTextLayoutExporter} exporter
 * @param {org.apache.royale.textLayout.elements.TableCellElement} tableCell
 * @return {XMLList}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.exportTableCell = function(exporter, tableCell) {
  return org.apache.royale.textLayout.conversion.BaseTextLayoutExporter.exportTableCellElement(exporter, tableCell);
};


org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.get__spanTextReplacementRegex = function() {
  return org.apache.royale.textLayout.conversion.TextLayoutExporter.brTabRegEx;
};


org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.get__formatDescription = function() {
  return org.apache.royale.textLayout.conversion.TextLayoutExporter["_formatDescription"];
};


Object.defineProperties(org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype, /** @lends {org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype} */ {
/**
  * @type {RegExp} */
spanTextReplacementRegex: {
get: org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.get__spanTextReplacementRegex},
/**
  * @type {Object} */
formatDescription: {
get: org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.get__formatDescription}}
);


org.apache.royale.textLayout.conversion.TextLayoutExporter.get___formatDescription = function() {
  if (org.apache.royale.textLayout.conversion.TextLayoutExporter._formatDescription_ == null) {
    org.apache.royale.textLayout.conversion.TextLayoutExporter._formatDescription_ = org.apache.royale.textLayout.formats.TextLayoutFormat["description"];
  }
  return org.apache.royale.textLayout.conversion.TextLayoutExporter._formatDescription_;
};


Object.defineProperties(org.apache.royale.textLayout.conversion.TextLayoutExporter, /** @lends {org.apache.royale.textLayout.conversion.TextLayoutExporter} */ {
/**
  * @export
  * @type {Object} */
_formatDescription: {
get: org.apache.royale.textLayout.conversion.TextLayoutExporter.get___formatDescription}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextLayoutExporter', qName: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'TextLayoutExporter': { type: '', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter'},
        'createStylesFromDescription': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'Object', false ,'Object', false ,'Boolean', false ,'Array', false ]; }},
        'exportObjectAsTextLayoutFormat': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'String', false ,'Object', false ]; }},
        '|exportImage': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.InlineGraphicElement', false ]; }},
        '|exportLink': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.LinkElement', false ]; }},
        '|exportDiv': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.IDivElement', false ]; }},
        '|exportSPGE': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.SubParagraphGroupElement', false ]; }},
        '|exportTCY': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.TCYElement', false ]; }},
        '|exportTable': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.TableElement', false ]; }},
        '|exportTableRow': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.TableRowElement', false ]; }},
        '|exportTableCell': { type: 'XMLList', declaredBy: 'org.apache.royale.textLayout.conversion.TextLayoutExporter', parameters: function () { return [ 'org.apache.royale.textLayout.conversion.BaseTextLayoutExporter', false ,'org.apache.royale.textLayout.elements.TableCellElement', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.TextLayoutExporter.prototype.ROYALE_COMPILE_FLAGS = 10;
