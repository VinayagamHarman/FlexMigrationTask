/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/conversion/ITextExporter.as
 * org.apache.royale.textLayout.conversion.ITextExporter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.conversion.ITextExporter');
/* Royale Dependency List: org.apache.royale.textLayout.conversion.ImportExportConfiguration,org.apache.royale.textLayout.elements.ITextFlow,XML*/




/**
 * @interface
 */
org.apache.royale.textLayout.conversion.ITextExporter = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.conversion.ITextExporter', org.apache.royale.textLayout.conversion.ITextExporter);
/** 
 * Export text content from a TextFlow instance in String, or XML, or a user defined format.
 * <p>Set the <code>conversionType</code> parameter to either of the following values,
 * or a user defined format in user-defined exporters.
 * <ul>
 *   <li><code>org.apache.royale.textLayout.conversion.ConversionType.STRING_TYPE</code>;</li>
 *   <li><code>org.apache.royale.textLayout.conversion.ConversionType.XML_TYPE</code>.</li>
 * </ul>
 * </p>
 * @asparam source	The TextFlow to export
 * @asparam conversionType 	Return a String (STRING_TYPE) or XML (XML_TYPE), or any user defined format.
 * @asreturn Object	The exported content
 * @see org.apache.royale.textLayout.conversion.ConversionType
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} source
 * @param {string} conversionType
 * @return {Object}
 */
org.apache.royale.textLayout.conversion.ITextExporter.prototype.export = function(source, conversionType) {
};
/**  * @type {Array}
 */org.apache.royale.textLayout.conversion.ITextExporter.prototype.errors;
/**  * @type {boolean}
 */org.apache.royale.textLayout.conversion.ITextExporter.prototype.throwOnError;
/**  * @type {boolean}
 */org.apache.royale.textLayout.conversion.ITextExporter.prototype.useClipboardAnnotations;
/**  * @type {org.apache.royale.textLayout.conversion.ImportExportConfiguration}
 */org.apache.royale.textLayout.conversion.ITextExporter.prototype.config;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.conversion.ITextExporter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ITextExporter', qName: 'org.apache.royale.textLayout.conversion.ITextExporter', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.conversion.ITextExporter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'errors': { type: 'Vector.<String>', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.conversion.ITextExporter'},
        'throwOnError': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.ITextExporter'},
        'useClipboardAnnotations': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.ITextExporter'},
        'config': { type: 'org.apache.royale.textLayout.conversion.ImportExportConfiguration', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.conversion.ITextExporter'}
      };
    },
    methods: function () {
      return {
        'export': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.conversion.ITextExporter', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.conversion.ITextExporter.prototype.ROYALE_COMPILE_FLAGS = 10;
