/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/container/TextContainerManager.as
 * org.apache.royale.textLayout.container.TextContainerManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.container.TextContainerManager');
/* Royale Dependency List: org.apache.royale.core.IChild,org.apache.royale.core.IParentIUIBase,org.apache.royale.core.IUIBase,org.apache.royale.events.Event,org.apache.royale.events.KeyboardEvent,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.events.IMEEvent,org.apache.royale.text.events.TextEvent,org.apache.royale.textLayout.compose.ISimpleCompose,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.SWFContext,org.apache.royale.textLayout.compose.TextLineRecycler,org.apache.royale.textLayout.compose.utils.FactoryHelper,org.apache.royale.textLayout.compose.utils.StandardHelper,org.apache.royale.textLayout.container.ContainerController,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.container.ScrollPolicy,org.apache.royale.textLayout.container.TMContainerController,org.apache.royale.textLayout.dummy.ContextMenu,org.apache.royale.textLayout.dummy.Mouse,org.apache.royale.textLayout.dummy.MouseCursor,org.apache.royale.textLayout.edit.EditManager,org.apache.royale.textLayout.edit.EditingMode,org.apache.royale.textLayout.edit.IEditManager,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.edit.SelectionFormat,org.apache.royale.textLayout.edit.SelectionManager,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.elements.Configuration,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.IConfiguration,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TextFlow,org.apache.royale.textLayout.events.CompositionCompleteEvent,org.apache.royale.textLayout.events.ContextMenuEvent,org.apache.royale.textLayout.events.DamageEvent,org.apache.royale.textLayout.events.FlowOperationEvent,org.apache.royale.textLayout.events.FocusEvent,org.apache.royale.textLayout.events.SelectionEvent,org.apache.royale.textLayout.events.StatusChangeEvent,org.apache.royale.textLayout.events.TextLayoutEvent,org.apache.royale.textLayout.events.UpdateCompleteEvent,org.apache.royale.textLayout.factory.StringTextLineFactory,org.apache.royale.textLayout.factory.TCMTextFlowTextLineFactory,org.apache.royale.textLayout.factory.TLFFactory,org.apache.royale.textLayout.factory.TextLineFactoryBase,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.property.Property,org.apache.royale.textLayout.property.PropertyFactory,org.apache.royale.textLayout.utils.FactoryUtil,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.PointUtils,org.apache.royale.utils.undo.IUndoManager,org.apache.royale.utils.undo.UndoManager,org.apache.royale.utils.Language,XML*/
goog.provide('org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent');

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.events.MouseEvent');
goog.require('org.apache.royale.textLayout.compose.ISWFContext');
goog.require('org.apache.royale.textLayout.container.ISandboxSupport');
goog.require('org.apache.royale.textLayout.container.ITextContainerManager');
goog.require('org.apache.royale.textLayout.edit.IInteractionEventHandler');



/** Constructor function - creates a TextContainerManager instance.
 *
 * For best results:
 * <ol>
 *	<li>Start with TextContainerManager.defaultConfiguration and modify it</li>   
 *	<li>Share the same Configuration among many InputManagers</li>
 * </ol>
 *
 * @asparam container The DisplayObjectContainer in which to manage the text lines.
 * @asparam config - The IConfiguration instance to use with this TextContainerManager instance. 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0	 	
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.textLayout.compose.ISWFContext}
 * @implements {org.apache.royale.textLayout.edit.IInteractionEventHandler}
 * @implements {org.apache.royale.textLayout.container.ISandboxSupport}
 * @implements {org.apache.royale.textLayout.container.ITextContainerManager}
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {org.apache.royale.textLayout.elements.IConfiguration=} configuration
 */
org.apache.royale.textLayout.container.TextContainerManager = function(container, configuration) {
  org.apache.royale.textLayout.container.TextContainerManager.base(this, 'constructor');
  configuration = typeof configuration !== 'undefined' ? configuration : null;
  
  this.org_apache_royale_textLayout_container_TextContainerManager_eventList = [org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN, org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END, org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE, org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE, org.apache.royale.textLayout.events.CompositionCompleteEvent.COMPOSITION_COMPLETE, org.apache.royale.events.MouseEvent.CLICK, org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.events.MouseEvent.MOUSE_OUT, org.apache.royale.events.MouseEvent.MOUSE_UP, org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.events.MouseEvent.MOUSE_OUT, org.apache.royale.textLayout.events.StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE, org.apache.royale.textLayout.events.TextLayoutEvent.SCROLL, org.apache.royale.textLayout.events.DamageEvent.DAMAGE, org.apache.royale.textLayout.events.UpdateCompleteEvent.UPDATE_COMPLETE];
  this.editingModePropertyDefinition = org.apache.royale.textLayout.property.PropertyFactory.enumString("editingMode", org.apache.royale.textLayout.edit.EditingMode.READ_WRITE, false, null, org.apache.royale.textLayout.edit.EditingMode.READ_WRITE, org.apache.royale.textLayout.edit.EditingMode.READ_ONLY, org.apache.royale.textLayout.edit.EditingMode.READ_SELECT);
  this._composedLines = [];
  this.org_apache_royale_textLayout_container_TextContainerManager__container = container;
  this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth = 100;
  this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight = 100;
  this.org_apache_royale_textLayout_container_TextContainerManager__config = configuration ? org.apache.royale.textLayout.container.TextContainerManager.customizeConfiguration(configuration) : org.apache.royale.textLayout.container.TextContainerManager["defaultConfiguration"];
  this.org_apache_royale_textLayout_container_TextContainerManager__config = this.org_apache_royale_textLayout_container_TextContainerManager__config.getImmutableClone();
  this.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy = this.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy = String(org.apache.royale.textLayout.container.ScrollPolicy["scrollPolicyPropertyDefinition"].defaultValue);
  this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
  this.org_apache_royale_textLayout_container_TextContainerManager__needsRedraw = false;
  this.org_apache_royale_textLayout_container_TextContainerManager__text = "";
  this.org_apache_royale_textLayout_container_TextContainerManager__textDamaged = false;
  this.org_apache_royale_textLayout_container_TextContainerManager__sourceState = org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING;
  this.org_apache_royale_textLayout_container_TextContainerManager__composeState = org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY;
  this.org_apache_royale_textLayout_container_TextContainerManager__handlersState = org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NOTADDED;
  this.org_apache_royale_textLayout_container_TextContainerManager__hasFocus = false;
  this.org_apache_royale_textLayout_container_TextContainerManager__editingMode = this.editingModePropertyDefinition.defaultValue;
  this.org_apache_royale_textLayout_container_TextContainerManager__ibeamCursorSet = false;
  this.org_apache_royale_textLayout_container_TextContainerManager__interactionCount = 0;
};
goog.inherits(org.apache.royale.textLayout.container.TextContainerManager, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.container.TextContainerManager', org.apache.royale.textLayout.container.TextContainerManager);


/**
 * @private
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_eventList;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.container.TextContainerManager._defaultConfiguration = null;


/** @asprivate Make a configuration acceptable to the TCM 
 * @export
 * @param {org.apache.royale.textLayout.elements.IConfiguration} config
 * @return {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.container.TextContainerManager.customizeConfiguration = function(config) {
  var /** @type {org.apache.royale.textLayout.elements.IConfiguration} */ newConfig;
  if (config) {
    if (config.flowComposerClass == org.apache.royale.textLayout.utils.FactoryUtil.getDefaultFlowComposerClass())
      return config;
    newConfig = config.clone();
  }
  else
    newConfig = new org.apache.royale.textLayout.elements.Configuration();
  newConfig.flowComposerClass = org.apache.royale.textLayout.utils.FactoryUtil.getDefaultFlowComposerClass();
  return newConfig;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.factory.TCMTextFlowTextLineFactory}
 */
org.apache.royale.textLayout.container.TextContainerManager._inputManagerTextFlowFactory;


/**
 * @private
 * @return {org.apache.royale.textLayout.factory.TCMTextFlowTextLineFactory}
 */
org.apache.royale.textLayout.container.TextContainerManager.inputManagerTextFlowFactory = function() {
  if (!org.apache.royale.textLayout.container.TextContainerManager._inputManagerTextFlowFactory)
    org.apache.royale.textLayout.container.TextContainerManager._inputManagerTextFlowFactory = new org.apache.royale.textLayout.factory.TCMTextFlowTextLineFactory();
  return org.apache.royale.textLayout.container.TextContainerManager._inputManagerTextFlowFactory;
};


/**
 * @private
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.container.TextContainerManager.stringFactoryDictionary;


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IConfiguration} config
 * @return {org.apache.royale.textLayout.factory.StringTextLineFactory}
 */
org.apache.royale.textLayout.container.TextContainerManager.inputManagerStringFactory = function(config) {
  if (!org.apache.royale.textLayout.container.TextContainerManager.stringFactoryDictionary)
    org.apache.royale.textLayout.container.TextContainerManager.stringFactoryDictionary = new org.apache.royale.utils.ObjectMap(true);
  var /** @type {org.apache.royale.textLayout.factory.StringTextLineFactory} */ factory = org.apache.royale.textLayout.container.TextContainerManager.stringFactoryDictionary[config];
  if (factory == null) {
    factory = new org.apache.royale.textLayout.factory.StringTextLineFactory(config);
    org.apache.royale.textLayout.container.TextContainerManager.stringFactoryDictionary[config] = factory;
  }
  return factory;
};


/** @asprivate Method to release all references to factories so they can be gc'ed, for example when Flex unloads a module. 
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.releaseReferences = function() {
  org.apache.royale.textLayout.container.TextContainerManager.stringFactoryDictionary = null;
  org.apache.royale.textLayout.container.TextContainerManager._inputManagerTextFlowFactory = null;
};


/**
 * @export
 * @const
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.editingModePropertyDefinition;


/**
 * @private
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__container;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__text;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__textDamaged;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__lastSeparator;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__hostFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__contentTop;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__contentLeft;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__contentHeight;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__contentWidth;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy;


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__swfContext;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__config;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__preserveSelectionOnSetText = false;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING = 0;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW = 1;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY = 0;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER = 1;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NOTADDED = 0;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NONE = 1;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_CREATION = 2;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_ACTIVE = 3;


/**
 * @export
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_MOUSEWHEEL = 4;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__sourceState = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__composeState = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__handlersState = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__hasFocus;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__editingMode;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__ibeamCursorSet;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__interactionCount = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__damaged;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__textFlow;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__needsRedraw;


/** Returns <code>true</code> if the content needs composing. 
 * 
 * @asreturn	<code>true</code> if the content needs composing; <code>false</code> otherwise.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.isDamaged = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY ? this.org_apache_royale_textLayout_container_TextContainerManager__damaged : this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.isPotentiallyDamaged(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.textLength);
};


/**
 * Returns the current text using a separator between paragraphs.
 * The separator can be specified with the <code>separator</code>
 * argument. The default value of the <code>separator</code> argument
 * is the Unicode character <code>'PARAGRAPH SEPARATOR' (U+2029)</code>.
 *
 * <p>Calling the setter discards any attached ITextFlow. Any selection is lost.</p>
 * 
 * @asparam separator String to set between paragraphs.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string=} separator
 * @return {string}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getText = function(separator) {
  separator = typeof separator !== 'undefined' ? separator : '\u2029';
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING)
    return this.org_apache_royale_textLayout_container_TextContainerManager__text;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__textDamaged || this.org_apache_royale_textLayout_container_TextContainerManager__lastSeparator != separator) {
    this.org_apache_royale_textLayout_container_TextContainerManager__text = "";
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ firstLeaf = this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.getFirstLeaf();
    if (firstLeaf != null) {
      var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = firstLeaf.getParagraph();
      while (para) {
        var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ nextPara = para.getNextParagraph();
        this.org_apache_royale_textLayout_container_TextContainerManager__text += para.getText();
        this.org_apache_royale_textLayout_container_TextContainerManager__text += nextPara ? separator : "";
        para = nextPara;
      }
    }
    this.org_apache_royale_textLayout_container_TextContainerManager__textDamaged = false;
    this.org_apache_royale_textLayout_container_TextContainerManager__lastSeparator = separator;
  }
  return this.org_apache_royale_textLayout_container_TextContainerManager__text;
};


/**
 * Sets the <code>text</code> property to the specified String.
 *
 * Discards any attached ITextFlow. Any selection is lost.
 * 
 * @asparam str the String to set
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} text
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.setText = function(text) {
  var /** @type {boolean} */ hadPreviousSelection = false;
  var /** @type {boolean} */ selectionChanged = false;
  var /** @type {number} */ oldAnchorPosition = -1;
  var /** @type {number} */ oldActivePosition = -1;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW) {
    if (this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager && this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.hasSelection()) {
      hadPreviousSelection = true;
      if (this.org_apache_royale_textLayout_container_TextContainerManager__preserveSelectionOnSetText && text != null) {
        oldAnchorPosition = (Math.min(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.anchorPosition, text.length)) >> 0;
        oldActivePosition = (Math.min(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.activePosition, text.length)) >> 0;
        if (oldAnchorPosition != this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.anchorPosition || oldActivePosition != this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.activePosition)
          selectionChanged = true;
      }
    }
    this.org_apache_royale_textLayout_container_TextContainerManager_removeTextFlowListeners();
    if (this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer)
      this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.removeAllControllers();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.unloadGraphics();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow = null;
    this.org_apache_royale_textLayout_container_TextContainerManager__sourceState = org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING;
    this.org_apache_royale_textLayout_container_TextContainerManager__composeState = org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY;
  }
  this.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners();
  this.org_apache_royale_textLayout_container_TextContainerManager__text = text ? text : "";
  this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
  this.org_apache_royale_textLayout_container_TextContainerManager__textDamaged = false;
  if (this.hasEventListener(org.apache.royale.textLayout.events.DamageEvent.DAMAGE))
    this.dispatchEvent(new org.apache.royale.textLayout.events.DamageEvent(org.apache.royale.textLayout.events.DamageEvent.DAMAGE, false, false, null, 0, this.org_apache_royale_textLayout_container_TextContainerManager__text.length));
  if (hadPreviousSelection) {
    if (this.org_apache_royale_textLayout_container_TextContainerManager__preserveSelectionOnSetText) {
      if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
        this.convertToTextFlowWithComposer();
      if (this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager) {
        this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.setSelectionState(new org.apache.royale.textLayout.edit.SelectionState(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow, oldAnchorPosition, oldActivePosition));
        if (selectionChanged)
          this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.dispatchEvent(new org.apache.royale.textLayout.events.SelectionEvent(org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE, false, false, this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.getSelectionState()));
      }
    } else if (this.hasEventListener(org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE)) {
      this.dispatchEvent(new org.apache.royale.textLayout.events.SelectionEvent(org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE, false, false, null));
    }
  }
  if (this.org_apache_royale_textLayout_container_TextContainerManager__hasFocus)
    this.requiredFocusInHandler(null);
};


/** Creates a rectangle that shows where the last call to either the <code>compose()</code> 
 * method or the <code>updateContainer()</code> method placed the text.
 *
 * @asreturn  the bounds of the content
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see #compose()
 * @see #updateContainer()
 * @export
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getContentBounds = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY)
    return new org.apache.royale.geom.Rectangle(this.org_apache_royale_textLayout_container_TextContainerManager__contentLeft, this.org_apache_royale_textLayout_container_TextContainerManager__contentTop, this.org_apache_royale_textLayout_container_TextContainerManager__contentWidth, this.org_apache_royale_textLayout_container_TextContainerManager__contentHeight);
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this.org_apache_royale_textLayout_container_TextContainerManager_getController();
  return controller.getContentBounds();
};


/** The current ITextFlow. Converts this to a full ITextFlow representation if it 
 * isn't already one. 
 *
 * @asreturn 	the current ITextFlow object
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getTextFlow = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState != org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW) {
    var /** @type {boolean} */ wasDamaged = this.isDamaged();
    this.org_apache_royale_textLayout_container_TextContainerManager_convertToTextFlow();
    if (!wasDamaged)
      this.updateContainer();
  }
  return this.org_apache_royale_textLayout_container_TextContainerManager__textFlow;
};


/** Sets a ITextFlow into this TextContainerManager replacing any existing ITextFlow and discarding the 
 * current text. 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.setTextFlow = function(textFlow) {
  if (textFlow == this.org_apache_royale_textLayout_container_TextContainerManager__textFlow)
    return;
  if (textFlow == null) {
    this.setText(null);
    return;
  }
  if (textFlow.flowComposer && textFlow.flowComposer.numControllers > 0 && org.apache.royale.utils.Language.is(textFlow.flowComposer.getControllerAt(0), org.apache.royale.textLayout.container.TMContainerController)) {
    var /** @type {org.apache.royale.textLayout.container.TMContainerController} */ controller = textFlow.flowComposer.getControllerAt(0);
    if (controller.textContainerManager && controller.textContainerManager.getTextFlow() == textFlow)
      controller.textContainerManager.setTextFlow(null);
  }
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW) {
    this.org_apache_royale_textLayout_container_TextContainerManager_removeTextFlowListeners();
    if (this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer)
      this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.removeAllControllers();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.unloadGraphics();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow = null;
  }
  this.org_apache_royale_textLayout_container_TextContainerManager__textFlow = textFlow;
  this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.hostFormat = this.hostFormat;
  this.org_apache_royale_textLayout_container_TextContainerManager__sourceState = org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW;
  this.org_apache_royale_textLayout_container_TextContainerManager__composeState = textFlow.interactionManager || textFlow.mustUseComposer() ? org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER : org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY;
  this.org_apache_royale_textLayout_container_TextContainerManager__textDamaged = true;
  this.org_apache_royale_textLayout_container_TextContainerManager_addTextFlowListeners();
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    this.clearContainerChildren(true);
    this.clearComposedLines();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer = org.apache.royale.textLayout.compose.utils.StandardHelper.getNewComposer();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext;
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.addController(new org.apache.royale.textLayout.container.TMContainerController(this.org_apache_royale_textLayout_container_TextContainerManager__container, this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth, this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight, this));
    this.org_apache_royale_textLayout_container_TextContainerManager_invalidateInteractionManager();
    if (this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager)
      this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.selectRange(-1, -1);
  }
  else
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__hasFocus)
    this.requiredFocusInHandler(null);
  this.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners();
};


/** 
 * @copy org.apache.royale.textLayout.container.ContainerController#getScrollDelta() 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {number} numLines
 * @return {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getScrollDelta = function(numLines) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.convertToTextFlowWithComposer();
  return this.org_apache_royale_textLayout_container_TextContainerManager_getController().getScrollDelta(numLines);
};


/** 
 * @copy org.apache.royale.textLayout.container.ContainerController#scrollToRange() 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {number} activePosition
 * @param {number} anchorPosition
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.scrollToRange = function(activePosition, anchorPosition) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.convertToTextFlowWithComposer();
  this.org_apache_royale_textLayout_container_TextContainerManager_getController().scrollToRange(activePosition, anchorPosition);
};


/** @asprivate - TextContainerManager wraps an underlying swfcontext - tell it to FlowComposerBase so it can avoid extra invalidation 
 * @export
 * @return {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getBaseSWFContext = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__swfContext;
};


/** @asprivate - this is part of a performance optimziation for reusing existing TextLines in place iff recreateTextLine is available. 
 * @export
 * @param {Function} fn
 * @param {Object} thisArg
 * @param {Array} argsArray
 * @param {boolean=} returns
 * @return {*}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.callInContext = function(fn, thisArg, argsArray, returns) {
  returns = typeof returns !== 'undefined' ? returns : true;
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = thisArg;
  if (textBlock && org.apache.royale.textLayout.container.TextContainerManager._expectedFactoryCompose == org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer) {
    if (fn == org.apache.royale.utils.Language.closure(textBlock.createTextLine, textBlock, 'createTextLine'))
      return this.org_apache_royale_textLayout_container_TextContainerManager_createTextLine(textBlock, argsArray);
    return this.org_apache_royale_textLayout_container_TextContainerManager_recreateTextLine(textBlock, argsArray);
  }
  var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext ? this.org_apache_royale_textLayout_container_TextContainerManager__swfContext : org.apache.royale.textLayout.compose.SWFContext["globalSWFContext"];
  if (returns)
    return swfContext.callInContext(fn, thisArg, argsArray, returns);
  swfContext.callInContext(fn, thisArg, argsArray, returns);
};


/**
 * @export
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.resetLine = function(textLine) {
  if (textLine == this._composedLines[this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines - 1])
    this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines--;
};


/** 
 * Uses the <code>textBlock</code> parameter, and calls the <code>ITextBlock.createTextLine()</code> method on it 
 * using the remaining parameters.
 * WARNING: modifies argsArray
 *  
 * @copy org.apache.royale.text.engine.ITextBlock
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock} textBlock
 * @param {Array} argsArray
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_createTextLine = function(textBlock, argsArray) {
  var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext ? this.org_apache_royale_textLayout_container_TextContainerManager__swfContext : org.apache.royale.textLayout.compose.SWFContext["globalSWFContext"];
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines < this._composedLines.length && org.apache.royale.textLayout.container.TextContainerManager._expectedFactoryCompose == org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer) {
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this._composedLines[this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines++];
    argsArray.splice(0, 0, textLine);
    return swfContext.callInContext(textBlock["recreateTextLine"], textBlock, argsArray);
  }
  return swfContext.callInContext(org.apache.royale.utils.Language.closure(textBlock.createTextLine, textBlock, 'createTextLine'), textBlock, argsArray);
};


/** 
 * Uses the <code>textBlock</code> parameter, and calls the <code>FlowComposerBase.recreateTextLine()</code> method on it 
 * using the remaining parameters.
 *
 * @asparam textBlock The ITextBlock to which the ITextLine belongs.
 * @asparam textLine  The ITextLine to be recreated.
 * @asparam previousLine Specifies the previously broken line after 
 *	which breaking is to commence. Can be null when breaking the first line.  
 * @asparam width Specifies the desired width of the line in pixels. The 
 * 	actual width may be less.  
 * @asparam lineOffset An optional parameter which specifies the difference in 
 *	pixels between the origin of the line and the origin of the tab stops. This can be used when lines are not aligned, 
 * 	but it is desirable for their tabs to be so. 
 * @asparam fitSomething An optional parameter that instructs the runtime to fit at least one 
 * 	character into the text line, no matter what width has been specified (even if width is zero or negative, which 
 * 	would otherwise result in an exception being thrown).  
 * @asreturn The recreated ITextLine instance.
 *  
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock} textBlock
 * @param {Array} argsArray
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_recreateTextLine = function(textBlock, argsArray) {
  var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext ? this.org_apache_royale_textLayout_container_TextContainerManager__swfContext : org.apache.royale.textLayout.compose.SWFContext["globalSWFContext"];
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines < this._composedLines.length) {
    
    org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(argsArray[0]);
    argsArray[0] = this._composedLines[this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines++];
  }
  return swfContext.callInContext(textBlock["recreateTextLine"], textBlock, argsArray);
};


/** Returns the current ISelectionManager instance. Converts to ITextFlow instance and creates one if necessary. 
 *
 * @asreturn  the interaction manager for this TextContainerManager instance.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.textLayout.edit.ISelectionManager ISelectionManager
 * @export
 * @return {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.beginInteraction = function() {
  ++this.org_apache_royale_textLayout_container_TextContainerManager__interactionCount;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.convertToTextFlowWithComposer();
  return this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager;
};


/** Terminates interaction. 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.textLayout.edit.ISelectionManager ISelectionManager
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.endInteraction = function() {
  --this.org_apache_royale_textLayout_container_TextContainerManager__interactionCount;
};


/** Call this if you are editing, and want to reset the undo manager used for editing.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.invalidateUndoManager = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE)
    this.org_apache_royale_textLayout_container_TextContainerManager_invalidateInteractionManager(true);
};


/** Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
 * to update. 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.invalidateSelectionFormats = function() {
  this.org_apache_royale_textLayout_container_TextContainerManager_invalidateInteractionManager();
};


/** The interactionManager is invalid - update it. Clients should call this if they change the 
 * @private
 * @param {boolean=} alwaysRecreateManager
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_invalidateInteractionManager = function(alwaysRecreateManager) {
  alwaysRecreateManager = typeof alwaysRecreateManager !== 'undefined' ? alwaysRecreateManager : false;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    var /** @type {org.apache.royale.textLayout.edit.ISelectionManager} */ interactionManager = this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager;
    var /** @type {number} */ activePos = (interactionManager ? interactionManager.activePosition : -1) >> 0;
    var /** @type {number} */ anchorPos = (interactionManager ? interactionManager.anchorPosition : -1) >> 0;
    if (this.org_apache_royale_textLayout_container_TextContainerManager__editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_ONLY) {
      if (interactionManager)
        this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager = null;
    } else if (this.org_apache_royale_textLayout_container_TextContainerManager__editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE) {
      if (alwaysRecreateManager || interactionManager == null || interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_SELECT) {
        this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager = this.createEditManager(this.getUndoManager());
        if (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager, org.apache.royale.textLayout.edit.SelectionManager))
          org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager, org.apache.royale.textLayout.edit.SelectionManager, true).cloneSelectionFormatState(interactionManager);
      }
    } else if (this.org_apache_royale_textLayout_container_TextContainerManager__editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_SELECT) {
      if (alwaysRecreateManager || interactionManager == null || interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE) {
        this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager = this.createSelectionManager();
        if (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager, org.apache.royale.textLayout.edit.SelectionManager))
          org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager, org.apache.royale.textLayout.edit.SelectionManager, true).cloneSelectionFormatState(interactionManager);
      }
    }
    interactionManager = this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager;
    if (interactionManager) {
      interactionManager.unfocusedSelectionFormat = this.getUnfocusedSelectionFormat();
      interactionManager.focusedSelectionFormat = this.getFocusedSelectionFormat();
      interactionManager.inactiveSelectionFormat = this.getInactiveSelectionFormat();
      interactionManager.selectRange(anchorPos, activePos);
    }
  }
};


/**Create a selection manager to use for selection. Override this method if you have a custom SelectionManager that you
 * want to use in place of the default.
 *
 * @asreturn	a new SelectionManager instance.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @return {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.createSelectionManager = function() {
  return new org.apache.royale.textLayout.edit.SelectionManager();
};


/**Create an edit manager to use for editing. Override this method if you have a custom EditManager that you
 * want to use in place of the default.
 *
 * @asparam  an IUndoManager instance for the EditManager being created.
 * @asreturn	the editing manager for this TextContainerManager instance.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @param {org.apache.royale.utils.undo.IUndoManager} undoManager
 * @return {org.apache.royale.textLayout.edit.IEditManager}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.createEditManager = function(undoManager) {
  return new org.apache.royale.textLayout.edit.EditManager(undoManager);
};


/**
 * @private
 * @return {org.apache.royale.textLayout.container.TMContainerController}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_getController = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.getControllerAt(0);
};


/**
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype._composedLines;


/** Return the ITextLine at the index from array of composed lines.
 *
 * @asparam index	Finds the line at this index position in the text.
 *
 * @asreturn 	the ITextLine that occurs at the specified index.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {number} index
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getLineAt = function(index) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING && this.org_apache_royale_textLayout_container_TextContainerManager__text.length == 0 && !this.org_apache_royale_textLayout_container_TextContainerManager__damaged && this._composedLines.length == 0) {
      if (this.org_apache_royale_textLayout_container_TextContainerManager__needsRedraw)
        this.compose();
      else
        this.updateContainer();
      
    }
    return this._composedLines[index];
  }
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.getLineAt(index);
  return tfl ? tfl.getTextLine(true) : null;
};


/** @asprivate 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getActualNumLines = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.convertToTextFlowWithComposer();
  this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.composeToPosition();
  return this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.numLines;
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.clearComposedLines = function() {
  if (this._composedLines)
    this._composedLines.length = 0;
};


/**
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} displayObject
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_populateComposedLines = function(displayObject) {
  this._composedLines.push(displayObject);
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__composePushedLines = 0;


/**
 * @private
 * @param {Object} object
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_populateAndRecycleComposedLines = function(object) {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = object;
  if (textLine) {
    
    if (this.org_apache_royale_textLayout_container_TextContainerManager__composePushedLines >= this._composedLines.length)
      this._composedLines.push(textLine);
  }
  else
    this._composedLines.splice(0, 0, object);
  this.org_apache_royale_textLayout_container_TextContainerManager__composePushedLines++;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.ISimpleCompose}
 */
org.apache.royale.textLayout.container.TextContainerManager._expectedFactoryCompose;


/** Composes the container text; calls either the factory or <code>updateAllControllers()</code>.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.compose = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.compose(); else if (this.org_apache_royale_textLayout_container_TextContainerManager__damaged) {
    if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW && this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.mustUseComposer()) {
      this.convertToTextFlowWithComposer(false);
      this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.compose();
      return;
    } else {
      var /** @type {Function} */ callback;
      for (;;) {
        var /** @type {Object} */ firstObj = this._composedLines[0];
        if (firstObj == null || org.apache.royale.utils.Language.is(firstObj, org.apache.royale.text.engine.ITextLine))
          break;
        this._composedLines.splice(0, 1);
      }
      this.org_apache_royale_textLayout_container_TextContainerManager__composeRecycledInPlaceLines = 0;
      this.org_apache_royale_textLayout_container_TextContainerManager__composePushedLines = 0;
      callback = org.apache.royale.utils.Language.closure(this.org_apache_royale_textLayout_container_TextContainerManager_populateAndRecycleComposedLines, this, 'org_apache_royale_textLayout_container_TextContainerManager_populateAndRecycleComposedLines');
      var /** @type {org.apache.royale.textLayout.factory.TextLineFactoryBase} */ inputManagerFactory = (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING) ? org.apache.royale.textLayout.container.TextContainerManager.inputManagerStringFactory(this.org_apache_royale_textLayout_container_TextContainerManager__config) : org.apache.royale.textLayout.container.TextContainerManager.inputManagerTextFlowFactory();
      inputManagerFactory.verticalScrollPolicy = this.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy;
      inputManagerFactory.horizontalScrollPolicy = this.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy;
      inputManagerFactory.compositionBounds = new org.apache.royale.geom.Rectangle(0, 0, this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth, this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight);
      inputManagerFactory.swfContext = this;
      org.apache.royale.textLayout.container.TextContainerManager._expectedFactoryCompose = org.apache.royale.textLayout.factory.TextLineFactoryBase.peekFactoryCompose();
      if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING) {
        var /** @type {org.apache.royale.textLayout.factory.StringTextLineFactory} */ stringFactory = inputManagerFactory;
        if (!this.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat) {
          if (this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat == null)
            this.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat = this.org_apache_royale_textLayout_container_TextContainerManager__config.textFlowInitialFormat; else {
            var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ format = new org.apache.royale.textLayout.formats.TextLayoutFormat(this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat);
            org.apache.royale.textLayout.formats.TextLayoutFormat.resetModifiedNoninheritedStyles(format);
            var /** @type {Object} */ holderStyles = this.org_apache_royale_textLayout_container_TextContainerManager__config.textFlowInitialFormat.getStyles();
            for (var /** @type {string} */ key in holderStyles) {
              var /** @type {*} */ val = holderStyles[key];
              format[key] = (val !== org.apache.royale.textLayout.formats.FormatValue.INHERIT) ? val : this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat[key];
            }
            this.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat = format;
          }
        }
        if (!org.apache.royale.textLayout.formats.TextLayoutFormat.isEqual(stringFactory.textFlowFormat, this.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat))
          stringFactory.textFlowFormat = this.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat;
        stringFactory.text = this.org_apache_royale_textLayout_container_TextContainerManager__text;
        stringFactory.createTextLines(callback);
      } else {
        var /** @type {org.apache.royale.textLayout.factory.TCMTextFlowTextLineFactory} */ factory = inputManagerFactory;
        factory.tcm = this;
        factory.createTextLines(callback, this.org_apache_royale_textLayout_container_TextContainerManager__textFlow);
        factory.tcm = null;
      }
      inputManagerFactory.swfContext = null;
      org.apache.royale.textLayout.container.TextContainerManager._expectedFactoryCompose = null;
      this._composedLines.length = this.org_apache_royale_textLayout_container_TextContainerManager__composePushedLines;
      var /** @type {org.apache.royale.geom.Rectangle} */ bounds = inputManagerFactory.getContentBounds();
      this.org_apache_royale_textLayout_container_TextContainerManager__contentLeft = bounds.x;
      this.org_apache_royale_textLayout_container_TextContainerManager__contentTop = bounds.y;
      this.org_apache_royale_textLayout_container_TextContainerManager__contentWidth = bounds.width;
      this.org_apache_royale_textLayout_container_TextContainerManager__contentHeight = bounds.height;
      this.org_apache_royale_textLayout_container_TextContainerManager__damaged = false;
      if (this.hasEventListener(org.apache.royale.textLayout.events.CompositionCompleteEvent.COMPOSITION_COMPLETE))
        this.dispatchEvent(new org.apache.royale.textLayout.events.CompositionCompleteEvent(org.apache.royale.textLayout.events.CompositionCompleteEvent.COMPOSITION_COMPLETE, false, false, this.org_apache_royale_textLayout_container_TextContainerManager__textFlow, 0, -1));
    }
    this.org_apache_royale_textLayout_container_TextContainerManager__needsRedraw = true;
  }
};


/** Updates the display; calls either the factory or updateAllControllers().
 * 
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.updateContainer = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    return this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.updateAllControllers();
  this.compose();
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.updateAllControllers();
    return true;
  }
  if (!this.org_apache_royale_textLayout_container_TextContainerManager__needsRedraw)
    return false;
  this.factoryUpdateContainerChildren();
  this.drawBackgroundAndSetScrollRect(0, 0);
  if (this.org_apache_royale_textLayout_container_TextContainerManager__handlersState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NOTADDED)
    this.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners();
  if (this.hasEventListener(org.apache.royale.textLayout.events.UpdateCompleteEvent.UPDATE_COMPLETE))
    this.dispatchEvent(new org.apache.royale.textLayout.events.UpdateCompleteEvent(org.apache.royale.textLayout.events.UpdateCompleteEvent.UPDATE_COMPLETE, false, false, null));
  this.org_apache_royale_textLayout_container_TextContainerManager__needsRedraw = false;
  return true;
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.factoryUpdateContainerChildren = function() {
  var /** @type {org.apache.royale.core.IChild} */ textObject;
  while (this.org_apache_royale_textLayout_container_TextContainerManager__container.numElements != 0) {
    textObject = this.org_apache_royale_textLayout_container_TextContainerManager__container.getElementAt(0);
    if (org.apache.royale.utils.Language.is(textObject, org.apache.royale.text.engine.ITextLine))
      break;
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeElement(textObject);
  }
  for (var /** @type {number} */ idx = 0; idx < this._composedLines.length; idx++) {
    textObject = this._composedLines[idx];
    if (org.apache.royale.utils.Language.is(textObject, org.apache.royale.text.engine.ITextLine))
      break;
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addElementAt(textObject, idx);
  }
  while (this.org_apache_royale_textLayout_container_TextContainerManager__container.numElements < this._composedLines.length)
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addElement(this._composedLines[this.org_apache_royale_textLayout_container_TextContainerManager__container.numElements]);
  while (this.org_apache_royale_textLayout_container_TextContainerManager__container.numElements > this._composedLines.length) {
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.org_apache_royale_textLayout_container_TextContainerManager__container.getElementAt((this._composedLines.length) >> 0);
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeElement(textLine);
    if (textLine) {
      if (textLine.validity == "valid")
        textLine.textBlock.releaseLines(textLine, textLine.textBlock.lastLine);
      textLine.userData = null;
      org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(textLine);
    }
  }
};


/**
 * @private
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners = function() {
  var /** @type {number} */ newState = org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NONE;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    if (this.org_apache_royale_textLayout_container_TextContainerManager__editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_ONLY)
      newState = org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_MOUSEWHEEL;
    else
      newState = this.org_apache_royale_textLayout_container_TextContainerManager__handlersState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NOTADDED ? org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_CREATION : org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_ACTIVE;
  }
  if (newState == this.org_apache_royale_textLayout_container_TextContainerManager__handlersState)
    return;
  this.org_apache_royale_textLayout_container_TextContainerManager_removeActivationEventListeners();
  if (newState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_CREATION) {
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_IN, org.apache.royale.utils.Language.closure(this.requiredFocusInHandler, this, 'requiredFocusInHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.utils.Language.closure(this.requiredMouseOverHandler, this, 'requiredMouseOverHandler'));
  } else if (newState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_ACTIVE) {
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_IN, org.apache.royale.utils.Language.closure(this.requiredFocusInHandler, this, 'requiredFocusInHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.utils.Language.closure(this.requiredMouseOverHandler, this, 'requiredMouseOverHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.mouseDownHandler, this, 'mouseDownHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_OUT, org.apache.royale.utils.Language.closure(this.mouseOutHandler, this, 'mouseOutHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.events.MouseEvent.WHEEL, org.apache.royale.utils.Language.closure(this.mouseWheelHandler, this, 'mouseWheelHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener("imeStartComposition", org.apache.royale.utils.Language.closure(this.imeStartCompositionHandler, this, 'imeStartCompositionHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL, org.apache.royale.utils.Language.closure(this.editHandler, this, 'editHandler'));
  }
  else if (newState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_MOUSEWHEEL)
    this.org_apache_royale_textLayout_container_TextContainerManager__container.addEventListener(org.apache.royale.events.MouseEvent.WHEEL, org.apache.royale.utils.Language.closure(this.mouseWheelHandler, this, 'mouseWheelHandler'));
  this.org_apache_royale_textLayout_container_TextContainerManager__handlersState = newState;
};


/**
 * @private
 * @type {*}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__contextMenu;


/** @asprivate  Returns the already created contextMenu.  If not created yet create it.  
 * @export
 * @return {org.apache.royale.textLayout.dummy.ContextMenu}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getContextMenu = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__contextMenu === undefined)
    this.org_apache_royale_textLayout_container_TextContainerManager__contextMenu = this.createContextMenu();
  return this.org_apache_royale_textLayout_container_TextContainerManager__contextMenu;
};


/**
 * @private
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_removeActivationEventListeners = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__handlersState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_CREATION) {
    
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_IN, org.apache.royale.utils.Language.closure(this.requiredFocusInHandler, this, 'requiredFocusInHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.utils.Language.closure(this.requiredMouseOverHandler, this, 'requiredMouseOverHandler'));
  } else if (this.org_apache_royale_textLayout_container_TextContainerManager__handlersState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_ACTIVE) {
    
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_IN, org.apache.royale.utils.Language.closure(this.requiredFocusInHandler, this, 'requiredFocusInHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.utils.Language.closure(this.requiredMouseOverHandler, this, 'requiredMouseOverHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.mouseDownHandler, this, 'mouseDownHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_OUT, org.apache.royale.utils.Language.closure(this.mouseOutHandler, this, 'mouseOutHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.events.MouseEvent.WHEEL, org.apache.royale.utils.Language.closure(this.mouseWheelHandler, this, 'mouseWheelHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener("imeStartComposition", org.apache.royale.utils.Language.closure(this.imeStartCompositionHandler, this, 'imeStartCompositionHandler'));
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL, org.apache.royale.utils.Language.closure(this.editHandler, this, 'editHandler'));
  } else if (this.org_apache_royale_textLayout_container_TextContainerManager__handlersState == org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_MOUSEWHEEL) {
    
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeEventListener(org.apache.royale.events.MouseEvent.WHEEL, org.apache.royale.utils.Language.closure(this.mouseWheelHandler, this, 'mouseWheelHandler'));
  }
  this.org_apache_royale_textLayout_container_TextContainerManager__handlersState = org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NOTADDED;
};


/**
 * @private
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_addTextFlowListeners = function() {
  var foreachiter0_target = this.org_apache_royale_textLayout_container_TextContainerManager_eventList;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var event = foreachiter0_target[foreachiter0];
  
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.addEventListener(event, org.apache.royale.utils.Language.closure(this.dispatchEvent, this, 'dispatchEvent'));}
  
};


/**
 * @private
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_removeTextFlowListeners = function() {
  var foreachiter1_target = this.org_apache_royale_textLayout_container_TextContainerManager_eventList;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var event = foreachiter1_target[foreachiter1];
  
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.removeEventListener(event, org.apache.royale.utils.Language.closure(this.dispatchEvent, this, 'dispatchEvent'));}
  
  this.org_apache_royale_textLayout_container_TextContainerManager__handlersState = org.apache.royale.textLayout.container.TextContainerManager.HANDLERS_NONE;
};


/** @asprivate 
 * @export
 * @param {boolean} recycle
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.clearContainerChildren = function(recycle) {
  while (this.org_apache_royale_textLayout_container_TextContainerManager__container.numElements) {
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.org_apache_royale_textLayout_container_TextContainerManager__container.getElementAt(0);
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeElement(textLine);
    if (textLine) {
      if (textLine.validity != "invalid" && textLine.validity != "static") {
        var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = textLine.textBlock;
        
        textBlock.releaseLines(textBlock.firstLine, textBlock.lastLine);
      }
      if (recycle) {
        textLine.userData = null;
        org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(textLine);
      }
    }
  }
};


/**
 * @private
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_convertToTextFlow = function() {
  
  org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"].currentContainer = this.container;
  this.org_apache_royale_textLayout_container_TextContainerManager__textFlow = new org.apache.royale.textLayout.elements.TextFlow(org.apache.royale.textLayout.factory.TLFFactory["defaultTLFFactory"], this.org_apache_royale_textLayout_container_TextContainerManager__config);
  this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.hostFormat = this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__swfContext) {
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext;
  }
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ p = org.apache.royale.textLayout.elements.ElementHelper.getParagraph();
  this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.addChild(p);
  var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ s = org.apache.royale.textLayout.elements.ElementHelper.getSpan();
  s.text = this.org_apache_royale_textLayout_container_TextContainerManager__text;
  p.addChild(s);
  this.org_apache_royale_textLayout_container_TextContainerManager__sourceState = org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW;
  this.org_apache_royale_textLayout_container_TextContainerManager_addTextFlowListeners();
};


/** @asprivate 
 * @export
 * @param {boolean=} callUpdateContainer
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.convertToTextFlowWithComposer = function(callUpdateContainer) {
  callUpdateContainer = typeof callUpdateContainer !== 'undefined' ? callUpdateContainer : true;
  this.org_apache_royale_textLayout_container_TextContainerManager_removeActivationEventListeners();
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState != org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW)
    this.org_apache_royale_textLayout_container_TextContainerManager_convertToTextFlow();
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    this.clearContainerChildren(true);
    this.clearComposedLines();
    var /** @type {org.apache.royale.textLayout.container.TMContainerController} */ controller = new org.apache.royale.textLayout.container.TMContainerController(this.org_apache_royale_textLayout_container_TextContainerManager__container, this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth, this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight, this);
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer = org.apache.royale.textLayout.compose.utils.StandardHelper.getNewComposer();
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.addController(controller);
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext;
    this.org_apache_royale_textLayout_container_TextContainerManager__composeState = org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER;
    this.org_apache_royale_textLayout_container_TextContainerManager_invalidateInteractionManager();
    if (callUpdateContainer)
      this.updateContainer();
  }
};


/**
 * @private
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager_removeIBeamCursor = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__ibeamCursorSet) {
    org.apache.royale.textLayout.dummy.Mouse.cursor = org.apache.royale.textLayout.elements.Configuration.getCursorString(this.configuration, org.apache.royale.textLayout.dummy.MouseCursor.AUTO);
    this.org_apache_royale_textLayout_container_TextContainerManager__ibeamCursorSet = false;
  }
};


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect = false;


/**   
 * Returns <code>true</code> if it has filled in the container's scrollRect property.  
 * This method enables you to test whether <code>scrollRect</code> is set without actually accessing the <code>scrollRect</code> property 
 * which can possibly create a  performance issue. 
 * <p>Override this method to draw a background or a border.  Overriding this method can be tricky as the scrollRect <bold>must</bold> 
 * be set as specified.</p>
 * 
 * @asparam scrollX The starting horizontal position of the scroll rectangle.
 * @asparam scrollY The starting vertical position of the scroll rectangle.
 * 
 * @asreturn 	<code>true</code> if it has created the <code>scrollRect</code> object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {number} scrollX
 * @param {number} scrollY
 * @return {boolean}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.drawBackgroundAndSetScrollRect = function(scrollX, scrollY) {
  var /** @type {number} */ contentWidth;
  var /** @type {number} */ contentHeight;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    contentWidth = this.org_apache_royale_textLayout_container_TextContainerManager__contentWidth;
    contentHeight = this.org_apache_royale_textLayout_container_TextContainerManager__contentHeight;
  } else {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this.org_apache_royale_textLayout_container_TextContainerManager_getController();
    contentWidth = controller.contentWidth;
    contentHeight = controller.contentHeight;
  }
  var /** @type {number} */ width;
  if (isNaN(this.compositionWidth)) {
    var /** @type {number} */ contentLeft = (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) ? this.org_apache_royale_textLayout_container_TextContainerManager__contentLeft : controller.contentLeft;
    width = contentLeft + contentWidth - scrollX;
  }
  else
    width = this.compositionWidth;
  var /** @type {number} */ height;
  if (isNaN(this.compositionHeight)) {
    var /** @type {number} */ contentTop = (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) ? this.org_apache_royale_textLayout_container_TextContainerManager__contentTop : controller.contentTop;
    height = contentTop + contentHeight - scrollY;
  }
  else
    height = this.compositionHeight;
  if (scrollX == 0 && scrollY == 0 && contentWidth <= width && contentHeight <= height) {
    if (this.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect) {
      this.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect = false;
    }
  } else {
    this.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect = true;
  }
  return this.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect;
};


/** Returns the focusedSelectionFormat - by default get it from the configuration.
 * This can be overridden in the subclass to supply a different SelectionFormat
 * @protected
 * @return {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getFocusedSelectionFormat = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__config.focusedSelectionFormat;
};


/** Returns the inactiveSelectionFormat - by default get it from the configuration 
 * This can be overridden in the subclass to supply a different SelectionFormat
 * @protected
 * @return {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getInactiveSelectionFormat = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__config.inactiveSelectionFormat;
};


/** Returns the unfocusedSelectionFormat - by default get it from the configuration 
 * You can override this method in the subclass to supply a different SelectionFormat.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @return {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getUnfocusedSelectionFormat = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__config.unfocusedSelectionFormat;
};


/** 
 * Returns the undo manager to use. By default, creates a unique undo manager. 
 * You can override this method in the subclass if you want to customize the undo manager
 * (for example, to use a shared undo manager for multiple TextContainerManager instances).
 *
 * @asreturn 	new IUndoManager instance.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @return {org.apache.royale.utils.undo.IUndoManager}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getUndoManager = function() {
  return new org.apache.royale.utils.undo.UndoManager();
};


/** Creates a ContextMenu for the TextContainerManager. Use the methods of the ContextMenu 
 *  class to add items to the menu. 
 * <p>You can override this method to define a custom context menu.</p>
 *
 * @asreturn 	the created context menu.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see flash.ui.ContextMenu ContextMenu
 * @protected
 * @return {org.apache.royale.textLayout.dummy.ContextMenu}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.createContextMenu = function() {
  return org.apache.royale.textLayout.container.ContainerController.createDefaultContextMenu();
};


/** @copy org.apache.royale.textLayout.container.ContainerController#editHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.Event Event
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.editHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    this.convertToTextFlowWithComposer();
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().editHandler(event);
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.interactionManager.setFocus();
  }
  else
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().editHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#keyDownHandler() 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.KeyboardEvent#KEY_DOWN KeyboardEvent.KEY_DOWN
 * @export
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.keyDownHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().keyDownHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#keyUpHandler().
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.KeyboardEvent#KEY_UP KeyboardEvent.KEY_UP
 * @export
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.keyUpHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().keyUpHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#keyFocusChangeHandler().
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 	@asparam	event	the FocusChange event
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.keyFocusChangeHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().keyFocusChangeHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#textInputHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.TextEvent#TEXT_INPUT TextEvent.TEXT_INPUT
 * @export
 * @param {org.apache.royale.text.events.TextEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.textInputHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().textInputHandler(event);
};


/** Processes the <code>IME_START_COMPOSITION</code> event when the client manages events.
 *
 * @asparam event  The IMEEvent object.
 *
 * @playerversion Flash 10.1
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 *
 * @see org.apache.royale.events.IMEEvent#IME_START_COMPOSITION IMEEvent.IME_START_COMPOSITION
 * @export
 * @param {org.apache.royale.text.events.IMEEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.imeStartCompositionHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().imeStartCompositionHandler(event);
};


/** Processes the <code>SOFT_KEYBOARD_ACTIVATING</code> event when the client manages events.
 *
 * @asparam event  The SoftKeyboardEvent object.
 *
 * @playerversion Flash 10.2
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 *
 * @see org.apache.royale.events.SoftKeyboardEvent#SOFT_KEYBOARD_ACTIVATING SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.softKeyboardActivatingHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().softKeyboardActivatingHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#mouseDownHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.MouseEvent#MOUSE_DOWN MouseEvent.MOUSE_DOWN
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseDownHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    
    this.convertToTextFlowWithComposer();
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredFocusInHandler(null);
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredMouseOverHandler(event.target != this.container ? new org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent(event) : event);
    if (this.org_apache_royale_textLayout_container_TextContainerManager__hasFocus)
      this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredFocusInHandler(null);
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredMouseDownHandler(event);
  }
  else
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseDownHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#mouseMoveHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.MouseEvent#MOUSE_MOVE MouseEvent.MOUSE_MOVE
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseMoveHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseMoveHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#mouseUpHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.MouseEvent#MOUSE_UP MouseEvent.MOUSE_UP
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseUpHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseUpHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#mouseDoubleClickHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.MouseEvent#DOUBLE_CLICK MouseEvent.DOUBLE_CLICK
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseDoubleClickHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseDoubleClickHandler(event);
};


/** @asprivate Process a mouseOver event.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.requiredMouseOverHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY)
    this.mouseOverHandler(event);
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredMouseOverHandler(event);
};


/** Process a mouseOver event.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.MouseEvent#MOUSE_OVER MouseEvent.MOUSE_OVER
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseOverHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseOverHandler(event); else {
    if (this.org_apache_royale_textLayout_container_TextContainerManager_effectiveBlockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL) {
      this.org_apache_royale_textLayout_container_TextContainerManager__ibeamCursorSet = true;
    }
    this.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners();
  }
};


/** @copy org.apache.royale.textLayout.container.ContainerController#mouseOutHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.MouseEvent#MOUSE_OUT MouseEvent.MOUSE_OUT
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseOutHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY)
    this.org_apache_royale_textLayout_container_TextContainerManager_removeIBeamCursor();
  else
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseOutHandler(event);
};


/** Process a focusIn event.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.focusInHandler = function(event) {
  this.org_apache_royale_textLayout_container_TextContainerManager__hasFocus = true;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().focusInHandler(event);
};


/** @asprivate hook to get at requiredFocusOutHandler as needed 
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.requiredFocusOutHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredFocusOutHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#focusOutHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.FocusEvent#FOCUS_OUT FocusEvent.FOCUS_OUT
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.focusOutHandler = function(event) {
  this.org_apache_royale_textLayout_container_TextContainerManager__hasFocus = false;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().focusOutHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#activateHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.Event#ACTIVATE Event.ACTIVATE
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.activateHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().activateHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#deactivateHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.events.Event#DEACTIVATE Event.DEACTIVATE
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.deactivateHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().deactivateHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#focusChangeHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.FocusEvent#KEY_FOCUS_CHANGE FocusEvent.KEY_FOCUS_CHANGE
 * @see org.apache.royale.events.FocusEvent#MOUSE_FOCUS_CHANGE FocusEvent.MOUSE_FOCUS_CHANGE
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.focusChangeHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().focusChangeHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#menuSelectHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.ContextMenuEvent#MENU_SELECT ContextMenuEvent.MENU_SELECT
 * @export
 * @param {org.apache.royale.textLayout.events.ContextMenuEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.menuSelectHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
  }
  else
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().menuSelectHandler(event);
};


/** @copy org.apache.royale.textLayout.container.ContainerController#mouseWheelHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_WHEEL MouseEvent.MOUSE_WHEEL
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseWheelHandler = function(event) {
  if (event.defaultPrevented)
    return;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    this.convertToTextFlowWithComposer();
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredMouseOverHandler(event);
  }
  this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseWheelHandler(event);
};


/** @asprivate required FocusIn handler.  Clients override focusInHandler
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.requiredFocusInHandler = function(event) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY) {
    this.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners();
    this.focusInHandler(event);
  }
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().requiredFocusInHandler(event);
};


/** 
 * Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.beginMouseCapture = function() {
};


/** 
 * Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @export
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.endMouseCapture = function() {
};


/** Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @export
 * @param {org.apache.royale.events.Event} e
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseUpSomewhere = function(e) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseUpSomewhere(e);
};


/** Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @export
 * @param {org.apache.royale.events.Event} e
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.mouseMoveSomewhere = function(e) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().mouseUpSomewhere(e);
};


/** @asprivate
 * Gets the index at which the first text line must appear in its parent.
 * The default implementation of this method, which may be overriden, returns the child index 
 * of the first <code>org.apache.royale.text.engine.ITextLine</code> child of <code>container</code>
 * if one exists, and that of the last child of <code>container</code> otherwise. 
 * 
 * @asreturn the index at which the first text line must appear in its parent.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * @export
 * @return {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.getFirstTextLineChildIndex = function() {
  var /** @type {number} */ firstTextLine = 0;
  //var /** @type {number} */ firstTextLine = 0;
  for (firstTextLine = 0; firstTextLine < this.org_apache_royale_textLayout_container_TextContainerManager__container.numElements; ++firstTextLine) {
    if (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_TextContainerManager__container.getElementAt(firstTextLine), org.apache.royale.text.engine.ITextLine)) {
      break;
    }
  }
  return firstTextLine;
};


/** @asprivate
 * Adds a <code>org.apache.royale.text.engine.ITextLine</code> object as a descendant of <code>container</code>.
 * The default implementation of this method, which may be overriden, adds the object
 * as a direct child of <code>container</code> at the specified index.
 * 
 * @asparam textLine the <code>org.apache.royale.text.engine.ITextLine</code> object to add
 * @asparam index insertion index of the text line in its parent 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {number} index
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.addTextLine = function(textLine, index) {
  this.org_apache_royale_textLayout_container_TextContainerManager__container.addElementAt(textLine, index);
};


/** @asprivate
 * Removes a <code>org.apache.royale.text.engine.ITextLine</code> object from its parent. 
 * The default implementation of this method, which may be overriden, removes the object
 * from <code>container</code> if it is a direct child of the latter.
 * 
 * This method may be called even if the object is not a descendant of <code>container</code>.
 * Any implementation of this method must ensure that no action is taken in this case.
 * 
 * @asparam textLine the <code>org.apache.royale.text.engine.ITextLine</code> object to remove 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.removeTextLine = function(textLine) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__container.getElementIndex(textLine) > -1)
    this.org_apache_royale_textLayout_container_TextContainerManager__container.removeElement(textLine);
};


/** @asprivate
 * Adds a <code>flash.display.Shape</code> object on which background shapes (such as background color) are drawn.
 * The default implementation of this method, which may be overriden, adds the object to <code>container</code>
 * just before the first <code>org.apache.royale.text.engine.ITextLine</code> child, if one exists, and after the last exisiting
 * child otherwise. 
 * 
 * @asparam shape <code>flash.display.Shape</code> object to add
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.Shape
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.core.IUIBase} shape
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.addBackgroundShape = function(shape) {
  this.org_apache_royale_textLayout_container_TextContainerManager__container.addElementAt(shape, this.getFirstTextLineChildIndex());
};


/** @asprivate
 * Removes a <code>flash.display.Shape</code> object on which background shapes (such as background color) are drawn.
 * The default implementation of this method, which may be overriden, removes the object from its <code>parent</code>.
 * 
 * @asparam shape <code>flash.display.Shape</code> object to remove
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.Shape
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.core.IUIBase} shape
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.removeBackgroundShape = function(shape) {
  if (shape.parent)
    shape.parent.removeElement(shape);
};


/** @asprivate
 * Adds a <code>flash.display.DisplayObjectContainer</code> object to which selection shapes (such as block selection highlight, cursor etc.) are added.
 * The default implementation of this method, which may be overriden, has the following behavior:
 * The object is added just before first <code>org.apache.royale.text.engine.ITextLine</code> child of <code>container</code> if one exists 
 * and the object is opaque and has normal blend mode. 
 * In all other cases, it is added as the last child of <code>container</code>.
 * 
 * @asparam selectionContainer <code>flash.display.DisplayObjectContainer</code> object to add
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * @export
 * @param {org.apache.royale.core.IParentIUIBase} selectionContainer
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.addSelectionContainer = function(selectionContainer) {
  this.org_apache_royale_textLayout_container_TextContainerManager__container.addElementAt(selectionContainer, this.getFirstTextLineChildIndex());
};


/** @asprivate
 * Removes the <code>flash.display.DisplayObjectContainer</code> object which contains selection shapes (such as block selection highlight, cursor etc.).
 * The default implementation of this method, which may be overriden, removes the object from its parent if one exists.
 * 
 * @asparam selectionContainer <code>flash.display.DisplayObjectContainer</code> object to remove
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.core.IParentIUIBase} selectionContainer
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.removeSelectionContainer = function(selectionContainer) {
  selectionContainer.parent.removeElement(selectionContainer);
};


/** @asprivate
 * Adds a <code>flash.display.DisplayObject</code> object as a descendant of <code>parent</code>.
 * The default implementation of this method, which may be overriden, adds the object
 * as a direct child of <code>parent</code> at the specified index. This is called to add 
 * InlineGraphicElements to the ITextLine or container.
 * 
 * @asparam parent the <code>flash.display.DisplayObjectContainer</code> object to add the inlineGraphicElement to
 * @asparam inlineGraphicElement the <code>flash.display.DisplayObject</code> object to add
 * @asparam index insertion index of the float in its parent 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 2.0
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see flash.display.DisplayObject
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.core.IParentIUIBase} parent
 * @param {org.apache.royale.core.IUIBase} inlineGraphicElement
 * @param {number} index
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.addInlineGraphicElement = function(parent, inlineGraphicElement, index) {
  if (parent)
    parent.addElementAt(inlineGraphicElement, index);
};


/** @asprivate
 * Removes a <code>flash.display.DisplayObject</code> object from its parent. 
 * The default implementation of this method, which may be overriden, removes the object
 * from <code>container</code> if it is a direct child of the latter.
 * 
 * This method may be called even if the object is not a descendant of <code>parent</code>.
 * Any implementation of this method must ensure that no action is taken in this case.
 * 
 * @asparam float the <code>flash.display.DisplayObject</code> object to remove 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 2.0
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see flash.display.DisplayObject
 * @see #container
 * 
 * @export
 * @param {org.apache.royale.core.IParentIUIBase} parent
 * @param {org.apache.royale.core.IUIBase} inlineGraphicElement
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.removeInlineGraphicElement = function(parent, inlineGraphicElement) {
  if (parent && inlineGraphicElement.parent == parent)
    parent.removeElement(inlineGraphicElement);
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__sourceState = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__sourceState;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__composeState = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__composeState;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__handlersState = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__handlersState;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__container = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__container;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__editingMode = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__editingMode;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__editingMode = function(val) {
  var /** @type {string} */ newMode = this.editingModePropertyDefinition.setHelper(this.org_apache_royale_textLayout_container_TextContainerManager__editingMode, val);
  if (newMode != this.org_apache_royale_textLayout_container_TextContainerManager__editingMode) {
    if (this.composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
      this.org_apache_royale_textLayout_container_TextContainerManager__editingMode = newMode;
      this.org_apache_royale_textLayout_container_TextContainerManager_invalidateInteractionManager();
    } else {
      this.org_apache_royale_textLayout_container_TextContainerManager_removeActivationEventListeners();
      this.org_apache_royale_textLayout_container_TextContainerManager__editingMode = newMode;
      if (this.org_apache_royale_textLayout_container_TextContainerManager__editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_ONLY)
        this.org_apache_royale_textLayout_container_TextContainerManager_removeIBeamCursor();
      this.org_apache_royale_textLayout_container_TextContainerManager_addActivationEventListeners();
    }
  }
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__hostFormat = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__hostFormat = function(val) {
  this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat = val;
  this.org_apache_royale_textLayout_container_TextContainerManager__stringFactoryTextFlowFormat = null;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_TEXTFLOW)
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.hostFormat = this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY)
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__compositionWidth = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__compositionWidth = function(val) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth == val || (isNaN(this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth) && isNaN(val)))
    return;
  this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth = val;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().setCompositionSize(this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth, this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight);
  } else {
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
  }
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__compositionHeight = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__compositionHeight = function(val) {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight == val || (isNaN(this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight) && isNaN(val)))
    return;
  this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight = val;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER) {
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().setCompositionSize(this.org_apache_royale_textLayout_container_TextContainerManager__compositionWidth, this.org_apache_royale_textLayout_container_TextContainerManager__compositionHeight);
  } else {
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
  }
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__configuration = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__config;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__horizontalScrollPolicy = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__horizontalScrollPolicy = function(scrollPolicy) {
  this.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy = org.apache.royale.textLayout.container.ScrollPolicy["scrollPolicyPropertyDefinition"].setHelper(this.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy, scrollPolicy);
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().horizontalScrollPolicy = this.org_apache_royale_textLayout_container_TextContainerManager__horizontalScrollPolicy;
  else
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__verticalScrollPolicy = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__verticalScrollPolicy = function(scrollPolicy) {
  this.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy = org.apache.royale.textLayout.container.ScrollPolicy["scrollPolicyPropertyDefinition"].setHelper(this.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy, scrollPolicy);
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager_getController().verticalScrollPolicy = this.org_apache_royale_textLayout_container_TextContainerManager__verticalScrollPolicy;
  else
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__horizontalScrollPosition = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER ? this.org_apache_royale_textLayout_container_TextContainerManager_getController().horizontalScrollPosition : 0;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__horizontalScrollPosition = function(val) {
  if (val == 0 && this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY)
    return;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.convertToTextFlowWithComposer();
  this.org_apache_royale_textLayout_container_TextContainerManager_getController().horizontalScrollPosition = val;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__verticalScrollPosition = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER ? this.org_apache_royale_textLayout_container_TextContainerManager_getController().verticalScrollPosition : 0;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__verticalScrollPosition = function(val) {
  if (val == 0 && this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_FACTORY)
    return;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState != org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.convertToTextFlowWithComposer();
  this.org_apache_royale_textLayout_container_TextContainerManager_getController().verticalScrollPosition = val;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__swfContext = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__swfContext;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__swfContext = function(context) {
  this.org_apache_royale_textLayout_container_TextContainerManager__swfContext = context;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.swfContext = this.org_apache_royale_textLayout_container_TextContainerManager__swfContext;
  else
    this.org_apache_royale_textLayout_container_TextContainerManager__damaged = true;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__numLines = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__composeState == org.apache.royale.textLayout.container.TextContainerManager.COMPOSE_COMPOSER)
    return this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.flowComposer.numLines;
  if (this.org_apache_royale_textLayout_container_TextContainerManager__sourceState == org.apache.royale.textLayout.container.TextContainerManager.SOURCE_STRING && this.org_apache_royale_textLayout_container_TextContainerManager__text.length == 0)
    return 1;
  return (this._composedLines.length) >> 0;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__org_apache_royale_textLayout_container_TextContainerManager_effectiveBlockProgression = function() {
  if (this.org_apache_royale_textLayout_container_TextContainerManager__textFlow)
    return org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_container_TextContainerManager__textFlow.computedFormat.blockProgression);
  return org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat && this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat.blockProgression && this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat.blockProgression != org.apache.royale.textLayout.formats.FormatValue.INHERIT ? this.org_apache_royale_textLayout_container_TextContainerManager__hostFormat.blockProgression : org.apache.royale.textLayout.formats.BlockProgression.TB);
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__org_apache_royale_textLayout_container_TextContainerManager_hasScrollRect = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__org_apache_royale_textLayout_container_TextContainerManager_hasScrollRect = function(value) {
  this.org_apache_royale_textLayout_container_TextContainerManager__hasScrollRect = value;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.get__preserveSelectionOnSetText = function() {
  return this.org_apache_royale_textLayout_container_TextContainerManager__preserveSelectionOnSetText;
};


org.apache.royale.textLayout.container.TextContainerManager.prototype.set__preserveSelectionOnSetText = function(value) {
  this.org_apache_royale_textLayout_container_TextContainerManager__preserveSelectionOnSetText = value;
};


Object.defineProperties(org.apache.royale.textLayout.container.TextContainerManager.prototype, /** @lends {org.apache.royale.textLayout.container.TextContainerManager.prototype} */ {
/**
  * @export
  * @type {number} */
sourceState: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__sourceState},
/**
  * @export
  * @type {number} */
composeState: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__composeState},
/**
  * @export
  * @type {number} */
handlersState: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__handlersState},
/**
  * @export
  * @type {org.apache.royale.core.IParentIUIBase} */
container: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__container},
/**
  * @export
  * @type {string} */
editingMode: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__editingMode,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__editingMode},
/**
  * @export
  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */
hostFormat: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__hostFormat,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__hostFormat},
/**
  * @export
  * @type {number} */
compositionWidth: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__compositionWidth,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__compositionWidth},
/**
  * @export
  * @type {number} */
compositionHeight: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__compositionHeight,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__compositionHeight},
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.IConfiguration} */
configuration: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__configuration},
/**
  * @export
  * @type {string} */
horizontalScrollPolicy: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__horizontalScrollPolicy,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__horizontalScrollPolicy},
/**
  * @export
  * @type {string} */
verticalScrollPolicy: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__verticalScrollPolicy,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__verticalScrollPolicy},
/**
  * @export
  * @type {number} */
horizontalScrollPosition: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__horizontalScrollPosition,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__horizontalScrollPosition},
/**
  * @export
  * @type {number} */
verticalScrollPosition: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__verticalScrollPosition,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__verticalScrollPosition},
/**
  * @export
  * @type {org.apache.royale.textLayout.compose.ISWFContext} */
swfContext: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__swfContext,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__swfContext},
/**
  * @export
  * @type {number} */
numLines: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__numLines},
/**
  * @type {string} */
org_apache_royale_textLayout_container_TextContainerManager_effectiveBlockProgression: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__org_apache_royale_textLayout_container_TextContainerManager_effectiveBlockProgression},
/**
  * @type {boolean} */
org_apache_royale_textLayout_container_TextContainerManager_hasScrollRect: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__org_apache_royale_textLayout_container_TextContainerManager_hasScrollRect,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__org_apache_royale_textLayout_container_TextContainerManager_hasScrollRect},
/**
  * @export
  * @type {boolean} */
preserveSelectionOnSetText: {
get: org.apache.royale.textLayout.container.TextContainerManager.prototype.get__preserveSelectionOnSetText,
set: org.apache.royale.textLayout.container.TextContainerManager.prototype.set__preserveSelectionOnSetText}}
);


org.apache.royale.textLayout.container.TextContainerManager.get__defaultConfiguration = function() {
  if (org.apache.royale.textLayout.container.TextContainerManager._defaultConfiguration == null)
    org.apache.royale.textLayout.container.TextContainerManager._defaultConfiguration = org.apache.royale.textLayout.container.TextContainerManager.customizeConfiguration(null);
  return org.apache.royale.textLayout.container.TextContainerManager._defaultConfiguration;
};


Object.defineProperties(org.apache.royale.textLayout.container.TextContainerManager, /** @lends {org.apache.royale.textLayout.container.TextContainerManager} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.IConfiguration} */
defaultConfiguration: {
get: org.apache.royale.textLayout.container.TextContainerManager.get__defaultConfiguration}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextContainerManager', qName: 'org.apache.royale.textLayout.container.TextContainerManager', kind: 'class' }], interfaces: [org.apache.royale.textLayout.compose.ISWFContext, org.apache.royale.textLayout.edit.IInteractionEventHandler, org.apache.royale.textLayout.container.ISandboxSupport, org.apache.royale.textLayout.container.ITextContainerManager] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '_composedLines': { type: 'Array', get_set: function (/** org.apache.royale.textLayout.container.TextContainerManager */ inst, /** * */ v) {return v !== undefined ? inst._composedLines = v : inst._composedLines;}}
      };
    },
    accessors: function () {
      return {
        '|defaultConfiguration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'sourceState': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'composeState': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'handlersState': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'container': { type: 'org.apache.royale.core.IParentIUIBase', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'editingMode': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'hostFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'compositionWidth': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'compositionHeight': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'configuration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'horizontalScrollPolicy': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'verticalScrollPolicy': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'horizontalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'verticalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'swfContext': { type: 'org.apache.royale.textLayout.compose.ISWFContext', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'numLines': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'preserveSelectionOnSetText': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'}
      };
    },
    methods: function () {
      return {
        '|customizeConfiguration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IConfiguration', false ]; }},
        '|releaseReferences': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'TextContainerManager': { type: '', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.textLayout.elements.IConfiguration', true ]; }},
        'isDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'getText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'String', true ]; }},
        'setText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'String', false ]; }},
        'getContentBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'getTextFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'setTextFlow': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ]; }},
        'getScrollDelta': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'int', false ]; }},
        'scrollToRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'getBaseSWFContext': { type: 'org.apache.royale.textLayout.compose.ISWFContext', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'callInContext': { type: '*', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'Function', false ,'Object', false ,'Array', false ,'Boolean', true ]; }},
        'resetLine': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ]; }},
        'beginInteraction': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'endInteraction': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'invalidateUndoManager': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'invalidateSelectionFormats': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'getLineAt': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'int', false ]; }},
        'getActualNumLines': { type: 'int', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'clearComposedLines': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'compose': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'updateContainer': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'factoryUpdateContainerChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'getContextMenu': { type: 'org.apache.royale.textLayout.dummy.ContextMenu', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'clearContainerChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'Boolean', false ]; }},
        'convertToTextFlowWithComposer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'Boolean', true ]; }},
        'drawBackgroundAndSetScrollRect': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'editHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'keyDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyFocusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'textInputHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.text.events.TextEvent', false ]; }},
        'imeStartCompositionHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.text.events.IMEEvent', false ]; }},
        'softKeyboardActivatingHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'mouseDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseMoveHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseDoubleClickHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'requiredMouseOverHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOverHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'focusInHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'requiredFocusOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'focusOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'activateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'deactivateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'focusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'menuSelectHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.textLayout.events.ContextMenuEvent', false ]; }},
        'mouseWheelHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'requiredFocusInHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'beginMouseCapture': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'endMouseCapture': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'mouseUpSomewhere': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'mouseMoveSomewhere': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'getFirstTextLineChildIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager'},
        'addTextLine': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ,'int', false ]; }},
        'removeTextLine': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ]; }},
        'addBackgroundShape': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IUIBase', false ]; }},
        'removeBackgroundShape': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IUIBase', false ]; }},
        'addSelectionContainer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ]; }},
        'removeSelectionContainer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ]; }},
        'addInlineGraphicElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.core.IUIBase', false ,'int', false ]; }},
        'removeInlineGraphicElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.core.IUIBase', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @constructor
 * @extends {org.apache.royale.events.MouseEvent}
 * @param {org.apache.royale.events.MouseEvent} event
 * @param {boolean=} cloning
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent = function(event, cloning) {
  cloning = typeof cloning !== 'undefined' ? cloning : false;
  var /** @type {org.apache.royale.geom.Point} */ containerPoint;
  if (!cloning) {
    containerPoint = org.apache.royale.utils.PointUtils.localToGlobal(new org.apache.royale.geom.Point(event.localX, event.localY), event.target);
    containerPoint = org.apache.royale.utils.PointUtils.globalToLocal(containerPoint, event.currentTarget);
  }
  else
    containerPoint = new org.apache.royale.geom.Point();
  org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.base(this, 'constructor', event.type, event.bubbles, event.cancelable, containerPoint.x, containerPoint.y, event.relatedObject, event.ctrlKey, event.altKey, event.shiftKey, event.buttonDown, event.delta);
  this.RemappedMouseEvent__event = event;
};
goog.inherits(org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent, org.apache.royale.events.MouseEvent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent', org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent);


/**
 * @private
 * @type {org.apache.royale.events.MouseEvent}
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.RemappedMouseEvent__event;


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.isDefaultPrevented = function() {
  return this.RemappedMouseEvent__event.defaultPrevented;
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.preventDefault = function() {
  this.RemappedMouseEvent__event.preventDefault();
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.stopImmediatePropagation = function() {
  this.RemappedMouseEvent__event.stopImmediatePropagation();
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.stopPropagation = function() {
  this.RemappedMouseEvent__event.stopPropagation();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RemappedMouseEvent', qName: 'org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'RemappedMouseEvent': { type: '', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ,'Boolean', true ]; }},
        'isDefaultPrevented': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent'},
        'preventDefault': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent'},
        'stopImmediatePropagation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent'},
        'stopPropagation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.TextContainerManager.RemappedMouseEvent.prototype.ROYALE_COMPILE_FLAGS = 10;
