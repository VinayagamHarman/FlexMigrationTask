/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/operations/InsertTextOperation.as
 * org.apache.royale.textLayout.operations.InsertTextOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.operations.InsertTextOperation');
/* Royale Dependency List: org.apache.royale.textLayout.edit.ModelEdit,org.apache.royale.textLayout.edit.ParaEdit,org.apache.royale.textLayout.edit.PointFormat,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.edit.TextFlowEdit,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.operations.CompositeOperation,org.apache.royale.textLayout.operations.DeleteTextOperation,org.apache.royale.textLayout.operations.FlowOperation,org.apache.royale.textLayout.operations.SplitParagraphOperation,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.operations.FlowTextOperation');



/** 
 * Creates an InsertTextOperation object.
 * 
 * @asparam operationState Describes the insertion point or range of text.
 * @asparam text The string to insert.
 * @asparam deleteSelectionState Describes the range of text to delete before doing insertion, 
 * if different than the range described by <code>operationState</code>.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @constructor
 * @extends {org.apache.royale.textLayout.operations.FlowTextOperation}
 * @param {org.apache.royale.textLayout.edit.SelectionState} operationState
 * @param {string} text
 * @param {org.apache.royale.textLayout.edit.SelectionState=} deleteSelectionState
 */
org.apache.royale.textLayout.operations.InsertTextOperation = function(operationState, text, deleteSelectionState) {
  deleteSelectionState = typeof deleteSelectionState !== 'undefined' ? deleteSelectionState : null;
  org.apache.royale.textLayout.operations.InsertTextOperation.base(this, 'constructor', operationState);
  this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat = operationState.pointFormat;
  this._text = text;
  this.org_apache_royale_textLayout_operations_InsertTextOperation_initialize(deleteSelectionState);
};
goog.inherits(org.apache.royale.textLayout.operations.InsertTextOperation, org.apache.royale.textLayout.operations.FlowTextOperation);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.operations.InsertTextOperation', org.apache.royale.textLayout.operations.InsertTextOperation);


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation__deleteSelectionState;


/**
 * @private
 * @type {org.apache.royale.textLayout.operations.DeleteTextOperation}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation_delSelOp = null;


/**
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype._text;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat;


/**
 * @private
 * @param {org.apache.royale.textLayout.edit.SelectionState} deleteSelectionState
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation_initialize = function(deleteSelectionState) {
  if (deleteSelectionState == null)
    deleteSelectionState = this.originalSelectionState;
  if (deleteSelectionState.anchorPosition != deleteSelectionState.activePosition) {
    this.org_apache_royale_textLayout_operations_InsertTextOperation__deleteSelectionState = deleteSelectionState;
    this.org_apache_royale_textLayout_operations_InsertTextOperation_delSelOp = new org.apache.royale.textLayout.operations.DeleteTextOperation(this.org_apache_royale_textLayout_operations_InsertTextOperation__deleteSelectionState);
  }
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} leaf
 * @return {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation_doDelete = function(leaf) {
  var /** @type {org.apache.royale.textLayout.edit.PointFormat} */ deleteFormat = org.apache.royale.textLayout.edit.PointFormat.createFromFlowElement(this.textFlow.findLeaf(this.absoluteStart));
  var /** @type {org.apache.royale.textLayout.edit.PointFormat} */ beforeDeleteFormat = this.absoluteStart == leaf.getParagraph().getAbsoluteStart() ? null : org.apache.royale.textLayout.edit.PointFormat.createFromFlowElement(this.textFlow.findLeaf((this.absoluteStart - 1) >> 0));
  if (this.org_apache_royale_textLayout_operations_InsertTextOperation_delSelOp.doOperation()) {
    if (!this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat && (this.absoluteStart < this.absoluteEnd) && org.apache.royale.textLayout.edit.PointFormat.isEqual(deleteFormat, beforeDeleteFormat))
      deleteFormat = null; else {
      if (leaf.textLength == 0)
        leaf.parent.removeChild(leaf);
    }
  }
  return deleteFormat;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.ISpanElement} span
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} pointFormat
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation_applyPointFormat = function(span, pointFormat) {
  if (!org.apache.royale.textLayout.formats.TextLayoutFormat.isEqual(pointFormat, span.format)) {
    var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ spanFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(span.format);
    spanFormat.apply(pointFormat);
    span.format = spanFormat;
  }
  if (org.apache.royale.utils.Language.is(pointFormat, org.apache.royale.textLayout.edit.PointFormat)) {
    var /** @type {org.apache.royale.textLayout.edit.PointFormat} */ pf = pointFormat;
    if (pf.linkElement) {
      if (pf.linkElement.href) {
        org.apache.royale.textLayout.edit.TextFlowEdit.makeLink(this.textFlow, this.absoluteStart, (this.absoluteStart + this._text.length) >> 0, org.apache.royale.utils.Language.string(pf.linkElement.href), org.apache.royale.utils.Language.string(pf.linkElement.target));
        var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ linkLeaf = this.textFlow.findLeaf(this.absoluteStart);
        var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ linkElement = linkLeaf.getParentByType("LinkElement");
        linkElement.format = pf.linkElement.format;
      }
    }
    if (pf.tcyElement) {
      org.apache.royale.textLayout.edit.TextFlowEdit.makeTCY(this.textFlow, this.absoluteStart, (this.absoluteStart + this._text.length) >> 0);
      var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ tcyLeaf = this.textFlow.findLeaf(this.absoluteStart);
      var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ tcyElement = tcyLeaf.getParentByType("TCYElement");
      tcyElement.format = pf.tcyElement.format;
    }
    else if (span.getParentByType("TCYElement"))
      org.apache.royale.textLayout.edit.TextFlowEdit.removeTCY(this.textFlow, this.absoluteStart, (this.absoluteStart + this._text.length) >> 0);
  }
};


/**
 * @private
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.org_apache_royale_textLayout_operations_InsertTextOperation_doInternal = function() {
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ deleteFormat;
  if (this.org_apache_royale_textLayout_operations_InsertTextOperation_delSelOp != null)
    deleteFormat = this.org_apache_royale_textLayout_operations_InsertTextOperation_doDelete(this.textFlow.findLeaf(this.absoluteStart));
  var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ span = org.apache.royale.textLayout.edit.ParaEdit.insertText(this.textFlow, this.absoluteStart, this._text, this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat != null || deleteFormat != null);
  if (this.textFlow.interactionManager)
    this.textFlow.interactionManager.notifyInsertOrDelete(this.absoluteStart, (this._text.length) >> 0);
  if (span != null) {
    if (deleteFormat) {
      span.format = deleteFormat;
      this.org_apache_royale_textLayout_operations_InsertTextOperation_applyPointFormat(span, deleteFormat);
      if (org.apache.royale.utils.Language.is(deleteFormat, org.apache.royale.textLayout.edit.PointFormat) && org.apache.royale.utils.Language.as(deleteFormat, org.apache.royale.textLayout.edit.PointFormat, true).linkElement && org.apache.royale.utils.Language.as(deleteFormat, org.apache.royale.textLayout.edit.PointFormat, true).linkElement.href && this.originalSelectionState.selectionManagerOperationState && this.textFlow.interactionManager) {
        var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ state = this.textFlow.interactionManager.getSelectionState();
        state.pointFormat = org.apache.royale.textLayout.edit.PointFormat.clone(deleteFormat);
        this.textFlow.interactionManager.setSelectionState(state);
      }
    }
    if (this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat)
      this.org_apache_royale_textLayout_operations_InsertTextOperation_applyPointFormat(span, this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat);
  }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.doOperation = function() {
  this.org_apache_royale_textLayout_operations_InsertTextOperation_doInternal();
  return true;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.undo = function() {
  org.apache.royale.textLayout.edit.ModelEdit.deleteText(this.textFlow, this.absoluteStart, (this.absoluteStart + this._text.length) >> 0, false);
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ newSelectionState = this.originalSelectionState;
  if (this.org_apache_royale_textLayout_operations_InsertTextOperation_delSelOp != null)
    newSelectionState = this.org_apache_royale_textLayout_operations_InsertTextOperation_delSelOp.undo();
  return this.originalSelectionState;
};


/**
 * Re-executes the operation after it has been undone.
 * 
 * <p>This function is called by the edit manager, when necessary.</p>
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.redo = function() {
  this.org_apache_royale_textLayout_operations_InsertTextOperation_doInternal();
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, this.absoluteStart + this._text.length, this.absoluteStart + this._text.length, null);
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.merge = function(op2) {
  if (this.absoluteStart < this.absoluteEnd)
    return null;
  if (this.endGeneration != op2.beginGeneration)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.InsertTextOperation} */ insertOp = null;
  if (org.apache.royale.utils.Language.is(op2, org.apache.royale.textLayout.operations.InsertTextOperation))
    insertOp = op2;
  if (insertOp) {
    if (insertOp.deleteSelectionState != null || this.deleteSelectionState != null)
      return null;
    if ((insertOp.originalSelectionState.pointFormat == null) && (this.originalSelectionState.pointFormat != null))
      return null;
    if ((this.originalSelectionState.pointFormat == null) && (insertOp.originalSelectionState.pointFormat != null))
      return null;
    if (this.originalSelectionState.absoluteStart + this._text.length != insertOp.originalSelectionState.absoluteStart)
      return null;
    if (((this.originalSelectionState.pointFormat == null) && (insertOp.originalSelectionState.pointFormat == null)) || org.apache.royale.textLayout.edit.PointFormat.isEqual(this.originalSelectionState.pointFormat, insertOp.originalSelectionState.pointFormat)) {
      this._text += insertOp.text;
      this.setGenerations(this.beginGeneration, insertOp.endGeneration);
    }
    else
      return null;
    this.setGenerations(this.beginGeneration, insertOp.endGeneration);
    return this;
  }
  if (org.apache.royale.utils.Language.is(op2, org.apache.royale.textLayout.operations.SplitParagraphOperation))
    return new org.apache.royale.textLayout.operations.CompositeOperation([this, op2]);
  return null;
};


org.apache.royale.textLayout.operations.InsertTextOperation.prototype.get__text = function() {
  return this._text;
};


org.apache.royale.textLayout.operations.InsertTextOperation.prototype.set__text = function(value) {
  this._text = value;
};


org.apache.royale.textLayout.operations.InsertTextOperation.prototype.get__deleteSelectionState = function() {
  return this.org_apache_royale_textLayout_operations_InsertTextOperation__deleteSelectionState;
};


org.apache.royale.textLayout.operations.InsertTextOperation.prototype.set__deleteSelectionState = function(value) {
  this.org_apache_royale_textLayout_operations_InsertTextOperation__deleteSelectionState = value;
};


org.apache.royale.textLayout.operations.InsertTextOperation.prototype.get__characterFormat = function() {
  return this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat;
};


org.apache.royale.textLayout.operations.InsertTextOperation.prototype.set__characterFormat = function(value) {
  this.org_apache_royale_textLayout_operations_InsertTextOperation__pointFormat = new org.apache.royale.textLayout.edit.PointFormat(value);
};


Object.defineProperties(org.apache.royale.textLayout.operations.InsertTextOperation.prototype, /** @lends {org.apache.royale.textLayout.operations.InsertTextOperation.prototype} */ {
/**
  * @export
  * @type {string} */
text: {
get: org.apache.royale.textLayout.operations.InsertTextOperation.prototype.get__text,
set: org.apache.royale.textLayout.operations.InsertTextOperation.prototype.set__text},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionState} */
deleteSelectionState: {
get: org.apache.royale.textLayout.operations.InsertTextOperation.prototype.get__deleteSelectionState,
set: org.apache.royale.textLayout.operations.InsertTextOperation.prototype.set__deleteSelectionState},
/**
  * @export
  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */
characterFormat: {
get: org.apache.royale.textLayout.operations.InsertTextOperation.prototype.get__characterFormat,
set: org.apache.royale.textLayout.operations.InsertTextOperation.prototype.set__characterFormat}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'InsertTextOperation', qName: 'org.apache.royale.textLayout.operations.InsertTextOperation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '_text': { type: 'String', get_set: function (/** org.apache.royale.textLayout.operations.InsertTextOperation */ inst, /** * */ v) {return v !== undefined ? inst._text = v : inst._text;}}
      };
    },
    accessors: function () {
      return {
        'text': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation'},
        'deleteSelectionState': { type: 'org.apache.royale.textLayout.edit.SelectionState', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation'},
        'characterFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation'}
      };
    },
    methods: function () {
      return {
        'InsertTextOperation': { type: '', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', false ,'String', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'doOperation': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation'},
        'undo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation'},
        'redo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation'},
        'merge': { type: 'org.apache.royale.textLayout.operations.FlowOperation', declaredBy: 'org.apache.royale.textLayout.operations.InsertTextOperation', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.operations.InsertTextOperation.prototype.ROYALE_COMPILE_FLAGS = 10;
