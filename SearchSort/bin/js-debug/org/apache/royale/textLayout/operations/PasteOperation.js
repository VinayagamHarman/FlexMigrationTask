/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/operations/PasteOperation.as
 * org.apache.royale.textLayout.operations.PasteOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.operations.PasteOperation');
/* Royale Dependency List: org.apache.royale.textLayout.conversion.ConversionConstants,org.apache.royale.textLayout.edit.ModelEdit,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.edit.TextFlowEdit,org.apache.royale.textLayout.edit.TextScrap,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.operations.ApplyFormatOperation,org.apache.royale.textLayout.operations.ApplyFormatToElementOperation,org.apache.royale.textLayout.operations.DeleteTextOperation,XML*/

goog.require('org.apache.royale.textLayout.operations.FlowTextOperation');



/** 
 * Creates a PasteOperation object.
 * 
 * @asparam operationState Describes the insertion point or a range of text 
 * to replace.
 * @asparam textScrap The content to paste into the text flow.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @constructor
 * @extends {org.apache.royale.textLayout.operations.FlowTextOperation}
 * @param {org.apache.royale.textLayout.edit.SelectionState} operationState
 * @param {org.apache.royale.textLayout.edit.TextScrap} textScrap
 */
org.apache.royale.textLayout.operations.PasteOperation = function(operationState, textScrap) {
  this.org_apache_royale_textLayout_operations_PasteOperation__pointFormat = operationState.pointFormat;
  org.apache.royale.textLayout.operations.PasteOperation.base(this, 'constructor', operationState);
  this.org_apache_royale_textLayout_operations_PasteOperation__textScrap = textScrap;
};
goog.inherits(org.apache.royale.textLayout.operations.PasteOperation, org.apache.royale.textLayout.operations.FlowTextOperation);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.operations.PasteOperation', org.apache.royale.textLayout.operations.PasteOperation);


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation__textScrap;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation__numCharsAdded = 0;


/**
 * @private
 * @type {org.apache.royale.textLayout.operations.DeleteTextOperation}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation__pointFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.operations.ApplyFormatOperation}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat;


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.doOperation = function() {
  if (this.org_apache_royale_textLayout_operations_PasteOperation__textScrap != null) {
    if (this.absoluteStart != this.absoluteEnd) {
      this.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation = new org.apache.royale.textLayout.operations.DeleteTextOperation(this.originalSelectionState);
      this.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation.doOperation();
    }
    var /** @type {boolean} */ preserveScrapParagraph = false;
    var /** @type {boolean} */ plainText = this.org_apache_royale_textLayout_operations_PasteOperation__textScrap.isPlainText();
    if (!plainText) {
      var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.textFlow.findLeaf(this.absoluteStart);
      var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paragraph = leaf.getParagraph();
      if (paragraph.textLength == 1)
        preserveScrapParagraph = true;
    }
    var /** @type {number} */ nextInsertPosition = org.apache.royale.textLayout.edit.TextFlowEdit.insertTextScrap(this.textFlow, this.absoluteStart, this.org_apache_royale_textLayout_operations_PasteOperation__textScrap, plainText);
    if (this.textFlow.interactionManager)
      this.textFlow.interactionManager.notifyInsertOrDelete(this.absoluteStart, (nextInsertPosition - this.absoluteStart) >> 0);
    this.org_apache_royale_textLayout_operations_PasteOperation__numCharsAdded = ((nextInsertPosition - this.absoluteStart)) >> 0;
    if (preserveScrapParagraph) {
      this.org_apache_royale_textLayout_operations_PasteOperation_applyPreserveSettings();
    } else if (this.org_apache_royale_textLayout_operations_PasteOperation__pointFormat && plainText) {
      this.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat = new org.apache.royale.textLayout.operations.ApplyFormatOperation(new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, this.absoluteStart, this.absoluteStart + this.org_apache_royale_textLayout_operations_PasteOperation__numCharsAdded), this.org_apache_royale_textLayout_operations_PasteOperation__pointFormat, null, null);
      this.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat.doOperation();
    }
  }
  return true;
};


/**
 * @private
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.org_apache_royale_textLayout_operations_PasteOperation_applyPreserveSettings = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ scrap = this.org_apache_royale_textLayout_operations_PasteOperation__textScrap.textFlow;
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ scrapParagraph = scrap.getFirstLeaf().getParagraph();
  this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings = [];
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ format = new org.apache.royale.textLayout.formats.TextLayoutFormat(scrapParagraph.format);
  format.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, undefined);
  var /** @type {org.apache.royale.textLayout.operations.ApplyFormatToElementOperation} */ applyParagraphFormat = new org.apache.royale.textLayout.operations.ApplyFormatToElementOperation(this.originalSelectionState, this.textFlow.findLeaf(this.absoluteStart).getParagraph(), format);
  applyParagraphFormat.doOperation();
  this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings.push(applyParagraphFormat);
  if (scrap.numChildren > 1) {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ scrapEndParagraph = scrap.getLastLeaf().getParagraph();
    format = new org.apache.royale.textLayout.formats.TextLayoutFormat(scrapEndParagraph.format);
    format.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, undefined);
    var /** @type {org.apache.royale.textLayout.operations.ApplyFormatToElementOperation} */ applyEndParagraphFormat = new org.apache.royale.textLayout.operations.ApplyFormatToElementOperation(this.originalSelectionState, this.textFlow.findLeaf((this.absoluteStart + scrap.textLength - 1) >> 0).getParagraph(), format);
    applyEndParagraphFormat.doOperation();
    this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings.push(applyEndParagraphFormat);
  }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.undo = function() {
  if (this.org_apache_royale_textLayout_operations_PasteOperation__textScrap != null) {
    if (this.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat)
      this.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat.undo();
    if (this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings) {
      for (var /** @type {number} */ i = (this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings.length - 1) >> 0; i >= 0; --i)
        this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings[i].undo();
    }
    org.apache.royale.textLayout.edit.ModelEdit.deleteText(this.textFlow, this.absoluteStart, (this.absoluteStart + this.org_apache_royale_textLayout_operations_PasteOperation__numCharsAdded) >> 0, false);
    if (this.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation)
      this.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation.undo();
  }
  return this.originalSelectionState;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.redo = function() {
  if (this.org_apache_royale_textLayout_operations_PasteOperation__textScrap != null) {
    if (this.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation)
      this.org_apache_royale_textLayout_operations_PasteOperation__deleteTextOperation.redo();
    var /** @type {number} */ nextInsertPosition = org.apache.royale.textLayout.edit.TextFlowEdit.insertTextScrap(this.textFlow, this.absoluteStart, this.org_apache_royale_textLayout_operations_PasteOperation__textScrap, this.org_apache_royale_textLayout_operations_PasteOperation__textScrap.isPlainText());
    if (this.textFlow.interactionManager)
      this.textFlow.interactionManager.notifyInsertOrDelete(this.absoluteStart, (nextInsertPosition - this.absoluteStart) >> 0);
    if (this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings) {
      for (var /** @type {number} */ i = (this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings.length - 1) >> 0; i >= 0; --i)
        this.org_apache_royale_textLayout_operations_PasteOperation__applyParagraphSettings[i].redo();
    }
    if (this.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat)
      this.org_apache_royale_textLayout_operations_PasteOperation__applyPointFormat.redo();
  }
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, this.absoluteStart + this.org_apache_royale_textLayout_operations_PasteOperation__numCharsAdded, this.absoluteStart + this.org_apache_royale_textLayout_operations_PasteOperation__numCharsAdded, null);
};


org.apache.royale.textLayout.operations.PasteOperation.prototype.get__textScrap = function() {
  return this.org_apache_royale_textLayout_operations_PasteOperation__textScrap;
};


org.apache.royale.textLayout.operations.PasteOperation.prototype.set__textScrap = function(val) {
  this.org_apache_royale_textLayout_operations_PasteOperation__textScrap = val;
};


Object.defineProperties(org.apache.royale.textLayout.operations.PasteOperation.prototype, /** @lends {org.apache.royale.textLayout.operations.PasteOperation.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.TextScrap} */
textScrap: {
get: org.apache.royale.textLayout.operations.PasteOperation.prototype.get__textScrap,
set: org.apache.royale.textLayout.operations.PasteOperation.prototype.set__textScrap}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'PasteOperation', qName: 'org.apache.royale.textLayout.operations.PasteOperation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'textScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.PasteOperation'}
      };
    },
    methods: function () {
      return {
        'PasteOperation': { type: '', declaredBy: 'org.apache.royale.textLayout.operations.PasteOperation', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', false ,'org.apache.royale.textLayout.edit.TextScrap', false ]; }},
        'doOperation': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.operations.PasteOperation'},
        'undo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.PasteOperation'},
        'redo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.PasteOperation'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.operations.PasteOperation.prototype.ROYALE_COMPILE_FLAGS = 10;
