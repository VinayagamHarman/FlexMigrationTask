/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/operations/DeleteTextOperation.as
 * org.apache.royale.textLayout.operations.DeleteTextOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.operations.DeleteTextOperation');
/* Royale Dependency List: org.apache.royale.textLayout.edit.IMemento,org.apache.royale.textLayout.edit.ModelEdit,org.apache.royale.textLayout.edit.PointFormat,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.operations.CompositeOperation,org.apache.royale.textLayout.operations.FlowOperation,XML*/

goog.require('org.apache.royale.textLayout.operations.FlowTextOperation');



/** 
 * Creates a DeleteTextOperation operation.
 * 
 * @asparam operationState The original range of text.
 * @asparam deleteSelectionState The range of text to delete, if different from the range 
 * described by <code>operationState</code>. (Set to <code>null</code> to delete the range
 * described by <code>operationState</code>.)
 * @asparam allowMerge Set to <code>true</code> if this operation can be merged with the next or previous operation.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @constructor
 * @extends {org.apache.royale.textLayout.operations.FlowTextOperation}
 * @param {org.apache.royale.textLayout.edit.SelectionState} operationState
 * @param {org.apache.royale.textLayout.edit.SelectionState=} deleteSelectionState
 * @param {boolean=} allowMerge
 */
org.apache.royale.textLayout.operations.DeleteTextOperation = function(operationState, deleteSelectionState, allowMerge) {
  deleteSelectionState = typeof deleteSelectionState !== 'undefined' ? deleteSelectionState : null;
  allowMerge = typeof allowMerge !== 'undefined' ? allowMerge : false;
  this.org_apache_royale_textLayout_operations_DeleteTextOperation__deleteSelectionState = deleteSelectionState ? deleteSelectionState : operationState;
  org.apache.royale.textLayout.operations.DeleteTextOperation.base(this, 'constructor', this.org_apache_royale_textLayout_operations_DeleteTextOperation__deleteSelectionState);
  this.originalSelectionState = operationState;
  this.org_apache_royale_textLayout_operations_DeleteTextOperation__allowMerge = allowMerge;
};
goog.inherits(org.apache.royale.textLayout.operations.DeleteTextOperation, org.apache.royale.textLayout.operations.FlowTextOperation);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.operations.DeleteTextOperation', org.apache.royale.textLayout.operations.DeleteTextOperation);


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.IMemento}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.org_apache_royale_textLayout_operations_DeleteTextOperation__memento;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.org_apache_royale_textLayout_operations_DeleteTextOperation__allowMerge;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.PointFormat}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.org_apache_royale_textLayout_operations_DeleteTextOperation__deleteSelectionState = null;


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.doOperation = function() {
  if (this.absoluteStart == this.absoluteEnd)
    return false;
  this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat = org.apache.royale.textLayout.edit.PointFormat.createFromFlowElement(this.textFlow.findLeaf(this.absoluteStart));
  if (this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat.linkElement)
    this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat.linkElement = null;
  if (this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat.tcyElement)
    this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat.tcyElement = null;
  this.org_apache_royale_textLayout_operations_DeleteTextOperation__memento = org.apache.royale.textLayout.edit.ModelEdit.deleteText(this.textFlow, this.absoluteStart, this.absoluteEnd, true);
  if (this.originalSelectionState.selectionManagerOperationState && this.textFlow.interactionManager) {
    var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ state = this.textFlow.interactionManager.getSelectionState();
    if (state.anchorPosition == state.activePosition) {
      state.pointFormat = org.apache.royale.textLayout.edit.PointFormat.clone(this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat);
      this.textFlow.interactionManager.setSelectionState(state);
    }
  }
  return true;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.undo = function() {
  if (this.org_apache_royale_textLayout_operations_DeleteTextOperation__memento)
    this.org_apache_royale_textLayout_operations_DeleteTextOperation__memento.undo();
  return this.originalSelectionState;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.redo = function() {
  if (this.org_apache_royale_textLayout_operations_DeleteTextOperation__memento)
    this.org_apache_royale_textLayout_operations_DeleteTextOperation__memento.redo();
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, this.absoluteStart, this.absoluteStart, this.org_apache_royale_textLayout_operations_DeleteTextOperation__pendingFormat);
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.merge = function(op2) {
  if (this.endGeneration != op2.beginGeneration)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.DeleteTextOperation} */ delOp = op2;
  if ((delOp == null) || !delOp.allowMerge || !this.org_apache_royale_textLayout_operations_DeleteTextOperation__allowMerge)
    return null;
  return new org.apache.royale.textLayout.operations.CompositeOperation([this, op2]);
};


org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.get__allowMerge = function() {
  return this.org_apache_royale_textLayout_operations_DeleteTextOperation__allowMerge;
};


org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.set__allowMerge = function(value) {
  this.org_apache_royale_textLayout_operations_DeleteTextOperation__allowMerge = value;
};


org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.get__deleteSelectionState = function() {
  return this.org_apache_royale_textLayout_operations_DeleteTextOperation__deleteSelectionState;
};


org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.set__deleteSelectionState = function(value) {
  this.org_apache_royale_textLayout_operations_DeleteTextOperation__deleteSelectionState = value;
};


Object.defineProperties(org.apache.royale.textLayout.operations.DeleteTextOperation.prototype, /** @lends {org.apache.royale.textLayout.operations.DeleteTextOperation.prototype} */ {
/**
  * @export
  * @type {boolean} */
allowMerge: {
get: org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.get__allowMerge,
set: org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.set__allowMerge},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionState} */
deleteSelectionState: {
get: org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.get__deleteSelectionState,
set: org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.set__deleteSelectionState}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DeleteTextOperation', qName: 'org.apache.royale.textLayout.operations.DeleteTextOperation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'allowMerge': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation'},
        'deleteSelectionState': { type: 'org.apache.royale.textLayout.edit.SelectionState', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation'}
      };
    },
    methods: function () {
      return {
        'DeleteTextOperation': { type: '', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', false ,'org.apache.royale.textLayout.edit.SelectionState', true ,'Boolean', true ]; }},
        'doOperation': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation'},
        'undo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation'},
        'redo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation'},
        'merge': { type: 'org.apache.royale.textLayout.operations.FlowOperation', declaredBy: 'org.apache.royale.textLayout.operations.DeleteTextOperation', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.operations.DeleteTextOperation.prototype.ROYALE_COMPILE_FLAGS = 10;
