/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/operations/FlowOperation.as
 * org.apache.royale.textLayout.operations.FlowOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.operations.FlowOperation');
/* Royale Dependency List: org.apache.royale.textLayout.edit.IEditManager,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.elements.ITextFlow,XML*/

goog.require('org.apache.royale.utils.undo.IOperation');



/** 
 * Creates the FlowOperation object.
 * 
 * @asparam textFlow	The text flow to which this operation is applied.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @constructor
 * @implements {org.apache.royale.utils.undo.IOperation}
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 */
org.apache.royale.textLayout.operations.FlowOperation = function(textFlow) {
  this.org_apache_royale_textLayout_operations_FlowOperation__textFlow = textFlow;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.operations.FlowOperation', org.apache.royale.textLayout.operations.FlowOperation);


/**
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.userData;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.org_apache_royale_textLayout_operations_FlowOperation__beginGeneration = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.org_apache_royale_textLayout_operations_FlowOperation__endGeneration = 0;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.org_apache_royale_textLayout_operations_FlowOperation__textFlow;


/** 
 * Executes the operation. 
 * 
 * <p>This method must be overridden in derived classes. The base class method does nothing.
 * You should not call <code>doOperation()</code> directly. The edit manager 
 * calls the method when it executes the operation. </p>
 * 
 * @asreturn Boolean <code>true</code>, if the operation succeeded. Otherwise, <code>false</code>.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.doOperation = function() {
  return false;
};


/**	
 * Reverses the operation. 
 * 
 * <p>This method must be overridden in derived classes. The base class method does nothing.
 * You should not call <code>undo()</code> directly. The edit manager 
 * calls the method when it reverses the operation. </p>
 * 
 * @asreturn The SelectionState object passed to the operation when it was performed. This
 * SelectionState object can be the current selection or a selection created specifically
 * for the operation. 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.undo = function() {
  return null;
};


/**	
 * Test if this operation be placed on the undo stack.
 * 
 * @asreturn true means to push the operation onto the undo stack.  false means do not push this operation.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.canUndo = function() {
  return true;
};


/**	
 * Re-executes the operation. 
 * 
 * <p>This method must be overridden in derived classes. The base class method does nothing.
 * You should not call <code>redo()</code> directly. The edit manager 
 * calls the method when it re-executes the operation. </p>
 * 
 * @asreturn The SelectionState object passed to the operation when it was performed. This
 * SelectionState object can be the current selection or a selection created specifically
 * for the operation. 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.redo = function() {
  return null;
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.performUndo = function() {
  var /** @type {org.apache.royale.textLayout.edit.IEditManager} */ editManager = this.textFlow ? this.textFlow.interactionManager : null;
  if (editManager != null) {
    editManager.performUndo(this);
  }
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.performRedo = function() {
  var /** @type {org.apache.royale.textLayout.edit.IEditManager} */ editManager = this.textFlow ? this.textFlow.interactionManager : null;
  if (editManager != null) {
    editManager.performRedo(this);
  }
};


/** @asprivate -- Sets the generation numbers into the operation.  
 * @export
 * @param {number} beginGeneration
 * @param {number} endGeneration
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.setGenerations = function(beginGeneration, endGeneration) {
  this.org_apache_royale_textLayout_operations_FlowOperation__beginGeneration = beginGeneration;
  this.org_apache_royale_textLayout_operations_FlowOperation__endGeneration = endGeneration;
};


/**
 * @asprivate
 * 
 *  Combine this operation with another operation if the result can 
 *  be represented as a single operation.  In general, operations cannot be 
 *  merged. But sequential inserts or deletes may be mergeable.
 * 
 *  Merging may occur through updating the properties of the operation
 *  on which this method is called, by creating a new operation.
 * 
 *  @asparam operation 	The FlowOperation to merge against
 *  @asreturn A FlowOperation representing the combined operation if 
 *  the merge was successful, null otherwise.
 * @export
 * @param {org.apache.royale.textLayout.operations.FlowOperation} operation
 * @return {org.apache.royale.textLayout.operations.FlowOperation}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.merge = function(operation) {
  return null;
};


org.apache.royale.textLayout.operations.FlowOperation.prototype.get__textFlow = function() {
  return this.org_apache_royale_textLayout_operations_FlowOperation__textFlow;
};


org.apache.royale.textLayout.operations.FlowOperation.prototype.set__textFlow = function(value) {
  this.org_apache_royale_textLayout_operations_FlowOperation__textFlow = value;
};


org.apache.royale.textLayout.operations.FlowOperation.prototype.get__beginGeneration = function() {
  return this.org_apache_royale_textLayout_operations_FlowOperation__beginGeneration;
};


org.apache.royale.textLayout.operations.FlowOperation.prototype.get__endGeneration = function() {
  return this.org_apache_royale_textLayout_operations_FlowOperation__endGeneration;
};


Object.defineProperties(org.apache.royale.textLayout.operations.FlowOperation.prototype, /** @lends {org.apache.royale.textLayout.operations.FlowOperation.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.ITextFlow} */
textFlow: {
get: org.apache.royale.textLayout.operations.FlowOperation.prototype.get__textFlow,
set: org.apache.royale.textLayout.operations.FlowOperation.prototype.set__textFlow},
/**
  * @export
  * @type {number} */
beginGeneration: {
get: org.apache.royale.textLayout.operations.FlowOperation.prototype.get__beginGeneration},
/**
  * @export
  * @type {number} */
endGeneration: {
get: org.apache.royale.textLayout.operations.FlowOperation.prototype.get__endGeneration}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FlowOperation', qName: 'org.apache.royale.textLayout.operations.FlowOperation', kind: 'class' }], interfaces: [org.apache.royale.utils.undo.IOperation] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'userData': { type: '*', get_set: function f(/** org.apache.royale.textLayout.operations.FlowOperation */ inst, /** * */ v) {return v !== f ? inst.userData = v : inst.userData;}}
      };
    },
    accessors: function () {
      return {
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'beginGeneration': { type: 'uint', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'endGeneration': { type: 'uint', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'}
      };
    },
    methods: function () {
      return {
        'FlowOperation': { type: '', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ]; }},
        'doOperation': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'undo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'canUndo': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'redo': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'performUndo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'performRedo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation'},
        'setGenerations': { type: 'void', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation', parameters: function () { return [ 'uint', false ,'uint', false ]; }},
        'merge': { type: 'org.apache.royale.textLayout.operations.FlowOperation', declaredBy: 'org.apache.royale.textLayout.operations.FlowOperation', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.operations.FlowOperation.prototype.ROYALE_COMPILE_FLAGS = 10;
