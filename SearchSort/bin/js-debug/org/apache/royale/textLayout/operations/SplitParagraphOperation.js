/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/operations/SplitParagraphOperation.as
 * org.apache.royale.textLayout.operations.SplitParagraphOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.operations.SplitParagraphOperation');
/* Royale Dependency List: org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.operations.CompositeOperation,org.apache.royale.textLayout.operations.FlowOperation,org.apache.royale.textLayout.operations.InsertTextOperation,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.operations.SplitElementOperation');



/** 
 * Creates a SplitParagraphOperation object.
 * 
 * @asparam operationState Describes the point at which to split the paragraph.
 * If a range of text is specified, the contents of the range are deleted.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @constructor
 * @extends {org.apache.royale.textLayout.operations.SplitElementOperation}
 * @param {org.apache.royale.textLayout.edit.SelectionState} operationState
 */
org.apache.royale.textLayout.operations.SplitParagraphOperation = function(operationState) {
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = operationState.textFlow.findLeaf(operationState.absoluteStart).getParagraph();
  org.apache.royale.textLayout.operations.SplitParagraphOperation.base(this, 'constructor', operationState, para);
};
goog.inherits(org.apache.royale.textLayout.operations.SplitParagraphOperation, org.apache.royale.textLayout.operations.SplitElementOperation);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.operations.SplitParagraphOperation', org.apache.royale.textLayout.operations.SplitParagraphOperation);


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.operations.SplitParagraphOperation.prototype.merge = function(operation) {
  if (this.endGeneration != operation.beginGeneration)
    return null;
  if (org.apache.royale.utils.Language.is(operation, org.apache.royale.textLayout.operations.SplitParagraphOperation) || org.apache.royale.utils.Language.is(operation, org.apache.royale.textLayout.operations.InsertTextOperation))
    return new org.apache.royale.textLayout.operations.CompositeOperation([this, operation]);
  return null;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.operations.SplitParagraphOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SplitParagraphOperation', qName: 'org.apache.royale.textLayout.operations.SplitParagraphOperation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.operations.SplitParagraphOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'SplitParagraphOperation': { type: '', declaredBy: 'org.apache.royale.textLayout.operations.SplitParagraphOperation', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', false ]; }},
        'merge': { type: 'org.apache.royale.textLayout.operations.FlowOperation', declaredBy: 'org.apache.royale.textLayout.operations.SplitParagraphOperation', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.operations.SplitParagraphOperation.prototype.ROYALE_COMPILE_FLAGS = 10;
