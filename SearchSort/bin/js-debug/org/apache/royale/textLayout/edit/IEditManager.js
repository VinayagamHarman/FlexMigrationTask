/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/IEditManager.as
 * org.apache.royale.textLayout.edit.IEditManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.IEditManager');
/* Royale Dependency List: org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.edit.TextScrap,org.apache.royale.textLayout.elements.IDivElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IInlineGraphicElement,org.apache.royale.textLayout.elements.ILinkElement,org.apache.royale.textLayout.elements.IListElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElement,org.apache.royale.textLayout.elements.ITCYElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.operations.FlowOperation,org.apache.royale.utils.undo.IOperation,org.apache.royale.utils.undo.IUndoManager,XML*/

goog.require('org.apache.royale.textLayout.edit.ISelectionManager');



/**
 * @interface
 * @extends {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.edit.IEditManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.IEditManager', org.apache.royale.textLayout.edit.IEditManager);
/**  * @type {org.apache.royale.utils.undo.IUndoManager}
 */org.apache.royale.textLayout.edit.IEditManager.prototype.undoManager;
/** 
 * Changes the formats of the specified (or current) selection.
 * 
 * <p>Executes an undoable operation that applies the new formats.
 * Only style attributes set for the TextLayoutFormat objects are applied.
 * Undefined attributes in the format objects are not changed.
 * </p>
 * 
 * @asparam leafFormat    The format to apply to leaf elements such as spans and inline graphics.
 * @asparam paragraphFormat   The format to apply to paragraph elements.
 * @asparam containerFormat   The format to apply to the containers.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} leafFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} paragraphFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} containerFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyFormat = function(leafFormat, paragraphFormat, containerFormat, operationState) {
};
/** 
 * Undefines formats of the specified (or current) selection.
 * 
 * <p>Executes an undoable operation that undefines the specified formats.
 * Only style attributes set for the TextLayoutFormat objects are applied.
 * Undefined attributes in the format objects are not changed.
 * </p>
 * 
 * @asparam leafFormat     The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
 * @asparam paragraphFormat The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
 * @asparam containerFormat The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} leafFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} paragraphFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} containerFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.clearFormat = function(leafFormat, paragraphFormat, containerFormat, operationState) {
};
/** 
 * Changes the format applied to the leaf elements in the 
 * specified (or current) selection.
 * 
 * <p>Executes an undoable operation that applies the new format to leaf elements such as
 * SpanElement and InlineGraphicElement objects.
 * Only style attributes set for the TextLayoutFormat objects are applied.
 * Undefined attributes in the format object are changed.</p>
 * 
 * @asparam format    The format to apply.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyLeafFormat = function(format, operationState) {
};
/** 
 * Transforms text into a TCY run, or a TCY run into non-TCY text. 
 * 
 * <p>TCY, or tate-chu-yoko, causes text to draw horizontally within a vertical line, and is 
 * used to make small blocks of non-Japanese text or numbers, such as dates, more readable in vertical text.</p>
 * 
 * @asparam tcyOn Set to <code>true</code> to apply TCY to a text range, <code>false</code> to remove TCY. 
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn The TCYElement that was created.
 * 
 * @see org.apache.royale.textLayout.elements.TCYElement
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {boolean} tcyOn
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.ITCYElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyTCY = function(tcyOn, operationState) {
};
/** 
 * Transforms a selection into a link, or a link into normal text.
 * 
 * <p>Executes an undoable operation that creates or removes the link.</p>
 * 
 *  <p>If a <code>target</code> parameter is specified, it must be one of the following values:</p>
 * <ul>
 *  <li>"_self"</li>
 *  <li>"_blank"</li>
 *  <li>"_parent"</li>
 *  <li>"_top"</li>
 * </ul>
 * <p>In browser-hosted runtimes, a target of "_self" replaces the current html page.  
 * So, if the SWF content containing the link is in a page within
 * a frame or frameset, the linked content loads within that frame.  If the page 
 * is at the top level, the linked content opens to replace the original page.  
 * A target of "_blank" opens a new browser window with no name.  
 * A target of "_parent" replaces the parent of the html page containing the SWF content.  
 * A target of "_top" replaces the top-level page in the current browser window.</p>
 * 
 * <p>In other runtimes, such as Adobe AIR, the link opens in the user's default browser and the
 * <code>target</code> parameter is ignored.</p>
 * 
 * <p>The <code>extendToLinkBoundary</code> parameter determines how the edit manager 
 * treats a selection that intersects with one or more existing links. If the parameter is 
 * <code>true</code>, then the operation is applied as a unit to the selection and the
 * whole text of the existing links. Thus, a single link is created that spans from
 * the beginning of the first link intersected to the end of the last link intersected.
 * In contrast, if <code>extendToLinkBoundary</code> were <code>false</code> in this situation, 
 * the existing partially selected links would be split into two links.</p>
 *
 * @asparam href The uri referenced by the link.
 * @asparam target The target browser window of the link.
 * @asparam extendToLinkBoundary Specifies whether to consolidate selection with any overlapping existing links, and then apply the change.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn The LinkElement that was created.
 * 
 * @see org.apache.royale.textLayout.elements.LinkElement
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} href
 * @param {string=} target
 * @param {boolean=} extendToLinkBoundary
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.ILinkElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyLink = function(href, target, extendToLinkBoundary, operationState) {
};
/**
 * Changes the ID of an element.
 * 
 * <p>If the <code>relativeStart</code> or <code>relativeEnd</code> parameters are set (to
 * anything other than the default values), then the element is split. The parts of the element
 * outside this range retain the original ID. Setting both the <code>relativeStart</code> and 
 * <code>relativeEnd</code> parameters creates elements with duplicate IDs.</p>
 * 
 * @asparam newID The new ID value.
 * @asparam targetElement The element to modify.
 * @asparam relativeStart An offset from the beginning of the element at which to split the element when assigning the new ID.
 * @asparam relativeEnd An offset from the beginning of the element at which to split the element when assigning the new ID.
 * @asparam operationState Specifies the selection to restore when undoing this operation; 
 * if <code>null</code>, the operation saves the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @param {string} newID
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.changeElementID = function(newID, targetElement, relativeStart, relativeEnd, operationState) {
};
/**
 * Changes the styleName of an element or part of an element.
 * 
 * <p>If the <code>relativeStart</code> or <code>relativeEnd</code> parameters are set (to
 * anything other than the default values), then the element is split. The parts of the element
 * outside this range retain the original style.</p>
 * 
 * @asparam newName The name of the new style.
 * @asparam targetElement Specifies the element to change.
 * @asparam relativeStart An offset from the beginning of the element at which to split the element when assigning the new style.
 * @asparam relativeEnd An offset from the end of the element at which to split the element when assigning the new style.
 * @asparam operationState Specifies the selection to restore when undoing this operation; 
 * if <code>null</code>, the operation saves the current selection.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @param {string} newName
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.changeStyleName = function(newName, targetElement, relativeStart, relativeEnd, operationState) {
};
/**
 * Changes the typeName of an element or part of an element.
 * 
 * <p>If the <code>relativeStart</code> or <code>relativeEnd</code> parameters are set (to
 * anything other than the default values), then the element is split. The parts of the element
 * outside this range retain the original style.</p>
 * 
 * @asparam newName The name of the new type.
 * @asparam targetElement Specifies the element to change.
 * @asparam relativeStart An offset from the beginning of the element at which to split the element when assigning the new style
 * @asparam relativeEnd An offset from the end of the element at which to split the element when assigning the new style
 * @asparam operationState    Specifies the selection to restore when undoing this operation; 
 * if <code>null</code>, the operation saves the current selection.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @param {string} newName
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.changeTypeName = function(newName, targetElement, relativeStart, relativeEnd, operationState) {
};
/** 
 * Deletes a range of text, or, if a point selection is given, deletes the next character.
 * 
 * @asparam operationState    specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.deleteNextCharacter = function(operationState) {
};
/** 
 * Deletes a range of text, or, if a point selection is given, deletes the previous character.
 * 
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.deletePreviousCharacter = function(operationState) {
};
/** 
 * Deletes the next word.
 * 
 * <p>If a range is selected, the first word of the range is deleted.</p>
 * 
 * @asparam operationState Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.deleteNextWord = function(operationState) {
};
/** 
 * Deletes the previous word.
 * 
 * <p>If a range is selected, the first word of the range is deleted.</p>
 * 
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.deletePreviousWord = function(operationState) {
};
/** 
 * Deletes a range of text.
 * 
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.deleteText = function(operationState) {
};
/** 
 * Inserts an image.
 * 
 * <p>The source of the image can be a string containing a URI, URLRequest object, a Class object representing an embedded asset,
 * or a DisplayObject instance.</p>
 *  
 * <p>The width and height values can be the number of pixels, a percent, or the string, 'auto', 
 * in which case the actual dimension of the graphic is used.</p>
 * 
 * <p>Set the <code>float</code> to one of the constants defined in the Float class to specify whether
 * the image should be displayed to the left or right of any text or inline with the text.</p>
 * 
 *  @asparam  source  Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
 *                  a DisplayObject instance or a URLRequest. 
 *  @asparam  width   The width of the image to insert (number, percent, or 'auto').
 *  @asparam  height  The height of the image to insert (number, percent, or 'auto').
 *  @asparam  options None supported.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @see org.apache.royale.textLayout.elements.InlineGraphicElement
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {Object} source
 * @param {Object} width
 * @param {Object} height
 * @param {Object=} options
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IInlineGraphicElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.insertInlineGraphic = function(source, width, height, options, operationState) {
};
/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableElement} table
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.insertTableElement = function(table, operationState) {
};
/** 
 * Modifies an existing inline graphic.
 * 
 * <p>Set unchanging properties to the values in the original graphic. (Modifying an existing graphic object
 * is typically more efficient than deleting and recreating one.)</p>
 * 
 *  @asparam  source  Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
 *                  a DisplayObject instance or a URLRequest. 
 *  @asparam  width   The new width for the image (number or percent).
 *  @asparam  height  The new height for the image (number or percent).
 *  @asparam  options None supported.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 *  @see org.apache.royale.textLayout.elements.InlineGraphicElement
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {Object} source
 * @param {Object} width
 * @param {Object} height
 * @param {Object=} options
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.modifyInlineGraphic = function(source, width, height, options, operationState) {
};
/** 
 * Inserts text.
 * 
 * <p>Inserts the text at a position or range in the text. If the location supplied in the 
 * <code>operationState</code> parameter is a range (or the parameter is <code>null</code> and the
 * current selection is a range), then the text currently in the range 
 * is replaced by the inserted text.</p>
 * 
 * @asparam   text        The string to insert.
 * @asparam operationState    Specifies the text in the flow to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} text
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.insertText = function(text, operationState) {
};
/** 
 * Overwrites the selected text.
 * 
 * <p>If the selection is a point selection, the first character is overwritten by the new text.</p>
 * 
 * @asparam text The string to insert.
 * @asparam operationState Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} text
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.overwriteText = function(text, operationState) {
};
/** 
 * Applies paragraph styles to any paragraphs in the selection.
 * 
 * <p>Any style properties in the format object that are <code>null</code> are left unchanged.</p> 
 * 
 * @asparam format The format to apply to the selected paragraphs.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyParagraphFormat = function(format, operationState) {
};
/** 
 * Applies container styles to any containers in the selection.
 * 
 * <p>Any style properties in the format object that are <code>null</code> are left unchanged.</p> 
 * 
 * @asparam format    The format to apply to the containers in the range
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyContainerFormat = function(format, operationState) {
};
/** 
 * Applies styles to the specified element.
 * 
 * <p>Any style properties in the format object that are <code>null</code> are left unchanged.
 * Only styles that are relevant to the specified element are applied.</p> 
 * 
 * @asparam   targetElement The element to which the styles are applied.
 * @asparam   format  The format containing the styles to apply.
 * @asparam relativeStart An offset from the beginning of the element at which to split the element when assigning the new formatting.
 * @asparam relativeEnd An offset from the beginning of the element at which to split the element when applying the new formatting.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.applyFormatToElement = function(targetElement, format, relativeStart, relativeEnd, operationState) {
};
/** 
 * Undefines styles to the specified element.
 * 
 * <p>Any style properties in the format object that are <code>undefined</code> are left unchanged.
 * Any styles that are defined in the specififed format are undefined on the specified element.</p> 
 * 
 * @asparam   targetElement The element to which the styles are applied.
 * @asparam   format  The format containing the styles to undefine.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.clearFormatOnElement = function(targetElement, format, operationState) {
};
/** 
 * Splits the paragraph at the current position, creating a new paragraph after the current one.
 *   
 * <p>If a range of text is specified, the text 
 * in the range is deleted.</p>
 * 
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * @asreturn  The new paragraph that was created.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.splitParagraph = function(operationState) {
};
/** Splits the target element at the location specified, creating a new element after the current one.
 * If the operationState is a range, the text within the range is deleted. The new element is created 
 * after the text position specified by operationState. Note that splitting a SubParagraphGroupElement 
 * will have no effect because they will automatically remerge with the adejacent elements.
 * 
 * <p>An example where you might want to use this is if you have a list, and you want to divide it into two lists.</p>
 * 
 * @asparam target  The element to be split.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn The new paragraph that was created.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} target
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.splitElement = function(target, operationState) {
};
/** Creates a new IDivElement that contains the entire range specified in the operationState at the lowest
 * common parent element that contains both the start and end points of the range. If the start and end
 * points are the same, a new IDivElement is created at that position with a single child paragraph.
 * 
 * @asparam parent    Specifies a parent element for the new IDivElement.
 * If <code>null</code> the new parent will be lowest level that contains the SelectionState.
 * @asparam format    Formatting attributes to apply to the new IDivElement.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn  The new IDivElement that was created.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement=} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IDivElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.createDiv = function(parent, format, operationState) {
};
/** Creates a new ListElement that contains the entire range specified in the operationState at the lowest
 * common parent element that contains both the start and end points of the range. Each paragraph within the 
 * range will become a ListItemElement in the new ListElement. If the start and end
 * points are the same, a new ListElement is created at that position with a single ListItemElement child.
 * 
 * @asparam parent Optionally specifies a parent element for the new ListElement.  
 * If <code>null</code> the new parent will be lowest level that contains the SelectionState.
 * @asparam format Formatting attributes to apply to the new ListElement.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn  The new ListElement that was created.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement=} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IListElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.createList = function(parent, format, operationState) {
};
/** Move a set of FlowElements from one IFlowGroupElement to another. The desinationElement must be a legal parent type for the children being moved,
 * or an exception is thrown.
 * 
 * @asparam source    The orginal parent of the elements to be moved.
 * @asparam sourceIndex   The child index within the source of the first element to be moved.
 * @asparam numChildren   The number of children being moved.
 * @asparam destination   The new parent of elements after move.
 * @asparam destinationIndex  The child index within the destination to where elements are moved to.
 * @asparam operationState    Specifies the text to which this operation applies, and to which selection returns to upon undo.  
 * If <code>null</code>, the operation applies to the current selection.  If there is no current selection, this parameter must be non-null.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} source
 * @param {number} sourceIndex
 * @param {number} numChildren
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} destination
 * @param {number} destinationIndex
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.moveChildren = function(source, sourceIndex, numChildren, destination, destinationIndex, operationState) {
};
/** Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
 * common parent element that contains both the start and end points of the range. If the start and end
 * points are the same, nothing is done.
 * 
 * @asparam parent Specifies a parent element for the new SubParagraphGroupElement element.
 * If <code>null</code> the new parent will be lowest level that contains the SelectionState.
 * @asparam format    Formatting attributes to apply to the new SubParagraphGroupElement
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn  The new SubParagraphGroupElement that was created.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement=} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.ISubParagraphGroupElement}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.createSubParagraphGroup = function(parent, format, operationState) {
};
/** 
 * Deletes the selected area and returns the deleted area in a TextScrap object. 
 * 
 * <p>The resulting TextScrap can be posted to the system clipboard or used in a 
 * subsequent <code>pasteTextOperation()</code> operation.</p>
 * 
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * @asreturn The TextScrap that was cut.
 * 
 * 
 * @see org.apache.royale.textLayout.edit.IEditManager.pasteTextScrap
 * @see org.apache.royale.textLayout.edit.TextClipboard.setContents
 *  
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.cutTextScrap = function(operationState) {
};
/** 
 * Pastes the TextScrap into the selected area.
 * 
 * <p>If a range of text is specified, the text 
 * in the range is deleted.</p>
 * 
 * @asparam scrapToPaste  The TextScrap to paste.
 * @asparam operationState    Specifies the text to which this operation applies; 
 * if <code>null</code>, the operation applies to the current selection.
 * 
 * 
 * @see org.apache.royale.textLayout.edit.IEditManager.cutTextScrap
 * @see org.apache.royale.textLayout.edit.TextClipboard.getContents
 * @see org.apache.royale.textLayout.edit.TextScrap
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.TextScrap} scrapToPaste
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.pasteTextScrap = function(scrapToPaste, operationState) {
};
org.apache.royale.textLayout.edit.IEditManager.prototype.beginCompositeOperation = function() {
};
org.apache.royale.textLayout.edit.IEditManager.prototype.endCompositeOperation = function() {
};
/** 
 * Executes a FlowOperation.  
 * 
 * <p>The <code>doOperation()</code> method is called by IEditManager functions that 
 * update the text flow. You do not typically need to call this function directly unless 
 * you create your own custom operations.</p>
 * 
 * <p>This function proceeds in the following steps:</p>
 * <ol>
 * <li>Flush any pending operations before performing this operation.</li>
 * <li>Send a cancelable flowOperationBegin event.  If canceled this method returns immediately.</li>
 * <li>Execute the operation.  The operation returns <code>true</code> or <code>false</code>.  
 * <code>False</code> indicates that no changes were made.</li>
 * <li>Push the operation onto the undo stack.</li>
 * <li>Clear the redo stack.</li>
 * <li>Update the display.</li>
 * <li>Send a cancelable flowOperationEnd event.</li>
 * </ol>
 * <p>Exception handling:  If the operation throws an exception, it is caught and the error is 
 * attached to the flowOperationEnd event.  If the event is not canceled the error is rethrown.</p>
 * 
 * @asparam operation a FlowOperation object
 * 
 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.operations.FlowOperation} operation
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.doOperation = function(operation) {
};
org.apache.royale.textLayout.edit.IEditManager.prototype.undo = function() {
};
org.apache.royale.textLayout.edit.IEditManager.prototype.redo = function() {
};
/** @asprivate 
 * @export
 * @param {org.apache.royale.utils.undo.IOperation} operation
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.performUndo = function(operation) {
};
/** @asprivate 
 * @export
 * @param {org.apache.royale.utils.undo.IOperation} operation
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.performRedo = function(operation) {
};
/**  * @type {boolean}
 */org.apache.royale.textLayout.edit.IEditManager.prototype.delayUpdates;
/**  * @type {boolean}
 */org.apache.royale.textLayout.edit.IEditManager.prototype.allowDelayedOperations;
org.apache.royale.textLayout.edit.IEditManager.prototype.updateAllControllers = function() {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IEditManager', qName: 'org.apache.royale.textLayout.edit.IEditManager', kind: 'interface' }], interfaces: [org.apache.royale.textLayout.edit.ISelectionManager] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'undoManager': { type: 'org.apache.royale.utils.undo.IUndoManager', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'},
        'delayUpdates': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'},
        'allowDelayedOperations': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'}
      };
    },
    methods: function () {
      return {
        'applyFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'clearFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyLeafFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyTCY': { type: 'org.apache.royale.textLayout.elements.ITCYElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'Boolean', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyLink': { type: 'org.apache.royale.textLayout.elements.ILinkElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'String', false ,'String', true ,'Boolean', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'changeElementID': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'changeStyleName': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'changeTypeName': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deleteNextCharacter': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deletePreviousCharacter': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deleteNextWord': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deletePreviousWord': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deleteText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'insertInlineGraphic': { type: 'org.apache.royale.textLayout.elements.IInlineGraphicElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ,'Object', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'insertTableElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableElement', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'modifyInlineGraphic': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ,'Object', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'insertText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'overwriteText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyParagraphFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyContainerFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyFormatToElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'clearFormatOnElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'splitParagraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'splitElement': { type: 'org.apache.royale.textLayout.elements.IFlowGroupElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'createDiv': { type: 'org.apache.royale.textLayout.elements.IDivElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'createList': { type: 'org.apache.royale.textLayout.elements.IListElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'moveChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'createSubParagraphGroup': { type: 'org.apache.royale.textLayout.elements.ISubParagraphGroupElement', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'cutTextScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'pasteTextScrap': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.TextScrap', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'beginCompositeOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'},
        'endCompositeOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'},
        'doOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }},
        'undo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'},
        'redo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'},
        'performUndo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IOperation', false ]; }},
        'performRedo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IOperation', false ]; }},
        'updateAllControllers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IEditManager'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.IEditManager.prototype.ROYALE_COMPILE_FLAGS = 10;
