/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/IMEClient.as
 * org.apache.royale.textLayout.edit.IMEClient
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.IMEClient');
/* Royale Dependency List: org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.ime.CompositionAttributeRange,org.apache.royale.text.ime.IME,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.edit.EditManager,org.apache.royale.textLayout.edit.ModelEdit,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TextRange,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.IMEStatus,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.operations.ApplyFormatToElementOperation,org.apache.royale.textLayout.operations.FlowOperation,org.apache.royale.textLayout.operations.InsertTextOperation,org.apache.royale.textLayout.utils.GeometryUtil,org.apache.royale.utils.PointUtils,org.apache.royale.utils.undo.UndoManager,XML*/

goog.require('org.apache.royale.text.ime.IIMEClient');



/**
 * @constructor
 * @implements {org.apache.royale.text.ime.IIMEClient}
 * @param {org.apache.royale.textLayout.edit.EditManager} editManager
 */
org.apache.royale.textLayout.edit.IMEClient = function(editManager) {
  this.org_apache_royale_textLayout_edit_IMEClient__editManager = editManager;
  this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition = this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteStart;
  if (this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow) {
    var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.flowComposer;
    if (flowComposer) {
      var /** @type {number} */ controllerIndex = flowComposer.findControllerIndexAtPosition(this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition);
      this.org_apache_royale_textLayout_edit_IMEClient__controller = flowComposer.getControllerAt(controllerIndex);
      if (this.org_apache_royale_textLayout_edit_IMEClient__controller)
        this.org_apache_royale_textLayout_edit_IMEClient__controller.setFocus();
    }
  }
  this.org_apache_royale_textLayout_edit_IMEClient__closing = false;
  if (this.org_apache_royale_textLayout_edit_IMEClient__editManager.undoManager == null) {
    this.org_apache_royale_textLayout_edit_IMEClient__undoManager = new org.apache.royale.utils.undo.UndoManager();
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.setUndoManager(this.org_apache_royale_textLayout_edit_IMEClient__undoManager);
  }
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.IMEClient', org.apache.royale.textLayout.edit.IMEClient);


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.EditManager}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient__editManager;


/**
 * @private
 * @type {org.apache.royale.utils.undo.UndoManager}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient__undoManager;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient__imeLength = 0;


/**
 * @private
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient__controller;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient__closing;


/** @asprivate
 * Handler function called when the selection has been changed.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.selectionChanged = function() {
  if (this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteStart > this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + this.org_apache_royale_textLayout_edit_IMEClient__imeLength || this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteEnd < this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition) {
    this.compositionAbandoned();
  } else {
  }
};


/**
 * @private
 * @param {org.apache.royale.textLayout.edit.SelectionState} selState
 * @param {number} clause
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient_doIMEClauseOperation = function(selState, clause) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.findLeaf(selState.absoluteStart);
  var /** @type {number} */ leafAbsoluteStart = leaf.getAbsoluteStart();
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ format = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  format.setStyle(org.apache.royale.textLayout.formats.IMEStatus.IME_CLAUSE, clause.toString());
  this.org_apache_royale_textLayout_edit_IMEClient__editManager.doOperation(new org.apache.royale.textLayout.operations.ApplyFormatToElementOperation(selState, leaf, format, selState.absoluteStart - leafAbsoluteStart, selState.absoluteEnd - leafAbsoluteStart));
};


/**
 * @private
 * @param {org.apache.royale.textLayout.edit.SelectionState} selState
 * @param {org.apache.royale.text.ime.CompositionAttributeRange} attrRange
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient_doIMEStatusOperation = function(selState, attrRange) {
  var /** @type {string} */ imeStatus;
  if (attrRange == null)
    imeStatus = org.apache.royale.textLayout.formats.IMEStatus.DEAD_KEY_INPUT_STATE; else if (!attrRange.converted) {
    if (!attrRange.selected)
      imeStatus = org.apache.royale.textLayout.formats.IMEStatus.NOT_SELECTED_RAW;
    else
      imeStatus = org.apache.royale.textLayout.formats.IMEStatus.SELECTED_RAW;
  } else {
    if (!attrRange.selected)
      imeStatus = org.apache.royale.textLayout.formats.IMEStatus.NOT_SELECTED_CONVERTED;
    else
      imeStatus = org.apache.royale.textLayout.formats.IMEStatus.SELECTED_CONVERTED;
  }
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.findLeaf(selState.absoluteStart);
  
  var /** @type {number} */ leafAbsoluteStart = leaf.getAbsoluteStart();
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ format = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  format.setStyle(org.apache.royale.textLayout.formats.IMEStatus.IME_STATUS, imeStatus);
  this.org_apache_royale_textLayout_edit_IMEClient__editManager.doOperation(new org.apache.royale.textLayout.operations.ApplyFormatToElementOperation(selState, leaf, format, selState.absoluteStart - leafAbsoluteStart, selState.absoluteEnd - leafAbsoluteStart));
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient_deleteIMEText = function(textFlow) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = textFlow.getFirstLeaf();
  while (leaf) {
    if (leaf.getStyle(org.apache.royale.textLayout.formats.IMEStatus.IME_STATUS) !== undefined || leaf.getStyle(org.apache.royale.textLayout.formats.IMEStatus.IME_CLAUSE) !== undefined) {
      var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ leafFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(leaf.format);
      leafFormat.setStyle(org.apache.royale.textLayout.formats.IMEStatus.IME_STATUS, undefined);
      leafFormat.setStyle(org.apache.royale.textLayout.formats.IMEStatus.IME_CLAUSE, undefined);
      leaf.format = leafFormat;
      var /** @type {number} */ absoluteStart = leaf.getAbsoluteStart();
      org.apache.royale.textLayout.edit.ModelEdit.deleteText(textFlow, absoluteStart, (absoluteStart + leaf.textLength) >> 0, false);
      leaf = textFlow.findLeaf(absoluteStart);
    }
    else
      leaf = leaf.getNextLeaf();
  }
};


/**
 * @private
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient_rollBackIMEChanges = function() {
  var /** @type {org.apache.royale.textLayout.operations.FlowOperation} */ previousIMEOperation = this.org_apache_royale_textLayout_edit_IMEClient__editManager.undoManager.peekUndo();
  if (this.org_apache_royale_textLayout_edit_IMEClient__imeLength > 0 && previousIMEOperation && previousIMEOperation.endGeneration == this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.generation && previousIMEOperation.canUndo()) {
    
    if (this.org_apache_royale_textLayout_edit_IMEClient__editManager.undoManager)
      this.org_apache_royale_textLayout_edit_IMEClient__editManager.undoManager.undo();
    
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.undoManager.popRedo();
  } else {
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.undoManager.popUndo();
    this.org_apache_royale_textLayout_edit_IMEClient_deleteIMEText(this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow);
  }
  this.org_apache_royale_textLayout_edit_IMEClient__imeLength = 0;
  
};


/**
 * @export
 * @param {string} text
 * @param {Array} attributes
 * @param {number} compositionStartIndex
 * @param {number} compositionEndIndex
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.updateComposition = function(text, attributes, compositionStartIndex, compositionEndIndex) {
  if (this.org_apache_royale_textLayout_edit_IMEClient__imeLength > 0)
    this.org_apache_royale_textLayout_edit_IMEClient_rollBackIMEChanges();
  if (text.length > 0) {
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ pointFormat = this.org_apache_royale_textLayout_edit_IMEClient__editManager.getSelectionState().pointFormat;
    var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = new org.apache.royale.textLayout.edit.SelectionState(this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow, this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition, this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + this.org_apache_royale_textLayout_edit_IMEClient__imeLength, pointFormat);
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.beginIMEOperation();
    if (this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteStart != this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteEnd)
      this.org_apache_royale_textLayout_edit_IMEClient__editManager.deleteText();
    var /** @type {org.apache.royale.textLayout.operations.InsertTextOperation} */ insertOp = new org.apache.royale.textLayout.operations.InsertTextOperation(selState, text);
    this.org_apache_royale_textLayout_edit_IMEClient__imeLength = (text.length) >> 0;
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.doOperation(insertOp);
    if (attributes && attributes.length > 0) {
      var /** @type {number} */ attrLen = (attributes.length) >> 0;
      for (var /** @type {number} */ i = 0; i < attrLen; i++) {
        var /** @type {org.apache.royale.text.ime.CompositionAttributeRange} */ attrRange = attributes[i];
        var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ clauseSelState = new org.apache.royale.textLayout.edit.SelectionState(this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow, this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + attrRange.relativeStart, this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + attrRange.relativeEnd);
        this.org_apache_royale_textLayout_edit_IMEClient_doIMEClauseOperation(clauseSelState, i);
        this.org_apache_royale_textLayout_edit_IMEClient_doIMEStatusOperation(clauseSelState, attrRange);
      }
    } else {
      clauseSelState = new org.apache.royale.textLayout.edit.SelectionState(this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow, this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition, this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + this.org_apache_royale_textLayout_edit_IMEClient__imeLength, pointFormat);
      this.org_apache_royale_textLayout_edit_IMEClient_doIMEClauseOperation(clauseSelState, 0);
      this.org_apache_royale_textLayout_edit_IMEClient_doIMEStatusOperation(clauseSelState, null);
    }
    var /** @type {number} */ newSelectionStart = (this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + compositionStartIndex) >> 0;
    var /** @type {number} */ newSelectionEnd = (this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + compositionEndIndex) >> 0;
    if (this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteStart != newSelectionStart || this.org_apache_royale_textLayout_edit_IMEClient__editManager.absoluteEnd != newSelectionEnd) {
      this.org_apache_royale_textLayout_edit_IMEClient__editManager.selectRange((this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + compositionStartIndex) >> 0, (this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + compositionEndIndex) >> 0);
    }
    
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.endIMEOperation();
    
  }
};


/**
 * @export
 * @param {string=} text
 * @param {boolean=} preserveSelection
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.confirmComposition = function(text, preserveSelection) {
  text = typeof text !== 'undefined' ? text : null;
  preserveSelection = typeof preserveSelection !== 'undefined' ? preserveSelection : false;
  this.org_apache_royale_textLayout_edit_IMEClient_endIMESession();
};


/**
 * @export
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.compositionAbandoned = function() {
  var /** @type {Function} */ imeCompositionAbandoned = org.apache.royale.text.ime.IME["compositionAbandoned"];
  if (org.apache.royale.text.ime.IME["compositionAbandoned"] !== undefined)
    imeCompositionAbandoned();
};


/**
 * @private
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.org_apache_royale_textLayout_edit_IMEClient_endIMESession = function() {
  if (!this.org_apache_royale_textLayout_edit_IMEClient__editManager || this.org_apache_royale_textLayout_edit_IMEClient__closing)
    return;
  this.org_apache_royale_textLayout_edit_IMEClient__closing = true;
  if (this.org_apache_royale_textLayout_edit_IMEClient__imeLength > 0)
    this.org_apache_royale_textLayout_edit_IMEClient_rollBackIMEChanges();
  if (this.org_apache_royale_textLayout_edit_IMEClient__undoManager)
    this.org_apache_royale_textLayout_edit_IMEClient__editManager.setUndoManager(null);
  this.org_apache_royale_textLayout_edit_IMEClient__editManager.endIMESession();
  this.org_apache_royale_textLayout_edit_IMEClient__editManager = null;
};


/**
 * @export
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.getTextBounds = function(startIndex, endIndex) {
  if (startIndex >= 0 && startIndex < this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.textLength && endIndex >= 0 && endIndex < this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.textLength) {
    if (startIndex != endIndex) {
      var /** @type {Array} */ boundsResult = org.apache.royale.textLayout.utils.GeometryUtil.getHighlightBounds(new org.apache.royale.textLayout.elements.TextRange(this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow, startIndex, endIndex));
      if (boundsResult.length > 0) {
        var /** @type {org.apache.royale.geom.Rectangle} */ bounds = boundsResult[0].rect;
        var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = boundsResult[0].textLine;
        var /** @type {org.apache.royale.geom.Point} */ resultTopLeft = org.apache.royale.utils.PointUtils.localToGlobal(bounds.topLeft, textLine);
        var /** @type {org.apache.royale.geom.Point} */ resultBottomRight = org.apache.royale.utils.PointUtils.localToGlobal(bounds.bottomRight, textLine);
        if (textLine.parent) {
          var /** @type {org.apache.royale.geom.Point} */ containerTopLeft = org.apache.royale.utils.PointUtils.globalToLocal(resultTopLeft, textLine.parent);
          var /** @type {org.apache.royale.geom.Point} */ containerBottomLeft = org.apache.royale.utils.PointUtils.globalToLocal(resultBottomRight, textLine.parent);
          return new org.apache.royale.geom.Rectangle(containerTopLeft.x, containerTopLeft.y, containerBottomLeft.x - containerTopLeft.x, containerBottomLeft.y - containerTopLeft.y);
        }
      }
    } else {
      var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.flowComposer;
      var /** @type {number} */ lineIndex = flowComposer.findLineIndexAtPosition(startIndex);
      if (lineIndex == flowComposer.numLines)
        lineIndex--;
      if (flowComposer.getLineAt(lineIndex).controller == this.org_apache_royale_textLayout_edit_IMEClient__controller) {
        var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = flowComposer.getLineAt(lineIndex);
        var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ previousLine = lineIndex != 0 ? flowComposer.getLineAt((lineIndex - 1) >> 0) : null;
        var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ nextLine = lineIndex != flowComposer.numLines - 1 ? flowComposer.getLineAt((lineIndex + 1) >> 0) : null;
        return line.computePointSelectionRectangle(startIndex, this.org_apache_royale_textLayout_edit_IMEClient__controller.container, previousLine, nextLine, true);
      }
    }
  }
  return new org.apache.royale.geom.Rectangle(0, 0, 0, 0);
};


/**
 * @export
 * @param {number} anchorIndex
 * @param {number} activeIndex
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.selectRange = function(anchorIndex, activeIndex) {
  this.org_apache_royale_textLayout_edit_IMEClient__editManager.selectRange(anchorIndex, activeIndex);
};


/**
 * @export
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.setFocus = function() {
};


/** 
 * Gets the specified range of text from a component implementing ITextSupport.
 * To retrieve all text in the component, do not specify values for <code>startIndex</code> and <code>endIndex</code>.
 * Components which wish to support inline IME or web searchability should call into this method.
 * Components overriding this method should ensure that the default values of <code>-1</code> 
 * for <code>startIndex</code> and <code>endIndex</code> are supported.
 * 
 * @playerversion Flash 10.0
 * @langversion 3.0
 * @export
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {string}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.getTextInRange = function(startIndex, endIndex) {
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow;
  if (startIndex < -1 || endIndex < -1 || startIndex > (textFlow.textLength - 1) || endIndex > (textFlow.textLength - 1))
    return null;
  if (endIndex < startIndex) {
    var /** @type {number} */ tempIndex = endIndex;
    endIndex = startIndex;
    startIndex = tempIndex;
  }
  if (startIndex == -1)
    startIndex = 0;
  return textFlow.getText(startIndex, endIndex);
};


org.apache.royale.textLayout.edit.IMEClient.prototype.get__compositionStartIndex = function() {
  return this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition;
};


org.apache.royale.textLayout.edit.IMEClient.prototype.get__compositionEndIndex = function() {
  return (this.org_apache_royale_textLayout_edit_IMEClient__imeAnchorPosition + this.org_apache_royale_textLayout_edit_IMEClient__imeLength) >> 0;
};


org.apache.royale.textLayout.edit.IMEClient.prototype.get__verticalTextLayout = function() {
  return this.org_apache_royale_textLayout_edit_IMEClient__editManager.textFlow.computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
};


org.apache.royale.textLayout.edit.IMEClient.prototype.get__selectionActiveIndex = function() {
  return this.org_apache_royale_textLayout_edit_IMEClient__editManager.activePosition;
};


org.apache.royale.textLayout.edit.IMEClient.prototype.get__selectionAnchorIndex = function() {
  return this.org_apache_royale_textLayout_edit_IMEClient__editManager.anchorPosition;
};


Object.defineProperties(org.apache.royale.textLayout.edit.IMEClient.prototype, /** @lends {org.apache.royale.textLayout.edit.IMEClient.prototype} */ {
/**
  * @export
  * @type {number} */
compositionStartIndex: {
get: org.apache.royale.textLayout.edit.IMEClient.prototype.get__compositionStartIndex},
/**
  * @export
  * @type {number} */
compositionEndIndex: {
get: org.apache.royale.textLayout.edit.IMEClient.prototype.get__compositionEndIndex},
/**
  * @export
  * @type {boolean} */
verticalTextLayout: {
get: org.apache.royale.textLayout.edit.IMEClient.prototype.get__verticalTextLayout},
/**
  * @export
  * @type {number} */
selectionActiveIndex: {
get: org.apache.royale.textLayout.edit.IMEClient.prototype.get__selectionActiveIndex},
/**
  * @export
  * @type {number} */
selectionAnchorIndex: {
get: org.apache.royale.textLayout.edit.IMEClient.prototype.get__selectionAnchorIndex}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IMEClient', qName: 'org.apache.royale.textLayout.edit.IMEClient', kind: 'class' }], interfaces: [org.apache.royale.text.ime.IIMEClient] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'compositionStartIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'compositionEndIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'verticalTextLayout': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'selectionActiveIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'selectionAnchorIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'}
      };
    },
    methods: function () {
      return {
        'IMEClient': { type: '', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient', parameters: function () { return [ 'org.apache.royale.textLayout.edit.EditManager', false ]; }},
        'selectionChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'updateComposition': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient', parameters: function () { return [ 'String', false ,'Vector.<org.apache.royale.text.ime.CompositionAttributeRange>', false ,'int', false ,'int', false ]; }},
        'confirmComposition': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient', parameters: function () { return [ 'String', true ,'Boolean', true ]; }},
        'compositionAbandoned': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'getTextBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'selectRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient'},
        'getTextInRange': { type: 'String', declaredBy: 'org.apache.royale.textLayout.edit.IMEClient', parameters: function () { return [ 'int', false ,'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.IMEClient.prototype.ROYALE_COMPILE_FLAGS = 10;
