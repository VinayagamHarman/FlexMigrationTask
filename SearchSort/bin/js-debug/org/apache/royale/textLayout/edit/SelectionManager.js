/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/SelectionManager.as
 * org.apache.royale.textLayout.edit.SelectionManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.SelectionManager');
/* Royale Dependency List: org.apache.royale.core.IApplicationView,org.apache.royale.core.IParentIUIBase,org.apache.royale.events.Event,org.apache.royale.events.KeyboardEvent,org.apache.royale.events.MouseEvent,org.apache.royale.events.utils.NavigationKeys,org.apache.royale.events.utils.UIKeys,org.apache.royale.geom.Matrix,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.engine.TextRotation,org.apache.royale.text.events.IMEEvent,org.apache.royale.text.events.TextEvent,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.compose.TextFlowTableBlock,org.apache.royale.textLayout.container.ColumnState,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.dummy.BitmapData,org.apache.royale.textLayout.dummy.ContextMenu,org.apache.royale.textLayout.dummy.IBitmapDrawable,org.apache.royale.textLayout.dummy.Mouse,org.apache.royale.textLayout.dummy.MouseCursor,org.apache.royale.textLayout.dummy.MouseCursorData,org.apache.royale.textLayout.edit.Clipboard,org.apache.royale.textLayout.edit.ClipboardFormats,org.apache.royale.textLayout.edit.EditingMode,org.apache.royale.textLayout.edit.ElementRange,org.apache.royale.textLayout.edit.Mark,org.apache.royale.textLayout.edit.SelectionFormat,org.apache.royale.textLayout.edit.SelectionFormatState,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.edit.SelectionType,org.apache.royale.textLayout.edit.TextClipboard,org.apache.royale.textLayout.elements.CellContainer,org.apache.royale.textLayout.elements.CellCoordinates,org.apache.royale.textLayout.elements.CellRange,org.apache.royale.textLayout.elements.Configuration,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableColElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITableRowElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TableColElement,org.apache.royale.textLayout.elements.TextRange,org.apache.royale.textLayout.events.ContextMenuEvent,org.apache.royale.textLayout.events.EditEvent,org.apache.royale.textLayout.events.FlowOperationEvent,org.apache.royale.textLayout.events.SelectionEvent,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.operations.CopyOperation,org.apache.royale.textLayout.operations.FlowOperation,org.apache.royale.textLayout.utils.NavigationUtil,org.apache.royale.utils.PointUtils,org.apache.royale.utils.event.hasPlatformModifier,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.edit.ISelectionManager');



/** 
 * 
 * Creates a SelectionManager object.
 * 
 * <p>Assign a SelectionManager object to the <code>interactionManager</code> property of
 * a text flow to enable text selection.</p>
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @implements {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.edit.SelectionManager = function() {
  
  this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState = org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED;
  this.org_apache_royale_textLayout_edit_SelectionManager_marks = [];
  this.org_apache_royale_textLayout_edit_SelectionManager_cellMarks = [];
  this.selectTableCursorPoints = [1, 3, 11, 3, 11, 0, 12, 0, 16, 4, 12, 8, 11, 8, 11, 5, 1, 5, 1, 3];
  this.selectTableCursorDrawCommands = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2];
  this.org_apache_royale_textLayout_edit_SelectionManager__textFlow = null;
  this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark = this.createMark();
  this.org_apache_royale_textLayout_edit_SelectionManager_activeMark = this.createMark();
  this.anchorCellPosition = this.createCellMark();
  this.activeCellPosition = this.createCellMark();
  this.org_apache_royale_textLayout_edit_SelectionManager__pointFormat = null;
  this.org_apache_royale_textLayout_edit_SelectionManager__isActive = false;
  
  org.apache.royale.textLayout.dummy.Mouse.registerCursor(org.apache.royale.textLayout.edit.SelectionManager.SelectTable, this.createSelectTableCursor());
  org.apache.royale.textLayout.dummy.Mouse.registerCursor(org.apache.royale.textLayout.edit.SelectionManager.SelectTableRow, this.createSelectTableRowCursor());
  org.apache.royale.textLayout.dummy.Mouse.registerCursor(org.apache.royale.textLayout.edit.SelectionManager.SelectTableColumn, this.createSelectTableColumnCursor());
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.SelectionManager', org.apache.royale.textLayout.edit.SelectionManager);


/**
 * @export
 * @nocollapse
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.useTableSelectionCursors = false;


/**
 * @export
 * @nocollapse
 * @type {string}
 */
org.apache.royale.textLayout.edit.SelectionManager.SelectTable = "selectTable";


/**
 * @export
 * @nocollapse
 * @type {string}
 */
org.apache.royale.textLayout.edit.SelectionManager.SelectTableRow = "selectTableRow";


/**
 * @export
 * @nocollapse
 * @type {string}
 */
org.apache.royale.textLayout.edit.SelectionManager.SelectTableColumn = "selectTableColumn";


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__focusedSelectionFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__unfocusedSelectionFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__inactiveSelectionFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__focusedCellSelectionFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__unfocusedCellSelectionFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__inactiveCellSelectionFormat;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__selFormatState;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__isActive;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__textFlow;


/**
 * @protected
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype._subManager;


/**
 * @protected
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype._superManager;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ITableElement}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__currentTable;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.CellRange}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__cellRange;


/**
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.hasCellRangeSelection = function() {
  if (!this.org_apache_royale_textLayout_edit_SelectionManager__currentTable) {
    return false;
  }
  if (!this.org_apache_royale_textLayout_edit_SelectionManager__cellRange) {
    return false;
  }
  return true;
};


/**
 * Select a table cell text flow
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectCellTextFlow = function(cell) {
  if (cell && cell.table) {
    var /** @type {org.apache.royale.textLayout.edit.SelectionManager} */ selectionManager = cell.textFlow.interactionManager;
    this.org_apache_royale_textLayout_edit_SelectionManager_clear();
    if (selectionManager) {
      selectionManager.currentTable = cell.table;
      selectionManager.selectAll();
      selectionManager.setFocus();
    }
  }
};


/**
 * Select a table cell. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectCell = function(cell) {
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ beginCoordinates;
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ endCoordinates;
  if (cell) {
    beginCoordinates = new org.apache.royale.textLayout.elements.CellCoordinates(cell.rowIndex, cell.colIndex);
    endCoordinates = new org.apache.royale.textLayout.elements.CellCoordinates(cell.rowIndex, cell.colIndex);
    if (beginCoordinates.isValid()) {
      this.selectCellRange(beginCoordinates, endCoordinates);
    }
  }
};


/**
 * Select table cells at the specified index.
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableElement} table
 * @param {number} rowIndex
 * @param {number} colIndex
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectCellAt = function(table, rowIndex, colIndex) {
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell = table.getCellAt(rowIndex, colIndex);
  if (cell) {
    this.selectCell(cell);
  }
};


/**
 * Select table cells at the specified index
 * @export
 * @param {Array} cells
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectCells = function(cells) {
  var /** @type {number} */ max = 2147483647;
  var /** @type {number} */ min = -2147483647;
  var /** @type {number} */ startX = max;
  var /** @type {number} */ startY = max;
  var /** @type {number} */ endX = min;
  var /** @type {number} */ endY = min;
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell;
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table;
  var foreachiter0_target = cells;
  for (var foreachiter0 in foreachiter0_target) 
  {
  cell = foreachiter0_target[foreachiter0];
  {
    if (cell) {
      if (table == null)
        table = cell.table;
      var /** @type {number} */ col = cell.colIndex;
      var /** @type {number} */ row = cell.rowIndex;
      if (col < startX)
        startX = col;
      if (col > endX)
        endX = col;
      if (row < startY)
        startY = row;
      if (row > endY)
        endY = row;
    }
  }}
  
  if (startX <= endX && startY <= endY)
    this.selectCellRange(new org.apache.royale.textLayout.elements.CellCoordinates(startY, startX, table), new org.apache.royale.textLayout.elements.CellCoordinates(endY, endX, table));
};


/**
 * Select the specified table row. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableRowElement} row
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectRow = function(row) {
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ beginCoordinates;
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ endCoordinates;
  if (row) {
    beginCoordinates = new org.apache.royale.textLayout.elements.CellCoordinates(row.rowIndex, 0);
    endCoordinates = new org.apache.royale.textLayout.elements.CellCoordinates(row.rowIndex, row.numCells);
    if (beginCoordinates.isValid() && endCoordinates.isValid()) {
      this.selectCellRange(beginCoordinates, endCoordinates);
    }
  }
};


/**
 * Select a table row at the specified index
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableElement} table
 * @param {number} index
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectRowAt = function(table, index) {
  var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = table ? table.getRowAt(index) : null;
  if (row) {
    this.selectRow(row);
  }
};


/**
 * Selects the table rows provided
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableRowElement
 * @export
 * @param {Array} rows
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectRows = function(rows) {
  var /** @type {Array} */ cells = [];
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell;
  if (rows && rows.length) {
    for (var /** @type {number} */ i = 0; i < rows.length; i++) {
      var /** @type {Object} */ row = rows[i];
      if (row) {
        var foreachiter1_target = row.cells;
        for (var foreachiter1 in foreachiter1_target) 
        {
        cell = foreachiter1_target[foreachiter1];
        
          cells.push(cell);}
        
      }
    }
    this.selectCells(cells);
  }
};


/**
 * Select a table column. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableColElement} column
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectColumn = function(column) {
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = column.table;
  if (column && table) {
    this.selectCells(table.getCellsForColumn(column));
  }
};


/**
 * Select a table column at the specified index 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableElement} table
 * @param {number} index
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectColumnAt = function(table, index) {
  var /** @type {org.apache.royale.textLayout.elements.ITableColElement} */ column = table.getColumnAt(index);
  if (column && table) {
    return this.selectColumn(column);
  }
};


/**
 * Selects the table columns provided
 * @export
 * @param {Array} columns
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectColumns = function(columns) {
  var /** @type {Array} */ cells = [];
  var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell;
  if (columns && columns.length) {
    for (var /** @type {number} */ i = 0; i < columns.length; i++) {
      var /** @type {org.apache.royale.textLayout.elements.ITableColElement} */ column = columns[i];
      if (column) {
        var foreachiter2_target = column.cells;
        for (var foreachiter2 in foreachiter2_target) 
        {
        cell = foreachiter2_target[foreachiter2];
        
          cells.push(cell);}
        
      }
    }
    this.selectCells(cells);
  }
};


/**
 * Select all cells in a table. 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableElement} table
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectTable = function(table) {
  if (table) {
    var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ startCoords = new org.apache.royale.textLayout.elements.CellCoordinates(0, 0, table);
    var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ endCoords = new org.apache.royale.textLayout.elements.CellCoordinates(table.numRows - 1, table.numColumns - 1, table);
    this.selectCellRange(startCoords, endCoords);
  }
};


/**
 * Select a range of table cells. 
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} anchorCoords
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} activeCoords
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectCellRange = function(anchorCoords, activeCoords) {
  var /** @type {Array} */ blocks;
  var /** @type {org.apache.royale.textLayout.compose.TextFlowTableBlock} */ block;
  if (this.selectionType == org.apache.royale.textLayout.edit.SelectionType.TEXT) {
    this.org_apache_royale_textLayout_edit_SelectionManager_clear();
  }
  this.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections();
  if (anchorCoords && activeCoords) {
    this.org_apache_royale_textLayout_edit_SelectionManager__cellRange = new org.apache.royale.textLayout.elements.CellRange(this.org_apache_royale_textLayout_edit_SelectionManager__currentTable, anchorCoords, activeCoords);
    this.activeCellPosition = activeCoords;
    blocks = this.org_apache_royale_textLayout_edit_SelectionManager__currentTable.getTableBlocksInRange(anchorCoords, activeCoords);
    var foreachiter3_target = blocks;
    for (var foreachiter3 in foreachiter3_target) 
    {
    block = foreachiter3_target[foreachiter3];
    {
      block.controller.clearSelectionShapes();
      block.controller.addCellSelectionShapes(this.currentCellSelectionFormat.rangeColor, block, anchorCoords, activeCoords);
    }}
    
    if (this.subManager) {
      this.subManager.selectRange(-1, -1);
      this.subManager = null;
    }
  } else {
    this.org_apache_royale_textLayout_edit_SelectionManager__cellRange = null;
    this.activeCellPosition.column = -1;
    this.activeCellPosition.row = -1;
  }
  this.selectionChanged();
};


/**
 * @export
 * @return {org.apache.royale.textLayout.elements.CellRange}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.getCellRange = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__cellRange;
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.CellRange} range
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.setCellRange = function(range) {
  this.selectCellRange(range.anchorCoordinates, range.activeCoordinates);
};


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.Mark}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_anchorMark;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.Mark}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_activeMark;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.CellCoordinates}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__anchorCellPosition;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.CellCoordinates}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__activeCellPosition;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__pointFormat;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.ignoreNextTextEvent = false;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.allowOperationMerge = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager__mouseOverSelectionArea = false;


/**
 * @copy ISelectionManager#getSelectionState()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.edit.SelectionState
 * @export
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.getSelectionState = function() {
  if (this.subManager)
    return this.subManager.getSelectionState();
  return new org.apache.royale.textLayout.edit.SelectionState(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position, this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position, this.pointFormat, this.org_apache_royale_textLayout_edit_SelectionManager__cellRange);
};


/**
 * @copy ISelectionManager#setSelectionState()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.edit.SelectionState
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState} sel
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.setSelectionState = function(sel) {
  this.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection(sel.textFlow, sel.anchorPosition, sel.activePosition, sel.pointFormat);
};


/**
 *  @copy ISelectionManager#hasSelection()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.hasSelection = function() {
  return this.selectionType == org.apache.royale.textLayout.edit.SelectionType.TEXT;
};


/**
 *  @copy ISelectionManager#hasAnySelection()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.hasAnySelection = function() {
  return this.selectionType != org.apache.royale.textLayout.edit.SelectionType.NONE;
};


/** 
 *  @copy ISelectionManager#isRangeSelection()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.isRangeSelection = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position != -1 && this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position != this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position;
};


/** @asprivate - sets the SelectionFormatState. @see org.apache.royale.textLayout.edit.SelectionFormatState 
 * @export
 * @param {string} selFormatState
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.setSelectionFormatState = function(selFormatState) {
  if (selFormatState != this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState) {
    var /** @type {org.apache.royale.textLayout.edit.SelectionFormat} */ oldSelectionFormat = this.currentSelectionFormat;
    this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState = selFormatState;
    var /** @type {org.apache.royale.textLayout.edit.SelectionFormat} */ newSelectionFormat = this.currentSelectionFormat;
    if (!newSelectionFormat.equals(oldSelectionFormat)) {
      this.refreshSelection();
    }
  }
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.textLayout.edit.ISelectionManager} oldISelectionManager
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.cloneSelectionFormatState = function(oldISelectionManager) {
  var /** @type {org.apache.royale.textLayout.edit.SelectionManager} */ oldSelectionManager = oldISelectionManager;
  if (oldSelectionManager) {
    this.org_apache_royale_textLayout_edit_SelectionManager__isActive = oldSelectionManager.org_apache_royale_textLayout_edit_SelectionManager__isActive;
    this.org_apache_royale_textLayout_edit_SelectionManager__mouseOverSelectionArea = oldSelectionManager.org_apache_royale_textLayout_edit_SelectionManager__mouseOverSelectionArea;
    this.setSelectionFormatState(oldSelectionManager.selectionFormatState);
  }
};


/**
 * Gets the SelectionState at the specified mouse position.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.textLayout.edit.SelectionState
 * @asparam currentTarget     The object that is actively processing the Event object with an event listener.
 * @asparam target            The InteractiveObject instance under the pointing device. The target is not always the object in the display list that registered the event listener. Use the currentTarget property to access the object in the display list that is currently processing the event.
 * @asparam localX            The horizontal coordinate at which the event occurred relative to the containing sprite.
 * @asparam localY            The vertical coordinate at which the event occurred relative to the containing sprite.
 * @asparam extendSelection   Indicates that only activeIndex should move
 * @asreturn the resulting SelectionState
 * @private
 * @param {Object} currentTarget
 * @param {Object} target
 * @param {number} localX
 * @param {number} localY
 * @param {boolean=} extendSelection
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_selectionPoint = function(currentTarget, target, localX, localY, extendSelection) {
  extendSelection = typeof extendSelection !== 'undefined' ? extendSelection : false;
  if (!this.org_apache_royale_textLayout_edit_SelectionManager__textFlow)
    return null;
  if (!this.hasSelection())
    extendSelection = false;
  var /** @type {number} */ begIdx = this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position;
  var /** @type {number} */ endIdx = this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position;
  endIdx = org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndex(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, target, currentTarget, localX, localY);
  if (endIdx == -1)
    return null;
  endIdx = (Math.min(endIdx, this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.textLength - 1)) >> 0;
  if (!extendSelection)
    begIdx = endIdx;
  if (begIdx == endIdx) {
    begIdx = org.apache.royale.textLayout.utils.NavigationUtil.updateStartIfInReadOnlyElement(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, begIdx);
    endIdx = org.apache.royale.textLayout.utils.NavigationUtil.updateEndIfInReadOnlyElement(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, endIdx);
  } else {
    endIdx = org.apache.royale.textLayout.utils.NavigationUtil.updateEndIfInReadOnlyElement(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, endIdx);
  }
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, begIdx, endIdx);
};


/** 
 *  @copy ISelectionManager#setFocus()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.setFocus = function() {
  if (!this.org_apache_royale_textLayout_edit_SelectionManager__textFlow)
    return;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer)
    this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.setFocus(this.activePosition, false);
  this.setSelectionFormatState(org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED);
};


/** 
 * Set the Mouse cursor. 
 * @asparam cursor    New cursor value, MouseCursor.AUTO if mouse is going off text, MouseCursor.IBEAM if mouse is going into text
 * 
 * @playerversion Flash 10.2
 * @playerversion AIR 2.0
 * @langversion 3.0
 * @protected
 * @param {string} cursor
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.setMouseCursor = function(cursor) {
  org.apache.royale.textLayout.dummy.Mouse.cursor = org.apache.royale.textLayout.elements.Configuration.getCursorString(this.textFlow.configuration, cursor);
};


/** 
 *  @copy ISelectionManager#selectAll
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.compose.IFlowComposer
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectAll = function() {
  if (this.subManager)
    this.subManager.selectAll(); else {
    var /** @type {number} */ lastSelectablePos = ((this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.textLength > 0) ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.textLength - 1 : 0) >> 0;
    this.selectRange(0, lastSelectablePos);
  }
};


/** 
 * @copy ISelectionManager#selectRange
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.compose.IFlowComposer
 * @export
 * @param {number} anchorPosition
 * @param {number} activePosition
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectRange = function(anchorPosition, activePosition) {
  this.flushPendingOperations();
  if (this.subManager && (anchorPosition != -1 || activePosition != -1)) {
    this.subManager.selectRange(-1, -1);
    this.subManager = null;
  }
  if (this.textFlow.nestedInTable()) {
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell = this.textFlow.parentElement;
    this.superManager = cell.getTextFlow().interactionManager;
    this.superManager.currentTable = cell.table;
    this.superManager.deselect();
    this.superManager.anchorCellPosition.column = cell.colIndex;
    this.superManager.anchorCellPosition.row = cell.rowIndex;
    this.superManager.subManager = this;
  }
  if (anchorPosition != this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position || activePosition != this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position) {
    this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections();
    this.org_apache_royale_textLayout_edit_SelectionManager__cellRange = null;
    this.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, anchorPosition, activePosition, this.org_apache_royale_textLayout_edit_SelectionManager__pointFormat);
    this.selectionChanged();
    this.allowOperationMerge = false;
  }
};


/** 
 * @copy ISelectionManager#selectFirstPosition
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.compose.IFlowComposer
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectFirstPosition = function() {
  this.selectRange(0, 0);
};


/** 
 * @copy ISelectionManager#selectLastPosition
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.compose.IFlowComposer
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectLastPosition = function() {
  var /** @type {number} */ max = 2147483647;
  this.selectRange(max, max);
};


/** 
 * @copy ISelectionManager#deselect
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.compose.IFlowComposer
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.deselect = function() {
  if (this.hasAnySelection()) {
    this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections();
    this.org_apache_royale_textLayout_edit_SelectionManager_addSelectionShapes();
  }
  this.selectRange(-1, -1);
  this.org_apache_royale_textLayout_edit_SelectionManager__cellRange = null;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.ITextFlow} root
 * @param {number} anchorPosition
 * @param {number} activePosition
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection = function(root, anchorPosition, activePosition, format) {
  format = typeof format !== 'undefined' ? format : null;
  this.org_apache_royale_textLayout_edit_SelectionManager__textFlow = root;
  if (anchorPosition < 0 || activePosition < 0) {
    anchorPosition = -1;
    activePosition = -1;
  } else if (this.subManager) {
    this.subManager.flushPendingOperations();
    this.subManager = null;
  }
  var /** @type {number} */ lastSelectablePos = ((this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.textLength > 0) ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.textLength - 1 : 0) >> 0;
  if (anchorPosition != -1 && activePosition != -1) {
    if (anchorPosition > lastSelectablePos)
      anchorPosition = lastSelectablePos;
    if (activePosition > lastSelectablePos)
      activePosition = lastSelectablePos;
  }
  this.org_apache_royale_textLayout_edit_SelectionManager__pointFormat = format;
  this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position = anchorPosition;
  this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position = activePosition;
};


/** 
 * Clear any active selections.
 * @private
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_clear = function() {
  if (this.hasSelection()) {
    this.flushPendingOperations();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    this.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, -1, -1);
    this.selectionChanged();
    this.allowOperationMerge = false;
  }
};


/**
 * Clear any cell selections
 * @private
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections = function() {
  var /** @type {Array} */ blocks;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowTableBlock} */ block;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__cellRange) {
    blocks = this.org_apache_royale_textLayout_edit_SelectionManager__cellRange.table.getTableBlocksInRange(this.org_apache_royale_textLayout_edit_SelectionManager__cellRange.anchorCoordinates, this.org_apache_royale_textLayout_edit_SelectionManager__cellRange.activeCoordinates);
    var foreachiter4_target = blocks;
    for (var foreachiter4 in foreachiter4_target) 
    {
    block = foreachiter4_target[foreachiter4];
    {
      if (controller != block.controller) {
        block.controller.clearSelectionShapes();
      }
      controller = block.controller;
    }}
    
  }
  if (block)
    block.controller.clearSelectionShapes();
};


/**
 * @private
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_addSelectionShapes = function() {
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer) {
    this.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position, this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position, this.org_apache_royale_textLayout_edit_SelectionManager__pointFormat);
    if (this.currentSelectionFormat && (((this.absoluteStart == this.absoluteEnd) && (this.currentSelectionFormat.pointAlpha != 0)) || ((this.absoluteStart != this.absoluteEnd) && (this.currentSelectionFormat.rangeAlpha != 0)))) {
      var /** @type {number} */ containerIter = 0;
      while (containerIter < this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.numControllers) {
        this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.getControllerAt(containerIter++).addSelectionShapes(this.currentSelectionFormat, this.absoluteStart, this.absoluteEnd);
      }
    }
  }
};


/**
 * @private
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes = function() {
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer : null;
  if (flowComposer) {
    var /** @type {number} */ containerIter = 0;
    while (containerIter < flowComposer.numControllers) {
      flowComposer.getControllerAt(containerIter++).clearSelectionShapes();
    }
  }
};


/** 
 *  @copy ISelectionManager#refreshSelection()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.refreshSelection = function() {
  if (this.hasAnySelection()) {
    this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections();
    this.org_apache_royale_textLayout_edit_SelectionManager_addSelectionShapes();
  }
};


/** 
 *  @copy ISelectionManager#clearSelection()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.clearSelection = function() {
  if (this.hasAnySelection()) {
    this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections();
  }
};


/** @asprivate
 * Handler function called when the selection has been changed.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @asparam doDispatchEvent   true if a selection changed event will be sent
 * @asparam resetPointFormat  true if the attributes associated with the caret should be discarded
 * @export
 * @param {boolean=} doDispatchEvent
 * @param {boolean=} resetPointFormat
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectionChanged = function(doDispatchEvent, resetPointFormat) {
  doDispatchEvent = typeof doDispatchEvent !== 'undefined' ? doDispatchEvent : true;
  resetPointFormat = typeof resetPointFormat !== 'undefined' ? resetPointFormat : true;
  
  if (resetPointFormat)
    this.org_apache_royale_textLayout_edit_SelectionManager__pointFormat = null;
  if (doDispatchEvent && this.org_apache_royale_textLayout_edit_SelectionManager__textFlow) {
    if (this.textFlow.parentElement && this.textFlow.parentElement.getTextFlow())
      this.textFlow.parentElement.getTextFlow().dispatchEvent(new org.apache.royale.textLayout.events.SelectionEvent(org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE, false, false, this.hasSelection() ? this.getSelectionState() : null));
    else
      this.textFlow.dispatchEvent(new org.apache.royale.textLayout.events.SelectionEvent(org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE, false, false, this.hasSelection() ? this.getSelectionState() : null));
  }
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {org.apache.royale.geom.Point} localPoint
 * @return {number}
 */
org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndexInContainer = function(textFlow, controller, localPoint) {
  var /** @type {number} */ result = 0;
  //var /** @type {number} */ result = 0;
  var /** @type {number} */ lineIndex = -1;
  var /** @type {number} */ firstCharVisible = controller.absoluteStart;
  var /** @type {number} */ length = controller.textLength;
  var /** @type {string} */ bp = org.apache.royale.utils.Language.string(textFlow.computedFormat.blockProgression);
  var /** @type {boolean} */ isTTB = (bp == org.apache.royale.textLayout.formats.BlockProgression.RL);
  var /** @type {boolean} */ isDirectionRTL = (textFlow.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.RTL);
  var /** @type {number} */ perpCoor = isTTB ? localPoint.x : localPoint.y;
  var /** @type {number} */ nearestColIdx = org.apache.royale.textLayout.edit.SelectionManager.locateNearestColumn(controller, localPoint.x, localPoint.y, org.apache.royale.utils.Language.string(textFlow.computedFormat.blockProgression), org.apache.royale.utils.Language.string(textFlow.computedFormat.direction));
  var /** @type {org.apache.royale.geom.Rectangle} */ prevLineBounds = null;
  var /** @type {number} */ previousLineIndex = -1;
  var /** @type {number} */ lastLineIndexInColumn = -1;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ rtline;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ rtTextLine;
  for (var /** @type {number} */ testIndex = (textFlow.flowComposer.numLines - 1) >> 0; testIndex >= 0; testIndex--) {
    rtline = textFlow.flowComposer.getLineAt(testIndex);
    if (rtline.controller != controller || rtline.columnIndex != nearestColIdx) {
      if (lastLineIndexInColumn != -1) {
        lineIndex = (testIndex + 1) >> 0;
        break;
      }
      continue;
    }
    if (rtline.absoluteStart < firstCharVisible || rtline.absoluteStart >= firstCharVisible + length)
      continue;
    rtTextLine = rtline.getTextLine();
    if (rtTextLine == null || rtTextLine.parent == null)
      continue;
    if (lastLineIndexInColumn == -1)
      lastLineIndexInColumn = testIndex;
    var /** @type {org.apache.royale.geom.Rectangle} */ bounds = rtTextLine.getBounds(controller.container);
    var /** @type {number} */ linePerpCoor = isTTB ? bounds.left : bounds.bottom;
    var /** @type {number} */ midPerpCoor = -1;
    if (prevLineBounds) {
      var /** @type {number} */ prevPerpCoor = (isTTB ? prevLineBounds.right : prevLineBounds.top);
      midPerpCoor = (linePerpCoor + prevPerpCoor) / 2;
    }
    var /** @type {boolean} */ isLineBelow = (isTTB ? linePerpCoor > perpCoor : linePerpCoor < perpCoor);
    if (isLineBelow || testIndex == 0) {
      var /** @type {boolean} */ inPrevLine = midPerpCoor != -1 && (isTTB ? perpCoor < midPerpCoor : perpCoor > midPerpCoor);
      lineIndex = (inPrevLine && testIndex != lastLineIndexInColumn ? testIndex + 1 : testIndex) >> 0;
      break;
    } else {
      prevLineBounds = bounds;
      previousLineIndex = testIndex;
    }
  }
  if (lineIndex == -1) {
    lineIndex = previousLineIndex;
    if (lineIndex == -1)
      return -1;
  }
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ textFlowLine = textFlow.flowComposer.getLineAt(lineIndex);
  if (org.apache.royale.utils.Language.is(textFlowLine, org.apache.royale.textLayout.compose.TextFlowTableBlock)) {
    result = org.apache.royale.utils.Language.as(textFlowLine, org.apache.royale.textLayout.compose.TextFlowTableBlock, true).absoluteStart;
  } else {
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = textFlowLine.getTextLine(true);
    localPoint.x -= textLine.x;
    localPoint.y -= textLine.y;
    var /** @type {boolean} */ startOnNextLineIfNecessary = false;
    var /** @type {number} */ lastAtom = -1;
    if (isDirectionRTL) {
      lastAtom = (textLine.atomCount - 1) >> 0;
    } else {
      if ((textFlowLine.absoluteStart + textFlowLine.textLength) >= textFlowLine.paragraph.getAbsoluteStart() + textFlowLine.paragraph.textLength) {
        if (textLine.atomCount > 1)
          lastAtom = (textLine.atomCount - 2) >> 0;
      } else {
        var /** @type {number} */ lastLinePosInPar = (textFlowLine.textBlockStart + textFlowLine.textLength - 1) >> 0;
        var /** @type {string} */ lastChar = textLine.textBlock.content.rawText.charAt(lastLinePosInPar);
        if (lastChar == " ") {
          if (textLine.atomCount > 1)
            lastAtom = (textLine.atomCount - 2) >> 0;
        } else {
          startOnNextLineIfNecessary = true;
          if (textLine.atomCount > 0)
            lastAtom = (textLine.atomCount - 1) >> 0;
        }
      }
    }
    var /** @type {org.apache.royale.geom.Rectangle} */ lastAtomRect = (lastAtom > 0) ? textLine.getAtomBounds(lastAtom) : new org.apache.royale.geom.Rectangle(0, 0, 0, 0);
    if (!isTTB) {
      if (localPoint.x < 0)
        localPoint.x = 0; else if (localPoint.x > (lastAtomRect.x + lastAtomRect.width)) {
        if (startOnNextLineIfNecessary)
          return (textFlowLine.absoluteStart + textFlowLine.textLength - 1) >> 0;
        if (lastAtomRect.x + lastAtomRect.width > 0)
          localPoint.x = lastAtomRect.x + lastAtomRect.width;
      }
    } else {
      if (localPoint.y < 0)
        localPoint.y = 0; else if (localPoint.y > (lastAtomRect.y + lastAtomRect.height)) {
        if (startOnNextLineIfNecessary)
          return (textFlowLine.absoluteStart + textFlowLine.textLength - 1) >> 0;
        if (lastAtomRect.y + lastAtomRect.height > 0)
          localPoint.y = lastAtomRect.y + lastAtomRect.height;
      }
    }
    result = org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndexInLine(textFlow, textLine, localPoint);
  }
  return (result != -1 ? result : firstCharVisible + length) >> 0;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.container.IContainerController} container
 * @param {number} localX
 * @param {number} localY
 * @param {string} wm
 * @param {string} direction
 * @return {number}
 */
org.apache.royale.textLayout.edit.SelectionManager.locateNearestColumn = function(container, localX, localY, wm, direction) {
  var /** @type {number} */ colIdx = 0;
  var /** @type {org.apache.royale.textLayout.container.ColumnState} */ columnState = container.columnState;
  while (colIdx < columnState.columnCount - 1) {
    var /** @type {org.apache.royale.geom.Rectangle} */ curCol = columnState.getColumnAt(colIdx);
    var /** @type {org.apache.royale.geom.Rectangle} */ nextCol = columnState.getColumnAt((colIdx + 1) >> 0);
    if (curCol.contains(localX, localY))
      break;
    if (nextCol.contains(localX, localY)) {
      ++colIdx;
      break;
    } else {
      if (wm == org.apache.royale.textLayout.formats.BlockProgression.RL) {
        if (localY < curCol.top || localY < nextCol.top && Math.abs(curCol.bottom - localY) <= Math.abs(nextCol.top - localY))
          break;
        if (localY > nextCol.top) {
          ++colIdx;
          break;
        }
      } else {
        if (direction == org.apache.royale.textLayout.formats.Direction.LTR) {
          if (localX < curCol.left || localX < nextCol.left && Math.abs(curCol.right - localX) <= Math.abs(nextCol.left - localX))
            break;
          if (localX < nextCol.left) {
            ++colIdx;
            break;
          }
        } else {
          if (localX > curCol.right || localX > nextCol.right && Math.abs(curCol.left - localX) <= Math.abs(nextCol.right - localX))
            break;
          if (localX > nextCol.right) {
            ++colIdx;
            break;
          }
        }
      }
    }
    ++colIdx;
  }
  return colIdx;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.geom.Point} localPoint
 * @return {number}
 */
org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndexInLine = function(textFlow, textLine, localPoint) {
  var /** @type {number} */ paraSelectionIdx = 0;
  if (!org.apache.royale.utils.Language.is(textLine.userData, org.apache.royale.textLayout.compose.ITextFlowLine))
    return -1;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ rtline = org.apache.royale.utils.Language.as(textLine.userData, org.apache.royale.textLayout.compose.ITextFlowLine, true);
  if (rtline.validity == "invalid")
    return -1;
  textLine = rtline.getTextLine(true);
  var /** @type {boolean} */ isTTB = textFlow.computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
  var /** @type {number} */ perpCoor = isTTB ? localPoint.x : localPoint.y;
  var /** @type {org.apache.royale.geom.Point} */ pt = localPoint.clone();
  var /** @type {number} */ elemIdx = textLine.getAtomIndexAtPoint(pt.x, pt.y);
  if (elemIdx == -1) {
    pt.x = localPoint.x;
    pt.y = localPoint.y;
    if (pt.x < 0 || (isTTB && perpCoor > textLine.ascent))
      pt.x = 0;
    if (pt.y < 0 || (!isTTB && perpCoor > textLine.descent))
      pt.y = 0;
    elemIdx = textLine.getAtomIndexAtPoint(pt.x, pt.y);
  }
  if (elemIdx == -1) {
    pt.x = localPoint.x;
    pt.y = localPoint.y;
    if (textLine.parent)
      pt = org.apache.royale.utils.PointUtils.globalToLocal(pt, textLine.parent);
    if (!isTTB)
      return ((pt.x <= textLine.x) ? rtline.absoluteStart : (rtline.absoluteStart + rtline.textLength - 1)) >> 0;
    else
      return ((pt.y <= textLine.y) ? rtline.absoluteStart : (rtline.absoluteStart + rtline.textLength - 1)) >> 0;
  }
  var /** @type {org.apache.royale.geom.Rectangle} */ glyphRect = textLine.getAtomBounds(elemIdx);
  var /** @type {boolean} */ leanRight = false;
  if (glyphRect) {
    if (isTTB && textLine.getAtomTextRotation(elemIdx) != org.apache.royale.text.engine.TextRotation.ROTATE_0)
      leanRight = (localPoint.y > (glyphRect.y + glyphRect.height / 2));
    else
      leanRight = (localPoint.x > (glyphRect.x + glyphRect.width / 2));
  }
  //var /** @type {number} */ paraSelectionIdx = 0;
  if ((textLine.getAtomBidiLevel(elemIdx) % 2) != 0)
    paraSelectionIdx = leanRight ? textLine.getAtomTextBlockBeginIndex(elemIdx) : textLine.getAtomTextBlockEndIndex(elemIdx);
  else
    paraSelectionIdx = leanRight ? textLine.getAtomTextBlockEndIndex(elemIdx) : textLine.getAtomTextBlockBeginIndex(elemIdx);
  return (rtline.paragraph.getTextBlockAbsoluteStart(textLine.textBlock) + paraSelectionIdx) >> 0;
};


/**
 *  @royaleignorecoercion org.apache.royale.core.IParentIUIBase
 * @private
 * @param {Object} container
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.checkForDisplayed = function(container) {
  try {
    while (container) {
      if (!container.visible)
        return false;
      container = container.parent;
      if (org.apache.royale.utils.Language.is(container, org.apache.royale.core.IApplicationView))
        return true;
    }
  } catch (e) {
    return true;
  }
  return false;
};


/** @asprivate - find a controller and adjusts the x and y values of localPoint if necessary 
 * @private
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {Object} target
 * @param {Object} currentTarget
 * @param {org.apache.royale.geom.Point} localPoint
 * @return {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.edit.SelectionManager.findController = function(textFlow, target, currentTarget, localPoint) {
  var /** @type {number} */ localX = localPoint.x;
  var /** @type {number} */ localY = localPoint.y;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller;
  var /** @type {org.apache.royale.geom.Point} */ containerPoint;
  var /** @type {org.apache.royale.geom.Point} */ globalPoint = org.apache.royale.utils.PointUtils.localToGlobal(new org.apache.royale.geom.Point(localX, localY), target);
  for (var /** @type {number} */ idx = 0; idx < textFlow.flowComposer.numControllers; idx++) {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ testController = textFlow.flowComposer.getControllerAt(idx);
    if (testController.container == target || testController.container == currentTarget) {
      controller = testController;
      break;
    }
  }
  if (controller) {
    if (target != controller.container) {
      containerPoint = org.apache.royale.utils.PointUtils.globalToLocal(globalPoint, controller.container);
      localPoint.x = containerPoint.x;
      localPoint.y = containerPoint.y;
    }
    return controller;
  }
  
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controllerCandidate = null;
  var /** @type {number} */ candidateLocalX;
  var /** @type {number} */ candidateLocalY;
  var /** @type {number} */ relDistance = Number.MAX_VALUE;
  for (var /** @type {number} */ containerIndex = 0; containerIndex < textFlow.flowComposer.numControllers; containerIndex++) {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ curContainerController = textFlow.flowComposer.getControllerAt(containerIndex);
    if (!org.apache.royale.textLayout.edit.SelectionManager.checkForDisplayed(curContainerController.container))
      continue;
    var /** @type {org.apache.royale.geom.Rectangle} */ bounds = curContainerController.getContentBounds();
    var /** @type {number} */ containerWidth = isNaN(curContainerController.compositionWidth) ? curContainerController.getTotalPaddingLeft() + bounds.width : curContainerController.compositionWidth;
    var /** @type {number} */ containerHeight = isNaN(curContainerController.compositionHeight) ? curContainerController.getTotalPaddingTop() + bounds.height : curContainerController.compositionHeight;
    containerPoint = org.apache.royale.utils.PointUtils.globalToLocal(globalPoint, curContainerController.container);
    var /** @type {number} */ adjustX = 0;
    var /** @type {number} */ adjustY = 0;
    if ((containerPoint.x >= 0) && (containerPoint.x <= containerWidth) && (containerPoint.y >= 0) && (containerPoint.y <= containerHeight)) {
      controllerCandidate = curContainerController;
      candidateLocalX = containerPoint.x + adjustX;
      candidateLocalY = containerPoint.y + adjustY;
      break;
    }
    var /** @type {number} */ relDistanceX = 0;
    var /** @type {number} */ relDistanceY = 0;
    if (containerPoint.x < 0) {
      relDistanceX = containerPoint.x;
      if (containerPoint.y < 0)
        relDistanceY = containerPoint.y;
      else if (containerPoint.y > containerHeight)
        relDistanceY = containerPoint.y - containerHeight;
    } else if (containerPoint.x > containerWidth) {
      relDistanceX = containerPoint.x - containerWidth;
      if (containerPoint.y < 0)
        relDistanceY = containerPoint.y;
      else if (containerPoint.y > containerHeight)
        relDistanceY = containerPoint.y - containerHeight;
    }
    else if (containerPoint.y < 0)
      relDistanceY = -containerPoint.y;
    else
      relDistanceY = containerPoint.y - containerHeight;
    var /** @type {number} */ tempDist = relDistanceX * relDistanceX + relDistanceY * relDistanceY;
    if (tempDist <= relDistance) {
      relDistance = tempDist;
      controllerCandidate = curContainerController;
      candidateLocalX = containerPoint.x + adjustX;
      candidateLocalY = containerPoint.y + adjustY;
    }
  }
  localPoint.x = candidateLocalX;
  localPoint.y = candidateLocalY;
  return controllerCandidate;
};


/** @asprivate - given a target and location compute the CellCoordinates 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {Object} target
 * @param {Object} currentTarget
 * @param {number} localX
 * @param {number} localY
 * @return {org.apache.royale.textLayout.elements.CellCoordinates}
 */
org.apache.royale.textLayout.edit.SelectionManager.computeCellCoordinates = function(textFlow, target, currentTarget, localX, localY) {
  if (org.apache.royale.utils.Language.is(target, org.apache.royale.text.engine.ITextLine))
    return null;
  if (org.apache.royale.utils.Language.is(target, org.apache.royale.textLayout.elements.CellContainer)) {
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell = target.cellElement;
    return new org.apache.royale.textLayout.elements.CellCoordinates(cell.rowIndex, cell.colIndex, cell.table);
  }
  var /** @type {org.apache.royale.geom.Point} */ localPoint = new org.apache.royale.geom.Point(localX, localY);
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = org.apache.royale.textLayout.edit.SelectionManager.findController(textFlow, target, currentTarget, localPoint);
  if (!controller)
    return null;
  return controller.findCellAtPosition(localPoint);
};


/** @asprivate - given a target and location compute the selectionIndex 
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {Object} target
 * @param {Object} currentTarget
 * @param {number} localX
 * @param {number} localY
 * @return {number}
 */
org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndex = function(textFlow, target, currentTarget, localX, localY) {
  var /** @type {number} */ rslt = 0;
  var /** @type {boolean} */ useTargetedTextLine = false;
  if (org.apache.royale.utils.Language.is(target, org.apache.royale.text.engine.ITextLine)) {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = target.userData;
    if (tfl) {
      var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = tfl.paragraph;
      if (para.getTextFlow() == textFlow)
        useTargetedTextLine = true;
    }
  }
  var /** @type {org.apache.royale.geom.Point} */ localPoint = new org.apache.royale.geom.Point(localX, localY);
  if (useTargetedTextLine)
    rslt = org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndexInLine(textFlow, target, localPoint); else {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = org.apache.royale.textLayout.edit.SelectionManager.findController(textFlow, target, currentTarget, localPoint);
    rslt = (controller ? org.apache.royale.textLayout.edit.SelectionManager.computeSelectionIndexInContainer(textFlow, controller, localPoint) : -1) >> 0;
  }
  if (rslt >= textFlow.textLength)
    rslt = (textFlow.textLength - 1) >> 0;
  return rslt;
};


/** initialize a new point selection at click point @asprivate 
 * @export
 * @param {Object} currentTarget
 * @param {Object} target
 * @param {number} localX
 * @param {number} localY
 * @param {boolean=} extendSelection
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.setNewSelectionPoint = function(currentTarget, target, localX, localY, extendSelection) {
  extendSelection = typeof extendSelection !== 'undefined' ? extendSelection : false;
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.org_apache_royale_textLayout_edit_SelectionManager_selectionPoint(currentTarget, target, localX, localY, extendSelection);
  if (selState == null)
    return false;
  if (selState.anchorPosition != this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position || selState.activePosition != this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position) {
    this.selectRange(selState.anchorPosition, selState.activePosition);
    return true;
  }
  return false;
};


/** 
 *  @copy IInteractionEventHandler#mouseDownHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseDownHandler = function(event) {
  if (this.subManager)
    this.subManager.selectRange(-1, -1);
  var /** @type {Object} */ cell = this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.parentElement;
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ coords;
  if (!cell)
    coords = org.apache.royale.textLayout.edit.SelectionManager.computeCellCoordinates(this.textFlow, event.target, event.currentTarget, event.localX, event.localY);
  if (cell || coords) {
    if (coords)
      cell = coords.table.findCell(coords);
    this.superManager = cell.getTextFlow().interactionManager;
    if (event.shiftKey && cell.table == this.superManager.currentTable) {
      this.flushPendingOperations();
      coords = new org.apache.royale.textLayout.elements.CellCoordinates(cell.rowIndex, cell.colIndex);
      if (!org.apache.royale.textLayout.elements.CellCoordinates.areEqual(coords, this.superManager.anchorCellPosition) || this.superManager.activeCellPosition.isValid()) {
        this.superManager.selectCellRange(this.superManager.anchorCellPosition, coords);
        this.superManager.subManager = null;
        this.allowOperationMerge = false;
        event.stopPropagation();
        return;
      }
    }
    if (this.superManager == this) {
      if (cell.textFlow.interactionManager) {
        cell.textFlow.interactionManager.mouseDownHandler(event);
      }
      return;
    }
    this.superManager.currentTable = cell.table;
    this.superManager.deselect();
    this.superManager.anchorCellPosition.column = cell.colIndex;
    this.superManager.anchorCellPosition.row = cell.rowIndex;
    this.superManager.subManager = this;
  }
  this.handleMouseEventForSelection(event, event.shiftKey, cell != null);
};


/**
 * @copy IInteractionEventHandler#mouseMoveHandler()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseMoveHandler = function(event) {
  var /** @type {string} */ wmode = org.apache.royale.utils.Language.string(this.textFlow.computedFormat.blockProgression);
  if (wmode != org.apache.royale.textLayout.formats.BlockProgression.RL) {
    this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.IBEAM);
  }
  if (event.buttonDown) {
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell = this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.parentElement;
    if (cell) {
      do {
        var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ cellCoords = new org.apache.royale.textLayout.elements.CellCoordinates(cell.rowIndex, cell.colIndex, cell.table);
        var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ coords = org.apache.royale.textLayout.edit.SelectionManager.computeCellCoordinates(cell.getTextFlow(), event.target, event.currentTarget, event.localX, event.localY);
        if (!coords)
          break;
        if (org.apache.royale.textLayout.elements.CellCoordinates.areEqual(cellCoords, coords) && (!this.superManager.activeCellPosition.isValid() || org.apache.royale.textLayout.elements.CellCoordinates.areEqual(coords, this.superManager.activeCellPosition)))
          break;
        if (coords.table != cellCoords.table)
          break;
        this.superManager = cell.getTextFlow().interactionManager;
        if (!org.apache.royale.textLayout.elements.CellCoordinates.areEqual(coords, this.superManager.activeCellPosition)) {
          this.allowOperationMerge = false;
          this.superManager.selectCellRange(this.superManager.anchorCellPosition, coords);
          event.stopPropagation();
          return;
        }
      } while (0);
    }
    if (this.superManager && this.superManager.getCellRange())
      return;
    this.handleMouseEventForSelection(event, true, this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.parentElement != null);
  }
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 * @param {boolean} allowExtend
 * @param {boolean=} stopPropogate
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.handleMouseEventForSelection = function(event, allowExtend, stopPropogate) {
  stopPropogate = typeof stopPropogate !== 'undefined' ? stopPropogate : false;
  var /** @type {boolean} */ startSelectionActive = this.hasSelection();
  if (this.setNewSelectionPoint(event.currentTarget, event.target, event.localX, event.localY, startSelectionActive && allowExtend)) {
    if (startSelectionActive)
      this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    if (this.hasSelection())
      this.org_apache_royale_textLayout_edit_SelectionManager_addSelectionShapes();
  }
  this.allowOperationMerge = false;
  if (stopPropogate)
    event.stopPropagation();
};


/** 
 * @copy IInteractionEventHandler#mouseUpHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseUpHandler = function(event) {
  if (!this.org_apache_royale_textLayout_edit_SelectionManager__mouseOverSelectionArea) {
    this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.AUTO);
  }
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} activePara
 * @param {number} pos
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_atBeginningWordPos = function(activePara, pos) {
  if (pos == 0)
    return true;
  var /** @type {number} */ paraEnd = activePara.getAbsoluteStart() + activePara.textLength;
  activePara.getTextFlow().flowComposer.composeToPosition((paraEnd) >> 0);
  var /** @type {number} */ nextPos = activePara.findNextWordBoundary(pos);
  nextPos = activePara.findPreviousWordBoundary(nextPos);
  return (pos == nextPos);
};


/** 
 * @copy IInteractionEventHandler#mouseDoubleClickHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseDoubleClickHandler = function(event) {
  var /** @type {number} */ newActiveIndex = 0;
  var /** @type {number} */ newAnchorIndex = 0;
  if (!this.hasSelection())
    return;
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ activePara = this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.findAbsoluteParagraph(this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position);
  var /** @type {number} */ activeParaStart = activePara.getAbsoluteStart();
  //var /** @type {number} */ newActiveIndex = 0;
  if (this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position <= this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position)
    newActiveIndex = (activePara.findNextWordBoundary((this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position - activeParaStart) >> 0) + activeParaStart) >> 0;
  else
    newActiveIndex = (activePara.findPreviousWordBoundary((this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position - activeParaStart) >> 0) + activeParaStart) >> 0;
  if (newActiveIndex == activeParaStart + activePara.textLength)
    newActiveIndex--;
  //var /** @type {number} */ newAnchorIndex = 0;
  if (event.shiftKey)
    newAnchorIndex = this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position; else {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ anchorPara = this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.findAbsoluteParagraph(this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position);
    var /** @type {number} */ anchorParaStart = anchorPara.getAbsoluteStart();
    if (this.org_apache_royale_textLayout_edit_SelectionManager_atBeginningWordPos(anchorPara, (this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position - anchorParaStart) >> 0)) {
      newAnchorIndex = this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position;
    } else {
      if (this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position <= this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position)
        newAnchorIndex = (anchorPara.findPreviousWordBoundary((this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position - anchorParaStart) >> 0) + anchorParaStart) >> 0;
      else
        newAnchorIndex = (anchorPara.findNextWordBoundary((this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position - anchorParaStart) >> 0) + anchorParaStart) >> 0;
      if (newAnchorIndex == anchorParaStart + anchorPara.textLength)
        newAnchorIndex--;
    }
  }
  if (newAnchorIndex != this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position || newActiveIndex != this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position) {
    this.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, newAnchorIndex, newActiveIndex, null);
    this.selectionChanged();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
    if (this.hasSelection())
      this.org_apache_royale_textLayout_edit_SelectionManager_addSelectionShapes();
  }
  this.allowOperationMerge = false;
};


/** 
 * @copy IInteractionEventHandler#mouseOverHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseOverHandler = function(event) {
  this.org_apache_royale_textLayout_edit_SelectionManager__mouseOverSelectionArea = true;
  var /** @type {string} */ wmode = org.apache.royale.utils.Language.string(this.textFlow.computedFormat.blockProgression);
  if (wmode != org.apache.royale.textLayout.formats.BlockProgression.RL) {
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell = this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.parentElement;
    if (cell) {
      var /** @type {number} */ leftEdge = 5;
      var /** @type {number} */ topEdge = 5;
      var /** @type {org.apache.royale.geom.Point} */ globalPoint = new org.apache.royale.geom.Point(event.clientX, event.clientY);
      var /** @type {org.apache.royale.textLayout.elements.CellContainer} */ cellContainer = event.currentTarget;
      var /** @type {org.apache.royale.geom.Point} */ point;
      if (cellContainer) {
        var /** @type {org.apache.royale.geom.Point} */ cellContainerPoint = org.apache.royale.utils.PointUtils.localToGlobal(new org.apache.royale.geom.Point(), cellContainer);
        point = globalPoint.subtract(cellContainerPoint);
      }
      if (org.apache.royale.textLayout.edit.SelectionManager.useTableSelectionCursors) {
        if (cell.colIndex == 0 && point.x < leftEdge && point.y > topEdge) {
          event.stopImmediatePropagation();
          this.setMouseCursor(org.apache.royale.textLayout.edit.SelectionManager.SelectTableRow);
        } else if (cell.rowIndex == 0 && cell.colIndex == 0 && point.x < leftEdge && point.y < topEdge) {
          event.stopImmediatePropagation();
          this.setMouseCursor(org.apache.royale.textLayout.edit.SelectionManager.SelectTable);
        } else if (cell.rowIndex == 0 && point.x > leftEdge && point.y < topEdge) {
          event.stopImmediatePropagation();
          this.setMouseCursor(org.apache.royale.textLayout.edit.SelectionManager.SelectTableColumn);
        } else {
          this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.IBEAM);
        }
      } else {
        this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.IBEAM);
      }
    } else {
      this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.IBEAM);
    }
  } else {
    this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.AUTO);
  }
};


/** 
 * @copy IInteractionEventHandler#mouseOutHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseOutHandler = function(event) {
  this.org_apache_royale_textLayout_edit_SelectionManager__mouseOverSelectionArea = false;
  this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.AUTO);
};


/** 
 * @copy IInteractionEventHandler#focusInHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.focusInHandler = function(event) {
  this.org_apache_royale_textLayout_edit_SelectionManager__isActive = true;
  this.setSelectionFormatState(org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED);
};


/** 
 * @copy IInteractionEventHandler#focusOutHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.focusOutHandler = function(event) {
  if (this.org_apache_royale_textLayout_edit_SelectionManager__isActive)
    this.setSelectionFormatState(org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED);
};


/** 
 * @copy IInteractionEventHandler#activateHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.activateHandler = function(event) {
  if (!this.org_apache_royale_textLayout_edit_SelectionManager__isActive) {
    this.org_apache_royale_textLayout_edit_SelectionManager__isActive = true;
    this.setSelectionFormatState(org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED);
  }
};


/** 
 * @copy IInteractionEventHandler#deactivateHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.deactivateHandler = function(event) {
  if (this.org_apache_royale_textLayout_edit_SelectionManager__isActive) {
    this.org_apache_royale_textLayout_edit_SelectionManager__isActive = false;
    this.setSelectionFormatState(org.apache.royale.textLayout.edit.SelectionFormatState.INACTIVE);
  }
};


/** Perform a SelectionManager operation - these may never modify the flow but clients still are able to cancel them. 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.operations.FlowOperation} op
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.doOperation = function(op) {
  var /** @type {org.apache.royale.textLayout.events.FlowOperationEvent} */ opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN, false, true, op, 0, null);
  this.textFlow.dispatchEvent(opEvent);
  if (!opEvent.defaultPrevented) {
    op = opEvent.operation;
    if (!org.apache.royale.utils.Language.is(op, org.apache.royale.textLayout.operations.CopyOperation))
      throw new Error(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("illegalOperation", [org.apache.royale.reflection.getQualifiedClassName(op)]));
    var /** @type {Error} */ opError = null;
    try {
      op.doOperation();
    } catch (e) {
      opError = e;
    }
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END, false, true, op, 0, opError);
    this.textFlow.dispatchEvent(opEvent);
    opError = opEvent.defaultPrevented ? null : opEvent.error;
    if (opError)
      throw opError;
    this.textFlow.dispatchEvent(new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE, false, false, op, 0, null));
  }
};


/** 
 * @copy IInteractionEventHandler#editHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.editHandler = function(event) {
  switch (event.type) {
    case org.apache.royale.textLayout.events.EditEvent.COPY:
      this.flushPendingOperations();
      this.doOperation(new org.apache.royale.textLayout.operations.CopyOperation(this.getSelectionState()));
      break;
    case org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL:
      this.flushPendingOperations();
      this.selectAll();
      this.refreshSelection();
      break;
  }
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleLeftArrow = function(event) {
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.previousWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.previousCharacter(selState, event.shiftKey);
    } else {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.nextWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.nextCharacter(selState, event.shiftKey);
    }
  } else {
    if (event.altKey)
      org.apache.royale.textLayout.utils.NavigationUtil.endOfParagraph(selState, event.shiftKey);
    else if (platformModifier)
      org.apache.royale.textLayout.utils.NavigationUtil.endOfDocument(selState, event.shiftKey);
    else
      org.apache.royale.textLayout.utils.NavigationUtil.nextLine(selState, event.shiftKey);
  }
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleUpArrow = function(event) {
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (event.altKey)
      org.apache.royale.textLayout.utils.NavigationUtil.startOfParagraph(selState, event.shiftKey);
    else if (platformModifier)
      org.apache.royale.textLayout.utils.NavigationUtil.startOfDocument(selState, event.shiftKey);
    else
      org.apache.royale.textLayout.utils.NavigationUtil.previousLine(selState, event.shiftKey);
  } else {
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.previousWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.previousCharacter(selState, event.shiftKey);
    } else {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.nextWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.nextCharacter(selState, event.shiftKey);
    }
  }
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleRightArrow = function(event) {
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.nextWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.nextCharacter(selState, event.shiftKey);
    } else {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.previousWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.previousCharacter(selState, event.shiftKey);
    }
  } else {
    if (event.altKey)
      org.apache.royale.textLayout.utils.NavigationUtil.startOfParagraph(selState, event.shiftKey);
    else if (platformModifier)
      org.apache.royale.textLayout.utils.NavigationUtil.startOfDocument(selState, event.shiftKey);
    else
      org.apache.royale.textLayout.utils.NavigationUtil.previousLine(selState, event.shiftKey);
  }
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleDownArrow = function(event) {
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (event.altKey)
      org.apache.royale.textLayout.utils.NavigationUtil.endOfParagraph(selState, event.shiftKey);
    else if (platformModifier)
      org.apache.royale.textLayout.utils.NavigationUtil.endOfDocument(selState, event.shiftKey);
    else
      org.apache.royale.textLayout.utils.NavigationUtil.nextLine(selState, event.shiftKey);
  } else {
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.nextWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.nextCharacter(selState, event.shiftKey);
    } else {
      if (platformModifier || event.altKey)
        org.apache.royale.textLayout.utils.NavigationUtil.previousWord(selState, event.shiftKey);
      else
        org.apache.royale.textLayout.utils.NavigationUtil.previousCharacter(selState, event.shiftKey);
    }
  }
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleHomeKey = function(event) {
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  if (platformModifier && !event.altKey)
    org.apache.royale.textLayout.utils.NavigationUtil.startOfDocument(selState, event.shiftKey);
  else
    org.apache.royale.textLayout.utils.NavigationUtil.startOfLine(selState, event.shiftKey);
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleEndKey = function(event) {
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  if (platformModifier && !event.altKey)
    org.apache.royale.textLayout.utils.NavigationUtil.endOfDocument(selState, event.shiftKey);
  else
    org.apache.royale.textLayout.utils.NavigationUtil.endOfLine(selState, event.shiftKey);
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handlePageUpKey = function(event) {
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  org.apache.royale.textLayout.utils.NavigationUtil.previousPage(selState, event.shiftKey);
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handlePageDownKey = function(event) {
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  org.apache.royale.textLayout.utils.NavigationUtil.nextPage(selState, event.shiftKey);
  return selState;
};


/**
 * @private
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_handleKeyEvent = function(event) {
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = null;
  this.flushPendingOperations();
  if (event.defaultPrevented)
    return;
  switch (event.code) {
    case org.apache.royale.events.utils.NavigationKeys.LEFT:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handleLeftArrow(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.UP:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handleUpArrow(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.RIGHT:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handleRightArrow(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.DOWN:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handleDownArrow(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.HOME:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handleHomeKey(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.END:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handleEndKey(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.PAGE_DOWN:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handlePageDownKey(event);
      break;
    case org.apache.royale.events.utils.NavigationKeys.PAGE_UP:
      selState = this.org_apache_royale_textLayout_edit_SelectionManager_handlePageUpKey(event);
      break;
  }
  if (selState != null) {
    event.preventDefault();
    this.org_apache_royale_textLayout_edit_SelectionManager_updateSelectionAndShapes(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, selState.anchorPosition, selState.activePosition);
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer && this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.numControllers != 0)
      this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.getControllerAt((this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.numControllers - 1) >> 0).scrollToRange(selState.activePosition, selState.activePosition);
  }
  this.allowOperationMerge = false;
};


/** 
 * @copy IInteractionEventHandler#keyDownHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.keyDownHandler = function(event) {
  if (!this.hasSelection() || event.defaultPrevented)
    return;
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  if (platformModifier && !event.altKey && !event.defaultPrevented) {
    switch (event.code) {
      case "KeyC":
        org.apache.royale.textLayout.edit.Clipboard["generalClipboard"].registerCallback(org.apache.royale.utils.Language.closure(this.editHandler, this, 'editHandler'));
        break;
      case "KeyA":
        this.editHandler(new org.apache.royale.events.Event(org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL));
        event.preventDefault();
        break;
    }
  }
  switch (event.code) {
    case org.apache.royale.events.utils.NavigationKeys.LEFT:
    
    case org.apache.royale.events.utils.NavigationKeys.UP:
    
    case org.apache.royale.events.utils.NavigationKeys.RIGHT:
    
    case org.apache.royale.events.utils.NavigationKeys.DOWN:
    
    case org.apache.royale.events.utils.NavigationKeys.HOME:
    
    case org.apache.royale.events.utils.NavigationKeys.END:
    
    case org.apache.royale.events.utils.NavigationKeys.PAGE_DOWN:
    
    case org.apache.royale.events.utils.NavigationKeys.PAGE_UP:
    
    case org.apache.royale.events.utils.UIKeys.ESCAPE:
      this.org_apache_royale_textLayout_edit_SelectionManager_handleKeyEvent(event);
      break;
  }
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.parentElement)
    event.stopPropagation();
};


/** 
 * @copy IInteractionEventHandler#keyUpHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *  @asparam  event   the keyUp event
 * @export
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.keyUpHandler = function(event) {
};


/** 
 * @copy IInteractionEventHandler#keyFocusChangeHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *  @asparam  event   the FocusChange event
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.keyFocusChangeHandler = function(event) {
  return;
};


/** 
 * @copy IInteractionEventHandler#textInputHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.text.events.TextEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.textInputHandler = function(event) {
  this.ignoreNextTextEvent = false;
};


/** 
 * @copy IInteractionEventHandler#imeStartCompositionHandler()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.text.events.IMEEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.imeStartCompositionHandler = function(event) {
};


/** 
 * @copy IInteractionEventHandler#softKeyboardActivatingHandler()
 * 
 * @playerversion Flash 10.2
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.softKeyboardActivatingHandler = function(event) {
};


/**
 *  @asprivate
 * 
 *  Execute asynchronous operations at the beginning of a frame. This
 *  event listener is called only if there is work that needs to be done.
 * @protected
 * @param {number} timeStamp
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.enterFrameHandler = function(timeStamp) {
  this.flushPendingOperations();
};


/**
 * @copy IInteractionEventHandler#focusChangeHandler()
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.focusChangeHandler = function(event) {
};


/**
 * @copy IInteractionEventHandler#menuSelectHandler()
 * @export
 * @param {org.apache.royale.textLayout.events.ContextMenuEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.menuSelectHandler = function(event) {
  var /** @type {org.apache.royale.textLayout.dummy.ContextMenu} */ menu = event.target;
  if (this.activePosition != this.anchorPosition) {
    menu.clipboardItems.copy = true;
    menu.clipboardItems.cut = this.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE;
    menu.clipboardItems.clear = this.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE;
  } else {
    menu.clipboardItems.copy = false;
    menu.clipboardItems.cut = false;
    menu.clipboardItems.clear = false;
  }
  var /** @type {org.apache.royale.textLayout.edit.Clipboard} */ systemClipboard = org.apache.royale.textLayout.edit.Clipboard["generalClipboard"];
  if (this.activePosition != -1 && this.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE && (systemClipboard.hasFormat(org.apache.royale.textLayout.edit.TextClipboard.TEXT_LAYOUT_MARKUP) || systemClipboard.hasFormat(org.apache.royale.textLayout.edit.ClipboardFormats.TEXT_FORMAT))) {
    menu.clipboardItems.paste = true;
  } else {
    menu.clipboardItems.paste = false;
  }
  menu.clipboardItems.selectAll = true;
};


/**
 * @copy IInteractionEventHandler#mouseWheelHandler()
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.mouseWheelHandler = function(event) {
};


/**
 * @copy IInteractionEventHandler#flushPendingOperations()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.flushPendingOperations = function() {
};


/**
 * @copy ISelectionManager#getCommonCharacterFormat()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.TextRange=} range
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.getCommonCharacterFormat = function(range) {
  range = typeof range !== 'undefined' ? range : null;
  if (!range && !this.hasSelection())
    return null;
  var /** @type {org.apache.royale.textLayout.edit.ElementRange} */ selRange = org.apache.royale.textLayout.edit.ElementRange.createElementRange(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, range ? range.absoluteStart : this.absoluteStart, range ? range.absoluteEnd : this.absoluteEnd);
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ rslt = selRange.getCommonCharacterFormat();
  if (selRange.absoluteEnd == selRange.absoluteStart && this.pointFormat)
    rslt.apply(this.pointFormat);
  return rslt;
};


/**
 * @copy ISelectionManager#getCommonParagraphFormat()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.TextRange=} range
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.getCommonParagraphFormat = function(range) {
  range = typeof range !== 'undefined' ? range : null;
  if (!range && !this.hasSelection())
    return null;
  return org.apache.royale.textLayout.edit.ElementRange.createElementRange(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, range ? range.absoluteStart : this.absoluteStart, range ? range.absoluteEnd : this.absoluteEnd).getCommonParagraphFormat();
};


/**
 * @copy ISelectionManager#getCommonContainerFormat()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.TextRange=} range
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.getCommonContainerFormat = function(range) {
  range = typeof range !== 'undefined' ? range : null;
  if (!range && !this.hasSelection())
    return null;
  return org.apache.royale.textLayout.edit.ElementRange.createElementRange(this.org_apache_royale_textLayout_edit_SelectionManager__textFlow, range ? range.absoluteStart : this.absoluteStart, range ? range.absoluteEnd : this.absoluteEnd).getCommonContainerFormat();
};


/**
 * Refreshes and displays ITextFlow selection defined by a beginning and ending index.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @private
 * @param {org.apache.royale.textLayout.elements.ITextFlow} tf
 * @param {number} begIdx
 * @param {number} endIdx
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_updateSelectionAndShapes = function(tf, begIdx, endIdx) {
  this.org_apache_royale_textLayout_edit_SelectionManager_internalSetSelection(tf, begIdx, endIdx);
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer && this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.numControllers != 0)
    this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.getControllerAt((this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.flowComposer.numControllers - 1) >> 0).scrollToRange(this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position, this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position);
  this.selectionChanged();
  this.org_apache_royale_textLayout_edit_SelectionManager_clearSelectionShapes();
  this.org_apache_royale_textLayout_edit_SelectionManager_addSelectionShapes();
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_marks;


/** @asprivate 
 * @export
 * @return {org.apache.royale.textLayout.edit.Mark}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.createMark = function() {
  var /** @type {org.apache.royale.textLayout.edit.Mark} */ mark = new org.apache.royale.textLayout.edit.Mark(-1);
  this.org_apache_royale_textLayout_edit_SelectionManager_marks.push(mark);
  return mark;
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.textLayout.edit.Mark} mark
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.removeMark = function(mark) {
  var /** @type {number} */ idx = (this.org_apache_royale_textLayout_edit_SelectionManager_marks.indexOf(mark)) >> 0;
  if (idx != -1)
    this.org_apache_royale_textLayout_edit_SelectionManager_marks.splice(idx, 1);
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.org_apache_royale_textLayout_edit_SelectionManager_cellMarks;


/** @asprivate 
 * @export
 * @return {org.apache.royale.textLayout.elements.CellCoordinates}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.createCellMark = function() {
  var /** @type {org.apache.royale.textLayout.elements.CellCoordinates} */ mark = new org.apache.royale.textLayout.elements.CellCoordinates(-1, -1);
  this.org_apache_royale_textLayout_edit_SelectionManager_cellMarks.push(mark);
  return mark;
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} mark
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.removeCellMark = function(mark) {
  var /** @type {number} */ idx = (this.org_apache_royale_textLayout_edit_SelectionManager_cellMarks.indexOf(mark)) >> 0;
  if (idx != -1)
    this.org_apache_royale_textLayout_edit_SelectionManager_marks.splice(idx, 1);
};


/** 
 * @copy ISelectionManager#notifyInsertOrDelete()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {number} absolutePosition
 * @param {number} length
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.notifyInsertOrDelete = function(absolutePosition, length) {
  if (length == 0)
    return;
  for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_edit_SelectionManager_marks.length; i++) {
    var /** @type {org.apache.royale.textLayout.edit.Mark} */ mark = this.org_apache_royale_textLayout_edit_SelectionManager_marks[i];
    if (mark.position >= absolutePosition) {
      if (length < 0)
        mark.position = ((mark.position + length < absolutePosition) ? absolutePosition : mark.position + length) >> 0;
      else
        mark.position += length;
    }
  }
};


/**
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectTableCursorPoints;


/**
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.selectTableCursorDrawCommands;


/**
 * Create a select table cursor
 * @export
 * @return {org.apache.royale.textLayout.dummy.MouseCursorData}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.createSelectTableCursor = function() {
  var /** @type {Array} */ cursorData = [];
  var /** @type {org.apache.royale.textLayout.dummy.IBitmapDrawable} */ cursorShape;
  var /** @type {org.apache.royale.geom.Matrix} */ transformer = new org.apache.royale.geom.Matrix();
  var /** @type {org.apache.royale.textLayout.dummy.BitmapData} */ cursorFrame = new org.apache.royale.textLayout.dummy.BitmapData(32, 32, true, 0);
  var /** @type {number} */ angle = 8;
  var /** @type {number} */ rotation = 0.785398163;
  transformer.translate(-angle, -angle);
  transformer.rotate(rotation);
  transformer.translate(angle, angle);
  cursorFrame.draw(cursorShape, transformer);
  cursorData.push(cursorFrame);
  var /** @type {org.apache.royale.textLayout.dummy.MouseCursorData} */ mouseCursorData = new org.apache.royale.textLayout.dummy.MouseCursorData();
  mouseCursorData.data = cursorData;
  mouseCursorData.hotSpot = new org.apache.royale.geom.Point(16, 10);
  mouseCursorData.frameRate = 1;
  return mouseCursorData;
};


/**
 * Create a select row cursor
 * @export
 * @return {org.apache.royale.textLayout.dummy.MouseCursorData}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.createSelectTableRowCursor = function() {
  var /** @type {Array} */ cursorData = [];
  var /** @type {org.apache.royale.textLayout.dummy.IBitmapDrawable} */ cursorShape;
  var /** @type {org.apache.royale.geom.Matrix} */ transformer = new org.apache.royale.geom.Matrix();
  var /** @type {org.apache.royale.textLayout.dummy.BitmapData} */ cursorFrame = new org.apache.royale.textLayout.dummy.BitmapData(32, 32, true, 0);
  cursorFrame.draw(cursorShape, transformer);
  cursorData.push(cursorFrame);
  var /** @type {org.apache.royale.textLayout.dummy.MouseCursorData} */ mouseCursorData = new org.apache.royale.textLayout.dummy.MouseCursorData();
  mouseCursorData.data = cursorData;
  mouseCursorData.hotSpot = new org.apache.royale.geom.Point(16, 4);
  mouseCursorData.frameRate = 1;
  return mouseCursorData;
};


/**
 * Create a select table column cursor
 * @export
 * @return {org.apache.royale.textLayout.dummy.MouseCursorData}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.createSelectTableColumnCursor = function() {
  var /** @type {Array} */ cursorData = [];
  var /** @type {org.apache.royale.textLayout.dummy.IBitmapDrawable} */ cursorShape;
  var /** @type {org.apache.royale.geom.Matrix} */ transformer = new org.apache.royale.geom.Matrix();
  var /** @type {org.apache.royale.textLayout.dummy.BitmapData} */ cursorFrame = new org.apache.royale.textLayout.dummy.BitmapData(32, 32, true, 0);
  var /** @type {number} */ angle = 16;
  var /** @type {number} */ rotation = 0.785398163;
  transformer.translate(-angle, -angle);
  transformer.rotate(rotation * 2);
  transformer.translate(angle, angle);
  cursorFrame.draw(cursorShape, transformer);
  cursorData.push(cursorFrame);
  var /** @type {org.apache.royale.textLayout.dummy.MouseCursorData} */ mouseCursorData = new org.apache.royale.textLayout.dummy.MouseCursorData();
  mouseCursorData.data = cursorData;
  mouseCursorData.hotSpot = new org.apache.royale.geom.Point(28, 16);
  mouseCursorData.frameRate = 1;
  return mouseCursorData;
};


/**
 * @export
 * @param {boolean} sharedUndo
 * @return {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.copy = function(sharedUndo) {
  return new org.apache.royale.textLayout.edit.SelectionManager();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__currentTable = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__currentTable;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__currentTable = function(table) {
  this.org_apache_royale_textLayout_edit_SelectionManager__currentTable = table;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__pointFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__pointFormat;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__selectionType = function() {
  if (this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position != -1)
    return org.apache.royale.textLayout.edit.SelectionType.TEXT;
  else if (this.anchorCellPosition.isValid())
    return org.apache.royale.textLayout.edit.SelectionType.CELLS;
  return org.apache.royale.textLayout.edit.SelectionType.NONE;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__textFlow = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__textFlow;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__textFlow = function(value) {
  if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow != value) {
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow)
      this.flushPendingOperations();
    this.org_apache_royale_textLayout_edit_SelectionManager_clear();
    this.org_apache_royale_textLayout_edit_SelectionManager_clearCellSelections();
    this.org_apache_royale_textLayout_edit_SelectionManager__cellRange = null;
    if (!value)
      this.setMouseCursor(org.apache.royale.textLayout.dummy.MouseCursor.AUTO);
    this.org_apache_royale_textLayout_edit_SelectionManager__textFlow = value;
    if (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow && this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.interactionManager != this)
      this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.interactionManager = this;
  }
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__editingMode = function() {
  return org.apache.royale.textLayout.edit.EditingMode.READ_SELECT;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__windowActive = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState != org.apache.royale.textLayout.edit.SelectionFormatState.INACTIVE;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__focused = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__currentSelectionFormat = function() {
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED) {
    return this.unfocusedSelectionFormat;
  } else if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.INACTIVE) {
    return this.inactiveSelectionFormat;
  }
  return this.focusedSelectionFormat;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__currentCellSelectionFormat = function() {
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED) {
    return this.unfocusedCellSelectionFormat;
  } else if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.INACTIVE) {
    return this.inactiveCellSelectionFormat;
  }
  return this.focusedCellSelectionFormat;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__focusedSelectionFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__focusedSelectionFormat ? this.org_apache_royale_textLayout_edit_SelectionManager__focusedSelectionFormat : (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.configuration.focusedSelectionFormat : null);
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__focusedSelectionFormat = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionManager__focusedSelectionFormat = val;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED)
    this.refreshSelection();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__unfocusedSelectionFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__unfocusedSelectionFormat ? this.org_apache_royale_textLayout_edit_SelectionManager__unfocusedSelectionFormat : (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.configuration.unfocusedSelectionFormat : null);
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__unfocusedSelectionFormat = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionManager__unfocusedSelectionFormat = val;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED)
    this.refreshSelection();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__inactiveSelectionFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__inactiveSelectionFormat ? this.org_apache_royale_textLayout_edit_SelectionManager__inactiveSelectionFormat : (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.configuration.inactiveSelectionFormat : null);
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__inactiveSelectionFormat = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionManager__inactiveSelectionFormat = val;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.INACTIVE)
    this.refreshSelection();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__focusedCellSelectionFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__focusedCellSelectionFormat ? this.org_apache_royale_textLayout_edit_SelectionManager__focusedCellSelectionFormat : (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.configuration.focusedSelectionFormat : null);
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__focusedCellSelectionFormat = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionManager__focusedCellSelectionFormat = val;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED)
    this.refreshSelection();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__unfocusedCellSelectionFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__unfocusedCellSelectionFormat ? this.org_apache_royale_textLayout_edit_SelectionManager__unfocusedCellSelectionFormat : (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.configuration.unfocusedSelectionFormat : null);
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__unfocusedCellSelectionFormat = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionManager__unfocusedCellSelectionFormat = val;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.UNFOCUSED)
    this.refreshSelection();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__inactiveCellSelectionFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__inactiveCellSelectionFormat ? this.org_apache_royale_textLayout_edit_SelectionManager__inactiveCellSelectionFormat : (this.org_apache_royale_textLayout_edit_SelectionManager__textFlow ? this.org_apache_royale_textLayout_edit_SelectionManager__textFlow.configuration.inactiveSelectionFormat : null);
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__inactiveCellSelectionFormat = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionManager__inactiveCellSelectionFormat = val;
  if (this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState == org.apache.royale.textLayout.edit.SelectionFormatState.INACTIVE)
    this.refreshSelection();
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__selectionFormatState = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__selFormatState;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__anchorPosition = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__activePosition = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__absoluteStart = function() {
  return (this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position < this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position) ? this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position : this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__absoluteEnd = function() {
  return (this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position > this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position) ? this.org_apache_royale_textLayout_edit_SelectionManager_anchorMark.position : this.org_apache_royale_textLayout_edit_SelectionManager_activeMark.position;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__subManager = function() {
  return this._subManager;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__subManager = function(value) {
  if (value == this._subManager)
    return;
  if (this._subManager)
    this._subManager.selectRange(-1, -1);
  this._subManager = value;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__superManager = function() {
  return this._superManager;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__superManager = function(value) {
  this._superManager = value;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__anchorCellPosition = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__anchorCellPosition;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__anchorCellPosition = function(value) {
  this.org_apache_royale_textLayout_edit_SelectionManager__anchorCellPosition = value;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.get__activeCellPosition = function() {
  return this.org_apache_royale_textLayout_edit_SelectionManager__activeCellPosition;
};


org.apache.royale.textLayout.edit.SelectionManager.prototype.set__activeCellPosition = function(value) {
  this.org_apache_royale_textLayout_edit_SelectionManager__activeCellPosition = value;
};


Object.defineProperties(org.apache.royale.textLayout.edit.SelectionManager.prototype, /** @lends {org.apache.royale.textLayout.edit.SelectionManager.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.ITableElement} */
currentTable: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__currentTable,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__currentTable},
/**
  * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */
pointFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__pointFormat},
/**
  * @export
  * @type {string} */
selectionType: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__selectionType},
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.ITextFlow} */
textFlow: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__textFlow,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__textFlow},
/**
  * @export
  * @type {string} */
editingMode: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__editingMode},
/**
  * @export
  * @type {boolean} */
windowActive: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__windowActive},
/**
  * @export
  * @type {boolean} */
focused: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__focused},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
currentSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__currentSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
currentCellSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__currentCellSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
focusedSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__focusedSelectionFormat,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__focusedSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
unfocusedSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__unfocusedSelectionFormat,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__unfocusedSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
inactiveSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__inactiveSelectionFormat,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__inactiveSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
focusedCellSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__focusedCellSelectionFormat,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__focusedCellSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
unfocusedCellSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__unfocusedCellSelectionFormat,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__unfocusedCellSelectionFormat},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.SelectionFormat} */
inactiveCellSelectionFormat: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__inactiveCellSelectionFormat,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__inactiveCellSelectionFormat},
/**
  * @export
  * @type {string} */
selectionFormatState: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__selectionFormatState},
/**
  * @export
  * @type {number} */
anchorPosition: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__anchorPosition},
/**
  * @export
  * @type {number} */
activePosition: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__activePosition},
/**
  * @export
  * @type {number} */
absoluteStart: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__absoluteStart},
/**
  * @export
  * @type {number} */
absoluteEnd: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__absoluteEnd},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.ISelectionManager} */
subManager: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__subManager,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__subManager},
/**
  * @export
  * @type {org.apache.royale.textLayout.edit.ISelectionManager} */
superManager: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__superManager,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__superManager},
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.CellCoordinates} */
anchorCellPosition: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__anchorCellPosition,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__anchorCellPosition},
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.CellCoordinates} */
activeCellPosition: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__activeCellPosition,
set: org.apache.royale.textLayout.edit.SelectionManager.prototype.set__activeCellPosition}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SelectionManager', qName: 'org.apache.royale.textLayout.edit.SelectionManager', kind: 'class' }], interfaces: [org.apache.royale.textLayout.edit.ISelectionManager] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|useTableSelectionCursors': { type: 'Boolean', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.edit.SelectionManager.useTableSelectionCursors = v : org.apache.royale.textLayout.edit.SelectionManager.useTableSelectionCursors;}},
        '|SelectTable': { type: 'String', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.edit.SelectionManager.SelectTable = v : org.apache.royale.textLayout.edit.SelectionManager.SelectTable;}},
        '|SelectTableRow': { type: 'String', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.edit.SelectionManager.SelectTableRow = v : org.apache.royale.textLayout.edit.SelectionManager.SelectTableRow;}},
        '|SelectTableColumn': { type: 'String', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.edit.SelectionManager.SelectTableColumn = v : org.apache.royale.textLayout.edit.SelectionManager.SelectTableColumn;}},
        'selectTableCursorPoints': { type: 'Vector.<Number>', get_set: function (/** org.apache.royale.textLayout.edit.SelectionManager */ inst, /** * */ v) {return v !== undefined ? inst.selectTableCursorPoints = v : inst.selectTableCursorPoints;}},
        'selectTableCursorDrawCommands': { type: 'Vector.<int>', get_set: function (/** org.apache.royale.textLayout.edit.SelectionManager */ inst, /** * */ v) {return v !== undefined ? inst.selectTableCursorDrawCommands = v : inst.selectTableCursorDrawCommands;}}
      };
    },
    accessors: function () {
      return {
        'currentTable': { type: 'org.apache.royale.textLayout.elements.ITableElement', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectionType': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'editingMode': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'windowActive': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'focused': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'currentSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'currentCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'focusedSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'unfocusedSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'inactiveSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'focusedCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'unfocusedCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'inactiveCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectionFormatState': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'anchorPosition': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'activePosition': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'absoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'absoluteEnd': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'subManager': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'superManager': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'anchorCellPosition': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'activeCellPosition': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'}
      };
    },
    methods: function () {
      return {
        'hasCellRangeSelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectCellTextFlow': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'selectCell': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'selectCellAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableElement', false ,'int', false ,'int', false ]; }},
        'selectCells': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', false ]; }},
        'selectRow': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableRowElement', false ]; }},
        'selectRowAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableElement', false ,'int', false ]; }},
        'selectRows': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'Array', false ]; }},
        'selectColumn': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableColElement', false ]; }},
        'selectColumnAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableElement', false ,'int', false ]; }},
        'selectColumns': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'Array', false ]; }},
        'selectTable': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableElement', false ]; }},
        'selectCellRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'getCellRange': { type: 'org.apache.royale.textLayout.elements.CellRange', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'setCellRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellRange', false ]; }},
        'SelectionManager': { type: '', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'getSelectionState': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'setSelectionState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', false ]; }},
        'hasSelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'hasAnySelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'isRangeSelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'setSelectionFormatState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'String', false ]; }},
        'cloneSelectionFormatState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.ISelectionManager', false ]; }},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectAll': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'selectFirstPosition': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectLastPosition': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'deselect': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'refreshSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'clearSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'selectionChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'Boolean', true ,'Boolean', true ]; }},
        '|computeCellCoordinates': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'Object', false ,'Object', false ,'Number', false ,'Number', false ]; }},
        '|computeSelectionIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'Object', false ,'Object', false ,'Number', false ,'Number', false ]; }},
        'setNewSelectionPoint': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'Object', false ,'Object', false ,'Number', false ,'Number', false ,'Boolean', true ]; }},
        'mouseDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseMoveHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'handleMouseEventForSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ,'Boolean', false ,'Boolean', true ]; }},
        'mouseUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseDoubleClickHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOverHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'focusInHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'focusOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'activateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'deactivateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'doOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }},
        'editHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'keyDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyFocusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'textInputHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.text.events.TextEvent', false ]; }},
        'imeStartCompositionHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.text.events.IMEEvent', false ]; }},
        'softKeyboardActivatingHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'focusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'menuSelectHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.events.ContextMenuEvent', false ]; }},
        'mouseWheelHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'flushPendingOperations': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'getCommonCharacterFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', true ]; }},
        'getCommonParagraphFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', true ]; }},
        'getCommonContainerFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', true ]; }},
        'createMark': { type: 'org.apache.royale.textLayout.edit.Mark', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'removeMark': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.Mark', false ]; }},
        'createCellMark': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'removeCellMark': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'notifyInsertOrDelete': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'createSelectTableCursor': { type: 'org.apache.royale.textLayout.dummy.MouseCursorData', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'createSelectTableRowCursor': { type: 'org.apache.royale.textLayout.dummy.MouseCursorData', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'createSelectTableColumnCursor': { type: 'org.apache.royale.textLayout.dummy.MouseCursorData', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager'},
        'copy': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', declaredBy: 'org.apache.royale.textLayout.edit.SelectionManager', parameters: function () { return [ 'Boolean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.SelectionManager.prototype.ROYALE_COMPILE_FLAGS = 10;
