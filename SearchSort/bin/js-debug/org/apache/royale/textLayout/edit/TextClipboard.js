/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/TextClipboard.as
 * org.apache.royale.textLayout.edit.TextClipboard
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.TextClipboard');
/* Royale Dependency List: XML,org.apache.royale.textLayout.conversion.ConversionConstants,org.apache.royale.textLayout.conversion.ConversionType,org.apache.royale.textLayout.conversion.FormatDescriptor,org.apache.royale.textLayout.conversion.ITextExporter,org.apache.royale.textLayout.conversion.ITextImporter,org.apache.royale.textLayout.conversion.PlainTextImporter,org.apache.royale.textLayout.conversion.TextConverter,org.apache.royale.textLayout.edit.Clipboard,org.apache.royale.textLayout.edit.TextScrap,org.apache.royale.textLayout.elements.FlowGroupElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.utils.Language*/
goog.provide('org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer');




/**
 * @constructor
 */
org.apache.royale.textLayout.edit.TextClipboard = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.TextClipboard', org.apache.royale.textLayout.edit.TextClipboard);


/**
 * @export
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.edit.TextClipboard.TEXT_LAYOUT_MARKUP = "TEXT_LAYOUT_MARKUP";


/**
 * Gets any text on the system clipboard as a TextScrap object.
 *  
 * <p>If the "TEXT_LAYOUT_MARKUP" format is available, this method converts the formatted
 * string into a TextScrap and returns it. Otherwise, if the Clipboard.TEXT_Format is available,
 * this method converts the plain-text string into a TextScrap. If neither clipboard format
 * is available, this method returns <code>null</code>.</p>
 * 
 * <p>Flash Player requires that the <code>getContents()</code> method be called in a paste event handler. In AIR, 
 * this restriction only applies to content outside of the application security sandbox.</p>
 * 
 * @see org.apache.royale.events.Event#PASTE
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.TextClipboard.getContents = function() {
  function getFromClipboard(clipboardFormat) {
    return org.apache.royale.utils.Language.string(systemClipboard.hasFormat(clipboardFormat) ? String(systemClipboard.getData(clipboardFormat)) : null);
  };
  var /** @type {org.apache.royale.textLayout.edit.Clipboard} */ systemClipboard = org.apache.royale.textLayout.edit.Clipboard["generalClipboard"];
  
  systemClipboard.preventDefault();
  if (systemClipboard.hasFormat(org.apache.royale.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT))
    return systemClipboard.getData(org.apache.royale.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT); else {
    var /** @type {org.apache.royale.textLayout.conversion.PlainTextImporter} */ importer = new org.apache.royale.textLayout.conversion.PlainTextImporter();
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ flow = importer.importToFlow(systemClipboard.getData("text/plain"));
    var /** @type {org.apache.royale.textLayout.edit.TextScrap} */ textScrap = new org.apache.royale.textLayout.edit.TextScrap(flow);
    textScrap.setPlainText(true);
    return textScrap;
  }
  return org.apache.royale.textLayout.edit.TextClipboard.importScrap(getFromClipboard);
  
};


/** @asprivate 
 * Internal function to import a scrap to available clipboard formats. It abstracts 
 * out the actual clipboard access so it can be called from testing code.
 * @export
 * @param {Function} importFunctor
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.TextClipboard.importScrap = function(importFunctor) {
  var /** @type {org.apache.royale.textLayout.edit.TextScrap} */ textScrap;
  var /** @type {string} */ textOnClipboard;
  var /** @type {number} */ numFormats = org.apache.royale.textLayout.conversion.TextConverter["numFormats"];
  for (var /** @type {number} */ i = 0; i < numFormats && !textScrap; ++i) {
    var /** @type {org.apache.royale.textLayout.conversion.FormatDescriptor} */ descriptor = org.apache.royale.textLayout.conversion.TextConverter.getFormatDescriptorAt(i);
    textOnClipboard = org.apache.royale.utils.Language.string(importFunctor(descriptor.clipboardFormat));
    if (textOnClipboard && (textOnClipboard != "")) {
      textOnClipboard = textOnClipboard.replace(/\u000B/g, "\u2028");
      textScrap = org.apache.royale.textLayout.edit.TextClipboard.importToScrap(textOnClipboard, descriptor.format);
    }
  }
  return textScrap;
};


/**
 * Puts a TextScrap onto the system clipboard.  
 * 
 * <p>The TextScrap is placed onto the system clipboard as both a Text Layout Markup
 * representation and a plain text representation.</p>
 * 
 * <p>Flash Player requires a user event (such as a key press or mouse click) before 
 * calling <code>setContents()</code>. In AIR, this restriction only applies to content outside of 
 * the application security sandbox. </p>
 * 
 * @asparam scrap The TextScrap to paste into the clipboard.
 * 
 * @see org.apache.royale.events.Event#COPY
 * @see org.apache.royale.events.Event#CUT
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.TextScrap} textScrap
 */
org.apache.royale.textLayout.edit.TextClipboard.setContents = function(textScrap) {
  function addToClipboard(clipboardFormat, clipboardData) {
    systemClipboard.setData(clipboardFormat, clipboardData);
  };
  if (!textScrap)
    return;
  var /** @type {org.apache.royale.textLayout.edit.Clipboard} */ systemClipboard = org.apache.royale.textLayout.edit.Clipboard["generalClipboard"];
  systemClipboard.clear();
  
  systemClipboard.setData(org.apache.royale.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT, textScrap);
  systemClipboard.setData("text/plain", textScrap.textFlow.getText());
  systemClipboard.preventDefault();
  
};


/** @asprivate 
 * Internal function to export a scrap to available clipboard formats. It abstracts 
 * out the actual clipboard access so it can be called from testing code.
 * @export
 * @param {org.apache.royale.textLayout.edit.TextScrap} scrap
 * @param {Function} exportFunctor
 */
org.apache.royale.textLayout.edit.TextClipboard.exportScrap = function(scrap, exportFunctor) {
  var /** @type {Array} */ formatsPosted = [];
  var /** @type {number} */ numFormats = org.apache.royale.textLayout.conversion.TextConverter["numFormats"];
  for (var /** @type {number} */ i = 0; i < numFormats; i++) {
    var /** @type {org.apache.royale.textLayout.conversion.FormatDescriptor} */ descriptor = org.apache.royale.textLayout.conversion.TextConverter.getFormatDescriptorAt(i);
    if (descriptor.clipboardFormat && formatsPosted.indexOf(descriptor.clipboardFormat) < 0) {
      var /** @type {string} */ exportString = org.apache.royale.textLayout.edit.TextClipboard.exportForClipboard(scrap, descriptor.format);
      if (exportString) {
        exportFunctor(descriptor.clipboardFormat, exportString);
        formatsPosted.push(descriptor.clipboardFormat);
      }
    }
  }
};


/** @asprivate 
 * @export
 * @param {string} textOnClipboard
 * @param {string} format
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.TextClipboard.importToScrap = function(textOnClipboard, format) {
  var /** @type {org.apache.royale.textLayout.edit.TextScrap} */ textScrap;
  var /** @type {org.apache.royale.textLayout.conversion.ITextImporter} */ importer = org.apache.royale.textLayout.conversion.TextConverter.getImporter(format);
  if (importer) {
    importer.useClipboardAnnotations = true;
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = importer.importToFlow(textOnClipboard);
    if (textFlow) {
      textScrap = new org.apache.royale.textLayout.edit.TextScrap(textFlow);
      if (format == org.apache.royale.textLayout.conversion.TextConverter.PLAIN_TEXT_FORMAT)
        textScrap.setPlainText(true);
      else if (format == org.apache.royale.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT)
        textScrap.setPlainText(false);
    }
    if (!textScrap && format == org.apache.royale.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT)
      textScrap = org.apache.royale.textLayout.edit.TextClipboard.importOldTextLayoutFormatToScrap(textOnClipboard);
  }
  return textScrap;
};


/** @asprivate 
 * @export
 * @param {string} textOnClipboard
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.TextClipboard.importOldTextLayoutFormatToScrap = function(textOnClipboard) {
  var /** @type {org.apache.royale.textLayout.edit.TextScrap} */ textScrap;
  var /** @type {Object} */ originalSettings = XML.settings();
  try {
    XML.ignoreProcessingInstructions = false;
    XML.ignoreWhitespace = false;
    var /** @type {XML} */ xmlTree = new XML(textOnClipboard);
    if (xmlTree.localName() == "TextScrap") {
      var /** @type {XML} */ beginArrayChild = xmlTree.descendants(new QName(null,'BeginMissingElements'))[0];
      var /** @type {XML} */ endArrayChild = xmlTree.descendants(new QName(null,'EndMissingElements'))[0];
      var /** @type {XML} */ textLayoutMarkup = xmlTree.descendants(new QName(null,'TextFlow'))[0];
      var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = org.apache.royale.textLayout.conversion.TextConverter.importToFlow(textLayoutMarkup, org.apache.royale.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT);
      if (textFlow) {
        textScrap = new org.apache.royale.textLayout.edit.TextScrap(textFlow);
        var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ element;
        var /** @type {Array} */ endMissingArray = org.apache.royale.textLayout.edit.TextClipboard.getEndArray(endArrayChild, textFlow);
        var foreachiter0_target = endMissingArray;
        for (var foreachiter0 in foreachiter0_target) 
        {
        element = foreachiter0_target[foreachiter0];
        
          element.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, "true");}
        
      }
    }
  } finally {
    XML.setSettings(originalSettings);
  }
  return textScrap;
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.textLayout.edit.TextScrap} scrap
 * @param {string} format
 * @return {string}
 */
org.apache.royale.textLayout.edit.TextClipboard.exportForClipboard = function(scrap, format) {
  var /** @type {org.apache.royale.textLayout.conversion.ITextExporter} */ exporter = org.apache.royale.textLayout.conversion.TextConverter.getExporter(format);
  if (exporter) {
    exporter.useClipboardAnnotations = true;
    return exporter.export(scrap.textFlow, org.apache.royale.textLayout.conversion.ConversionType.STRING_TYPE);
  }
  return null;
};


/**
 * @private
 * @param {XML} beginArrayChild
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @return {Array}
 */
org.apache.royale.textLayout.edit.TextClipboard.getBeginArray = function(beginArrayChild, textFlow) {
  var /** @type {number} */ startPos = 0;
  var /** @type {number} */ endPos = 0;
  var /** @type {number} */ indexIntoFlowElement = 0;
  var /** @type {Array} */ beginArray = new Array();
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curFlElement = textFlow;
  if (beginArrayChild != null) {
    var /** @type {string} */ value = (beginArrayChild.attribute('value') != undefined) ? String(beginArrayChild.attribute('value')) : "";
    beginArray.push(textFlow);
    var /** @type {number} */ posOfComma = (value.indexOf(",")) >> 0;
    //var /** @type {number} */ startPos = 0;
    //var /** @type {number} */ endPos = 0;
    var /** @type {string} */ curStr;
    //var /** @type {number} */ indexIntoFlowElement = 0;
    while (posOfComma >= 0) {
      startPos = (posOfComma + 1) >> 0;
      posOfComma = (value.indexOf(",", startPos)) >> 0;
      if (posOfComma >= 0) {
        endPos = posOfComma;
      } else {
        endPos = (value.length) >> 0;
      }
      curStr = value.substring(startPos, endPos);
      if (curStr.length > 0) {
        indexIntoFlowElement = (parseInt(curStr, undefined)) >> 0;
        if (org.apache.royale.utils.Language.is(curFlElement, org.apache.royale.textLayout.elements.FlowGroupElement)) {
          curFlElement = curFlElement.getChildAt(indexIntoFlowElement);
          beginArray.push(curFlElement);
        }
      }
    }
  }
  return beginArray.reverse();
};


/**
 * @private
 * @param {XML} endArrayChild
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @return {Array}
 */
org.apache.royale.textLayout.edit.TextClipboard.getEndArray = function(endArrayChild, textFlow) {
  var /** @type {number} */ startPos = 0;
  var /** @type {number} */ endPos = 0;
  var /** @type {number} */ indexIntoFlowElement = 0;
  var /** @type {Array} */ endArray = new Array();
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curFlElement = textFlow;
  if (endArrayChild != null) {
    var /** @type {string} */ value = (endArrayChild.attribute('value') != undefined) ? String(endArrayChild.attribute('value')) : "";
    endArray.push(textFlow);
    var /** @type {number} */ posOfComma = (value.indexOf(",")) >> 0;
    //var /** @type {number} */ startPos = 0;
    //var /** @type {number} */ endPos = 0;
    var /** @type {string} */ curStr;
    //var /** @type {number} */ indexIntoFlowElement = 0;
    while (posOfComma >= 0) {
      startPos = (posOfComma + 1) >> 0;
      posOfComma = (value.indexOf(",", startPos)) >> 0;
      if (posOfComma >= 0) {
        endPos = posOfComma;
      } else {
        endPos = (value.length) >> 0;
      }
      curStr = value.substring(startPos, endPos);
      if (curStr.length > 0) {
        indexIntoFlowElement = (parseInt(curStr, undefined)) >> 0;
        if (org.apache.royale.utils.Language.is(curFlElement, org.apache.royale.textLayout.elements.FlowGroupElement)) {
          curFlElement = curFlElement.getChildAt(indexIntoFlowElement);
          endArray.push(curFlElement);
        }
      }
    }
  }
  return endArray.reverse();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.TextClipboard.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextClipboard', qName: 'org.apache.royale.textLayout.edit.TextClipboard', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.TextClipboard.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|getContents': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard'},
        '|importScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard', parameters: function () { return [ 'Function', false ]; }},
        '|setContents': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard', parameters: function () { return [ 'org.apache.royale.textLayout.edit.TextScrap', false ]; }},
        '|exportScrap': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard', parameters: function () { return [ 'org.apache.royale.textLayout.edit.TextScrap', false ,'Function', false ]; }},
        '|importToScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard', parameters: function () { return [ 'String', false ,'String', false ]; }},
        '|importOldTextLayoutFormatToScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard', parameters: function () { return [ 'String', false ]; }},
        '|exportForClipboard': { type: 'String', declaredBy: 'org.apache.royale.textLayout.edit.TextClipboard', parameters: function () { return [ 'org.apache.royale.textLayout.edit.TextScrap', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.TextClipboard.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @constructor
 */
org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer', org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextClipboardSingletonEnforcer', qName: 'org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer.prototype.ROYALE_REFLECTION_INFO = function () {
  return {};
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.TextClipboard.TextClipboardSingletonEnforcer.prototype.ROYALE_COMPILE_FLAGS = 10;
