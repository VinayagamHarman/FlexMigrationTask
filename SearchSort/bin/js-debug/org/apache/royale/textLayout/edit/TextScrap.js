/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/TextScrap.as
 * org.apache.royale.textLayout.edit.TextScrap
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.TextScrap');
/* Royale Dependency List: org.apache.royale.textLayout.conversion.ConversionConstants,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TextRange,org.apache.royale.utils.Language,XML*/




/**
 * Creates a TextScrap object.
 * 
 * <p>Use the <code>createTextScrap()</code> method to create a TextScrap object from
 * a range of text represented by a TextRange object.</p>
 *  
 * @asparam textFlow if set, the new TextScrap object contains the entire text flow.
 * Otherwise, the TextScrap object is empty.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @param {org.apache.royale.textLayout.elements.ITextFlow=} textFlow
 */
org.apache.royale.textLayout.edit.TextScrap = function(textFlow) {
  textFlow = typeof textFlow !== 'undefined' ? textFlow : null;
  this.org_apache_royale_textLayout_edit_TextScrap__textFlow = textFlow;
  this.org_apache_royale_textLayout_edit_TextScrap__textFlow.flowComposer = null;
  this.org_apache_royale_textLayout_edit_TextScrap__plainText = -1;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.TextScrap', org.apache.royale.textLayout.edit.TextScrap);


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.org_apache_royale_textLayout_edit_TextScrap__textFlow;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.org_apache_royale_textLayout_edit_TextScrap__plainText = 0;


/**
 * @export
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.edit.TextScrap.MERGE_TO_NEXT_ON_PASTE = "mergeToNextOnPaste";


/**
 * Creates a TextScrap object from a range of text represented by a TextRange object.
 * 
 * @asparam range the TextRange object representing the range of text to copy.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.TextRange} range
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.TextScrap.createTextScrap = function(range) {
  var /** @type {number} */ startPos = range.absoluteStart;
  var /** @type {number} */ endPos = range.absoluteEnd;
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ theFlow = range.textFlow;
  if (!theFlow || startPos >= endPos)
    return null;
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ newTextFlow = theFlow.deepCopy(startPos, endPos);
  newTextFlow.normalize();
  var /** @type {org.apache.royale.textLayout.edit.TextScrap} */ retTextScrap = new org.apache.royale.textLayout.edit.TextScrap(newTextFlow);
  if (newTextFlow.textLength > 0) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ fl = newTextFlow.getLastLeaf();
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ srcElem = theFlow.findLeaf((endPos - 1) >> 0);
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ copyElem = newTextFlow.getLastLeaf();
    if (org.apache.royale.utils.Language.is(copyElem, org.apache.royale.textLayout.elements.ISpanElement) && (!org.apache.royale.utils.Language.is(srcElem, org.apache.royale.textLayout.elements.ISpanElement)))
      copyElem = newTextFlow.findLeaf((newTextFlow.textLength - 2) >> 0);
    while (copyElem && srcElem) {
      if (endPos < srcElem.getAbsoluteStart() + srcElem.textLength)
        copyElem.setStyle(org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE, "true");
      copyElem = copyElem.parent;
      srcElem = srcElem.parent;
    }
    return retTextScrap;
  }
  return null;
};


/**
 * Creates a duplicate copy of this TextScrap object.
 * 
 * @asreturn TextScrap A copy of this TextScrap.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.clone = function() {
  return new org.apache.royale.textLayout.edit.TextScrap(this.textFlow.deepCopy());
};


/** Marks the TextScrap's content as being either plain or formatted 
 * @export
 * @param {boolean} plainText
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.setPlainText = function(plainText) {
  this.org_apache_royale_textLayout_edit_TextScrap__plainText = (plainText ? 0 : 1) >> 0;
};


/** 
 * Returns true if the text is plain text (not formatted)
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.isPlainText = function() {
  var self = this;
  function isPlainElement(element) {
    if (!org.apache.royale.utils.Language.is(element, org.apache.royale.textLayout.elements.IParagraphElement) && !org.apache.royale.utils.Language.is(element, org.apache.royale.textLayout.elements.ISpanElement)) {
      foundAttributes = true;
      return true;
    }
    var /** @type {Object} */ styles = element.styles;
    if (styles) {
      for (var /** @type {string} */ prop in styles) {
        if (prop != org.apache.royale.textLayout.conversion.ConversionConstants.MERGE_TO_NEXT_ON_PASTE) {
          foundAttributes = true;
          return true;
        }
      }
    }
    return false;
  };
  var /** @type {boolean} */ foundAttributes = false;
  if (this.org_apache_royale_textLayout_edit_TextScrap__plainText == -1) {
    for (var /** @type {number} */ i = (this.org_apache_royale_textLayout_edit_TextScrap__textFlow.numChildren - 1) >> 0; i >= 0; --i)
      this.org_apache_royale_textLayout_edit_TextScrap__textFlow.getChildAt(i).applyFunctionToElements(isPlainElement);
    this.org_apache_royale_textLayout_edit_TextScrap__plainText = (foundAttributes ? 1 : 0) >> 0;
  }
  return this.org_apache_royale_textLayout_edit_TextScrap__plainText == 0;
  
};


org.apache.royale.textLayout.edit.TextScrap.prototype.get__textFlow = function() {
  return this.org_apache_royale_textLayout_edit_TextScrap__textFlow;
};


Object.defineProperties(org.apache.royale.textLayout.edit.TextScrap.prototype, /** @lends {org.apache.royale.textLayout.edit.TextScrap.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.ITextFlow} */
textFlow: {
get: org.apache.royale.textLayout.edit.TextScrap.prototype.get__textFlow}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextScrap', qName: 'org.apache.royale.textLayout.edit.TextScrap', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.TextScrap'}
      };
    },
    methods: function () {
      return {
        'TextScrap': { type: '', declaredBy: 'org.apache.royale.textLayout.edit.TextScrap', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', true ]; }},
        '|createTextScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.TextScrap', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', false ]; }},
        'clone': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.TextScrap'},
        'setPlainText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.TextScrap', parameters: function () { return [ 'Boolean', false ]; }},
        'isPlainText': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.TextScrap'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.TextScrap.prototype.ROYALE_COMPILE_FLAGS = 10;
