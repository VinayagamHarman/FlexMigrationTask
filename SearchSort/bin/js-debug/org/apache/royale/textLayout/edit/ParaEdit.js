/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/ParaEdit.as
 * org.apache.royale.textLayout.edit.ParaEdit
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.ParaEdit');
/* Royale Dependency List: org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IInlineGraphicElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITableLeafElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
org.apache.royale.textLayout.edit.ParaEdit = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.ParaEdit', org.apache.royale.textLayout.edit.ParaEdit);


/**
 * Inserts text into specified paragraph
 * @asparam textFlow		ITextFlow to insert into
 * @asparam absoluteStart	index relative to beginning of the ITextFlow to insert text
 * @asparam text	actual text to insert 
 * @asparam createNewSpan	flag to force creation of a new span
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {number} absoluteStart
 * @param {string} insertText
 * @param {boolean} createNewSpan
 * @return {org.apache.royale.textLayout.elements.ISpanElement}
 */
org.apache.royale.textLayout.edit.ParaEdit.insertText = function(textFlow, absoluteStart, insertText, createNewSpan) {
  var /** @type {number} */ siblingIndex = 0;
  if (insertText.length == 0)
    return null;
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ sibling = textFlow.findLeaf(absoluteStart);
  //var /** @type {number} */ siblingIndex = 0;
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paragraph = sibling.getParagraph();
  var /** @type {number} */ paraStart = paragraph.getAbsoluteStart();
  var /** @type {number} */ paraSelBegIdx = (absoluteStart - paraStart) >> 0;
  if (paraStart == absoluteStart)
    siblingIndex = 0; else {
    if (paraSelBegIdx == sibling.getElementRelativeStart(paragraph))
      sibling = org.apache.royale.utils.Language.as(sibling, org.apache.royale.textLayout.elements.IFlowLeafElement, true).getPreviousLeaf(paragraph);
    if (org.apache.royale.utils.Language.is(sibling, org.apache.royale.textLayout.elements.ITableLeafElement))
      siblingIndex = (sibling.parent.parent.getChildIndex(sibling.parent) + 1) >> 0;
    else
      siblingIndex = (sibling.parent.getChildIndex(sibling) + 1) >> 0;
  }
  var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ insertParent = sibling.parent;
  if (org.apache.royale.utils.Language.is(insertParent, org.apache.royale.textLayout.elements.ITableElement))
    insertParent = insertParent.parent;
  var /** @type {org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase} */ curSPGElement = sibling.getParentByType("SubParagraphGroupElementBase");
  while (curSPGElement != null) {
    var /** @type {number} */ subParInsertionPoint = (paraSelBegIdx - curSPGElement.getElementRelativeStart(paragraph)) >> 0;
    if (((subParInsertionPoint == 0) && (!curSPGElement.acceptTextBefore())) || (!curSPGElement.acceptTextAfter() && (subParInsertionPoint == curSPGElement.textLength || (subParInsertionPoint == curSPGElement.textLength - 1 && (sibling == paragraph.getLastLeaf()))))) {
      createNewSpan = true;
      sibling = insertParent;
      insertParent = insertParent.parent;
      curSPGElement = curSPGElement.getParentByType("SubParagraphGroupElementBase");
      siblingIndex = (insertParent.getChildIndex(sibling) + 1) >> 0;
    } else {
      break;
    }
  }
  var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ insertSpan = sibling;
  if (paragraph.terminatorSpan.textLength == 1 && paragraph.terminatorSpan == insertSpan)
    createNewSpan = false;
  if (!insertSpan || createNewSpan) {
    var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ newSpan = org.apache.royale.textLayout.elements.ElementHelper.getSpan();
    if (siblingIndex > 0) {
      var /** @type {number} */ relativeStart = (paraSelBegIdx - sibling.getElementRelativeStart(paragraph)) >> 0;
      if (createNewSpan) {
        if (relativeStart == 0)
          siblingIndex--;
        else if (relativeStart != sibling.textLength)
          sibling.splitAtPosition(relativeStart);
      }
    }
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ nextLeaf = paragraph.findLeaf(paraSelBegIdx);
    if (nextLeaf && nextLeaf.textLength == 1 && nextLeaf.parent == insertParent && nextLeaf == paragraph.terminatorSpan) {
      newSpan = org.apache.royale.utils.Language.as(nextLeaf, org.apache.royale.textLayout.elements.ISpanElement, true);
    } else {
      insertParent.replaceChildren(siblingIndex, siblingIndex, newSpan);
    }
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ formatElem = newSpan.getPreviousLeaf(paragraph);
    if (formatElem == null)
      newSpan.format = newSpan.getNextLeaf(paragraph).format;
    else
      newSpan.format = formatElem.format;
    insertSpan = newSpan;
  }
  var /** @type {number} */ runInsertionPoint = (paraSelBegIdx - insertSpan.getElementRelativeStart(paragraph)) >> 0;
  insertSpan.replaceText(runInsertionPoint, runInsertionPoint, insertText);
  return insertSpan;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} para
 * @param {number} paraSelBegIdx
 * @param {number} totalToDelete
 */
org.apache.royale.textLayout.edit.ParaEdit.deleteTextInternal = function(para, paraSelBegIdx, totalToDelete) {
  var /** @type {number} */ curNumToDelete = 0;
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ composeNode;
  var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ curSpan;
  //var /** @type {number} */ curNumToDelete = 0;
  var /** @type {number} */ curSpanDeletePos = 0;
  while (totalToDelete > 0) {
    composeNode = para.findLeaf(paraSelBegIdx);
    
    curSpan = composeNode;
    var /** @type {number} */ curSpanRelativeStart = curSpan.getElementRelativeStart(para);
    curSpanDeletePos = (paraSelBegIdx - curSpanRelativeStart) >> 0;
    if (paraSelBegIdx > (curSpanRelativeStart + curSpan.textLength)) {
      curNumToDelete = curSpan.textLength;
    } else {
      curNumToDelete = ((curSpanRelativeStart + curSpan.textLength) - paraSelBegIdx) >> 0;
    }
    if (totalToDelete < curNumToDelete) {
      curNumToDelete = totalToDelete;
    }
    curSpan.replaceText(curSpanDeletePos, (curSpanDeletePos + curNumToDelete) >> 0, "");
    if (curSpan.textLength == 0) {
      var /** @type {number} */ delIdx = curSpan.parent.getChildIndex(curSpan);
      curSpan.parent.replaceChildren(delIdx, (delIdx + 1) >> 0, null);
    }
    totalToDelete -= curNumToDelete;
  }
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} para
 * @param {number} paraSelBegIdx
 * @param {number} totalToDelete
 */
org.apache.royale.textLayout.edit.ParaEdit.deleteText = function(para, paraSelBegIdx, totalToDelete) {
  var /** @type {number} */ lastParPos = (para.textLength - 1) >> 0;
  if ((paraSelBegIdx < 0) || (paraSelBegIdx > lastParPos)) {
    return;
  }
  if (totalToDelete <= 0) {
    return;
  }
  var /** @type {number} */ endPos = (paraSelBegIdx + totalToDelete - 1) >> 0;
  if (endPos > lastParPos) {
    endPos = lastParPos;
    totalToDelete = (endPos - paraSelBegIdx + 1) >> 0;
  }
  org.apache.royale.textLayout.edit.ParaEdit.deleteTextInternal(para, paraSelBegIdx, totalToDelete);
};


/**
 * Creates image and inserts it into specified FlowGroupElement
 * @asparam flowBlock	FlowGroupElement to insert image into
 * @asparam flowSelBegIdx	index relative to beginning of the FlowGroupElement to insert image
 * @asparam urlString	the url of image to insert
 * @asparam width	the width of the image
 * @asparam height the height of the image
 * @asparam options none supported
 * @royaleignorecoercion org.apache.royale.textLayout.element.ISpanElement
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} flowBlock
 * @param {number} flowSelBegIdx
 * @param {Object} source
 * @param {Object} width
 * @param {Object} height
 * @param {Object} options
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} pointFormat
 * @return {org.apache.royale.textLayout.elements.IInlineGraphicElement}
 */
org.apache.royale.textLayout.edit.ParaEdit.createImage = function(flowBlock, flowSelBegIdx, source, width, height, options, pointFormat) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curComposeNode = flowBlock.findLeaf(flowSelBegIdx);
  var /** @type {number} */ posInCurComposeNode = 0;
  if (curComposeNode != null) {
    posInCurComposeNode = (flowSelBegIdx - curComposeNode.getElementRelativeStart(flowBlock)) >> 0;
  }
  if ((curComposeNode != null) && (posInCurComposeNode > 0) && (posInCurComposeNode < curComposeNode.textLength)) {
    curComposeNode.splitAtPosition(posInCurComposeNode);
  }
  var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ imgElem = org.apache.royale.textLayout.elements.ElementHelper.getInline();
  imgElem.height = height;
  imgElem.width = width;
  imgElem.float = options ? options.toString() : undefined;
  var /** @type {Object} */ src = source;
  var /** @type {string} */ embedStr = "@Embed";
  if (org.apache.royale.utils.Language.is(src, String) && src.length > embedStr.length && src.substr(0, embedStr.length) == embedStr) {
    var /** @type {string} */ searchStr = "source=";
    var /** @type {number} */ index = (src.indexOf(searchStr, embedStr.length)) >> 0;
    if (index > 0) {
      index += (searchStr.length) >> 0;
      index = (src.indexOf("'", index)) >> 0;
      src = src.substring(index + 1, src.indexOf("'", index + 1));
    }
  }
  imgElem.source = src;
  while (curComposeNode && curComposeNode.parent != flowBlock) {
    curComposeNode = curComposeNode.parent;
  }
  var /** @type {number} */ elementIdx = curComposeNode != null ? flowBlock.getChildIndex(curComposeNode) : flowBlock.numChildren;
  if (curComposeNode && posInCurComposeNode > 0)
    elementIdx++;
  flowBlock.replaceChildren(elementIdx, elementIdx, imgElem);
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ p = imgElem.getParagraph();
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ attrElem = imgElem.getPreviousLeaf(p);
  if (!attrElem)
    attrElem = imgElem.getNextLeaf(p);
  
  if (attrElem.format || pointFormat) {
    var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ imageElemFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(attrElem.format);
    if (pointFormat)
      imageElemFormat.apply(pointFormat);
    imgElem.format = imageElemFormat;
  }
  return imgElem;
};


/** Merge changed attributes into this
 * @private
 * @param {org.apache.royale.textLayout.elements.ISpanElement} span
 * @param {number} begIdx
 * @param {number} rangeLength
 * @return {org.apache.royale.textLayout.elements.ISpanElement}
 */
org.apache.royale.textLayout.edit.ParaEdit.splitForChange = function(span, begIdx, rangeLength) {
  var /** @type {number} */ startOffset = span.getAbsoluteStart();
  if (begIdx == startOffset && rangeLength == span.textLength)
    return span;
  var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ elemToUpdate;
  var /** @type {number} */ origLength = span.textLength;
  var /** @type {number} */ begRelativeIdx = (begIdx - startOffset) >> 0;
  if (begRelativeIdx > 0) {
    elemToUpdate = span.splitAtPosition(begRelativeIdx);
    if (begRelativeIdx + rangeLength < origLength)
      elemToUpdate.splitAtPosition(rangeLength);
  } else {
    span.splitAtPosition(rangeLength);
    elemToUpdate = span;
  }
  return elemToUpdate;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.formats.TextLayoutFormat} target
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} undefineFormat
 */
org.apache.royale.textLayout.edit.ParaEdit.undefineDefinedFormats = function(target, undefineFormat) {
  if (undefineFormat) {
    var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ tlfUndefineFormat;
    if (org.apache.royale.utils.Language.is(undefineFormat, org.apache.royale.textLayout.formats.TextLayoutFormat))
      tlfUndefineFormat = undefineFormat;
    else
      tlfUndefineFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(undefineFormat);
    for (var /** @type {string} */ prop in tlfUndefineFormat.styles)
      target.setStyle(prop, undefined);
  }
};


/**
 * Apply formatting changes to a range of text in the FlowElement
 *
 * @asparam begIdx	text index of first text in span
 * @asparam rangeLength	number of characters to modify
 * @asparam applyFormat		Character Format to apply to content
 * @asparam undefineFormat	Character Format to undefine to content
 * @asreturn begIdx + number of actual actual characters modified.
 * @private
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} leaf
 * @param {number} begIdx
 * @param {number} rangeLength
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} applyFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} undefineFormat
 * @return {number}
 */
org.apache.royale.textLayout.edit.ParaEdit.applyCharacterFormat = function(leaf, begIdx, rangeLength, applyFormat, undefineFormat) {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(leaf.format);
  if (applyFormat)
    newFormat.apply(applyFormat);
  org.apache.royale.textLayout.edit.ParaEdit.undefineDefinedFormats(newFormat, undefineFormat);
  return org.apache.royale.textLayout.edit.ParaEdit.setCharacterFormat(leaf, newFormat, begIdx, rangeLength);
};


/**
 * Set formatting to a range of text in the FlowElement
 *
 * @asparam format	Character Format to apply to content
 * @asparam begIdx	text index of first text in span
 * @asparam rangeLength	number of characters to modify
 * @asreturn starting position of following span
 * @private
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} leaf
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {number} begIdx
 * @param {number} rangeLength
 * @return {number}
 */
org.apache.royale.textLayout.edit.ParaEdit.setCharacterFormat = function(leaf, format, begIdx, rangeLength) {
  var /** @type {number} */ startOffset = leaf.getAbsoluteStart();
  if (!org.apache.royale.utils.Language.is(format, org.apache.royale.textLayout.formats.ITextLayoutFormat) || !org.apache.royale.textLayout.formats.TextLayoutFormat.isEqual(org.apache.royale.utils.Language.as(format, org.apache.royale.textLayout.formats.ITextLayoutFormat, true), leaf.format)) {
    var /** @type {number} */ begRelativeIdx = (begIdx - startOffset) >> 0;
    if (begRelativeIdx + rangeLength > leaf.textLength)
      rangeLength = (leaf.textLength - begRelativeIdx) >> 0;
    if (begRelativeIdx + rangeLength == leaf.textLength - 1 && org.apache.royale.utils.Language.is(leaf, org.apache.royale.textLayout.elements.ISpanElement) && org.apache.royale.utils.Language.as(leaf, org.apache.royale.textLayout.elements.ISpanElement, true).hasParagraphTerminator)
      ++rangeLength;
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ elemToUpdate;
    if (org.apache.royale.utils.Language.is(leaf, org.apache.royale.textLayout.elements.ISpanElement))
      elemToUpdate = org.apache.royale.textLayout.edit.ParaEdit.splitForChange(org.apache.royale.utils.Language.as(leaf, org.apache.royale.textLayout.elements.ISpanElement, true), begIdx, rangeLength); else {
      
      elemToUpdate = leaf;
    }
    if (org.apache.royale.utils.Language.is(format, org.apache.royale.textLayout.formats.ITextLayoutFormat))
      elemToUpdate.format = org.apache.royale.utils.Language.as(format, org.apache.royale.textLayout.formats.ITextLayoutFormat, true);
    else
      elemToUpdate.setStylesInternal(format);
    return (begIdx + rangeLength) >> 0;
  }
  rangeLength = leaf.textLength;
  return (startOffset + rangeLength) >> 0;
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begChange
 * @param {number} endChange
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} applyFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} undefineFormat
 */
org.apache.royale.textLayout.edit.ParaEdit.applyTextStyleChange = function(flowRoot, begChange, endChange, applyFormat, undefineFormat) {
  var /** @type {number} */ workIdx = begChange;
  while (workIdx < endChange) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ elem = flowRoot.findLeaf(workIdx);
    
    workIdx = org.apache.royale.textLayout.edit.ParaEdit.applyCharacterFormat(elem, workIdx, (endChange - workIdx) >> 0, applyFormat, undefineFormat);
  }
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begChange
 * @param {number} endChange
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} coreStyle
 */
org.apache.royale.textLayout.edit.ParaEdit.setTextStyleChange = function(flowRoot, begChange, endChange, coreStyle) {
  var /** @type {number} */ workIdx = begChange;
  while (workIdx < endChange) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ elem = flowRoot.findLeaf(workIdx);
    
    workIdx = org.apache.royale.textLayout.edit.ParaEdit.setCharacterFormat(org.apache.royale.utils.Language.as(elem, org.apache.royale.textLayout.elements.IFlowLeafElement, true), coreStyle, workIdx, (endChange - workIdx) >> 0);
  }
};


/**
 * @royaleignorecoercion org.apache.royale.textLayout.elements.IFlowGroupElement
 * @export
 * @param {Object} elem
 * @param {number} splitPos
 * @return {Object}
 */
org.apache.royale.textLayout.edit.ParaEdit.splitElement = function(elem, splitPos) {
  
  var /** @type {Object} */ rslt = elem.splitAtPosition(splitPos);
  if (!org.apache.royale.utils.Language.is(rslt, org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase)) {
    var /** @type {Object} */ rsltParagraph = rslt;
    while (!org.apache.royale.utils.Language.is(rsltParagraph, org.apache.royale.textLayout.elements.IParagraphElement) && rsltParagraph.numChildren)
      rsltParagraph = rsltParagraph.getChildAt(0);
    var /** @type {Object} */ elemParagraph = elem;
    while (!org.apache.royale.utils.Language.is(elemParagraph, org.apache.royale.textLayout.elements.IParagraphElement) && elemParagraph.numChildren)
      elemParagraph = elemParagraph.getChildAt((elemParagraph.numChildren - 1) >> 0);
    
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ p;
    if (!org.apache.royale.utils.Language.is(elemParagraph, org.apache.royale.textLayout.elements.IParagraphElement)) {
      p = rsltParagraph.shallowCopy();
      elemParagraph.addChild(p);
      elemParagraph = p;
    } else if (!org.apache.royale.utils.Language.is(rsltParagraph, org.apache.royale.textLayout.elements.IParagraphElement)) {
      p = elemParagraph.shallowCopy();
      rsltParagraph.addChild(p);
      rsltParagraph = p;
    }
    if (elemParagraph.textLength <= 1) {
      elemParagraph.normalizeRange(0, (elemParagraph.textLength) >>> 0);
      elemParagraph.getLastLeaf().quickCloneTextLayoutFormat(rsltParagraph.getFirstLeaf());
    } else if (rsltParagraph.textLength <= 1) {
      rsltParagraph.normalizeRange(0, (rsltParagraph.textLength) >>> 0);
      rsltParagraph.getFirstLeaf().quickCloneTextLayoutFormat(elemParagraph.getLastLeaf());
    }
  }
  return rslt;
};


/**
 * @royaleignorecoercion org.apache.royale.textLayout.element.IParagraphElement
 * @export
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} para
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.ParaEdit.mergeParagraphWithNext = function(para) {
  var /** @type {number} */ indexOfPara = para.parent.getChildIndex(para);
  if (indexOfPara == para.parent.numChildren - 1)
    return false;
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ nextPar = para.parent.getChildAt((indexOfPara + 1) >> 0);
  if (nextPar == null)
    return false;
  para.parent.replaceChildren((indexOfPara + 1) >> 0, (indexOfPara + 2) >> 0, null);
  if (nextPar.textLength <= 1)
    return true;
  while (nextPar.numChildren) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ elem = nextPar.getChildAt(0);
    nextPar.replaceChildren(0, 1, null);
    para.replaceChildren(para.numChildren, para.numChildren, elem);
    if ((para.numChildren > 1) && (para.getChildAt((para.numChildren - 2) >> 0).textLength == 0)) {
      para.replaceChildren((para.numChildren - 2) >> 0, (para.numChildren - 1) >> 0, null);
    }
  }
  return true;
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begSel
 * @param {number} endSel
 * @param {Array} undoArray
 */
org.apache.royale.textLayout.edit.ParaEdit.cacheParagraphStyleInformation = function(flowRoot, begSel, endSel, undoArray) {
  while (begSel <= endSel && begSel >= 0) {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = flowRoot.findLeaf(begSel).getParagraph();
    var /** @type {Object} */ obj = {};
    obj.begIdx = para.getAbsoluteStart();
    obj.endIdx = obj.begIdx + para.textLength - 1;
    obj.attributes = new org.apache.royale.textLayout.formats.TextLayoutFormat(para.format);
    undoArray.push(obj);
    begSel = (obj.begIdx + para.textLength) >> 0;
  }
};


/**
 * Replace the existing paragraph attributes with the incoming attributes.
 * 
 * @asparam flowRoot	text flow where paragraphs are
 * @asparam format	attributes to apply
 * @asparam beginIndex	text index within the first paragraph in the range
 * @asparam endIndex		text index within the last paragraph in the range
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begChange
 * @param {number} endChange
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 */
org.apache.royale.textLayout.edit.ParaEdit.setParagraphStyleChange = function(flowRoot, begChange, endChange, format) {
  var /** @type {number} */ beginPara = begChange;
  while (beginPara <= endChange) {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = flowRoot.findLeaf(beginPara).getParagraph();
    para.format = format ? new org.apache.royale.textLayout.formats.TextLayoutFormat(format) : null;
    beginPara = (para.getAbsoluteStart() + para.textLength) >> 0;
  }
};


/**
 * Additively apply the paragraph formating attributes to the paragraphs in the specified range.
 * Each non-null field in the incoming format is copied into the existing paragraph attributes.
 * 
 * @asparam flowRoot	text flow where paragraphs are
 * @asparam format	attributes to apply
 * @asparam beginIndex	text index within the first paragraph in the range
 * @asparam endIndex		text index within the last paragraph in the range
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begChange
 * @param {number} endChange
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} applyFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} undefineFormat
 */
org.apache.royale.textLayout.edit.ParaEdit.applyParagraphStyleChange = function(flowRoot, begChange, endChange, applyFormat, undefineFormat) {
  var /** @type {number} */ curIndex = begChange;
  while (curIndex <= endChange) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = flowRoot.findLeaf(curIndex);
    if (!leaf)
      break;
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = leaf.getParagraph();
    var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(para.format);
    if (applyFormat)
      newFormat.apply(applyFormat);
    org.apache.royale.textLayout.edit.ParaEdit.undefineDefinedFormats(newFormat, undefineFormat);
    para.format = newFormat;
    curIndex = (para.getAbsoluteStart() + para.textLength) >> 0;
  }
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begSel
 * @param {number} endSel
 * @param {Array} undoArray
 */
org.apache.royale.textLayout.edit.ParaEdit.cacheStyleInformation = function(flowRoot, begSel, endSel, undoArray) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ elem = flowRoot.findLeaf(begSel);
  var /** @type {number} */ elemLength = (elem.getAbsoluteStart() + elem.textLength - begSel) >> 0;
  var /** @type {number} */ countRemaining = (endSel - begSel) >> 0;
  
  for (;;) {
    var /** @type {Object} */ obj = {};
    obj.begIdx = begSel;
    var /** @type {number} */ objLength = (Math.min(countRemaining, elemLength)) >> 0;
    obj.endIdx = begSel + objLength;
    obj.style = new org.apache.royale.textLayout.formats.TextLayoutFormat(elem.format);
    undoArray.push(obj);
    countRemaining -= (Math.min(countRemaining, elemLength)) >> 0;
    if (countRemaining == 0)
      break;
    begSel = (obj.endIdx) >> 0;
    elem = flowRoot.findLeaf(begSel);
    elemLength = elem.textLength;
  }
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {Array} undoArray
 */
org.apache.royale.textLayout.edit.ParaEdit.cacheContainerStyleInformation = function(flowRoot, begIdx, endIdx, undoArray) {
  
  if (flowRoot.flowComposer) {
    var /** @type {number} */ ctrlrBegIdx = flowRoot.flowComposer.findControllerIndexAtPosition(begIdx, false);
    if (ctrlrBegIdx == -1)
      return;
    var /** @type {number} */ ctrlrEndIdx = flowRoot.flowComposer.findControllerIndexAtPosition(endIdx, true);
    if (ctrlrEndIdx == -1)
      ctrlrEndIdx = (flowRoot.flowComposer.numControllers - 1) >> 0;
    while (ctrlrBegIdx <= ctrlrEndIdx) {
      var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = flowRoot.flowComposer.getControllerAt(ctrlrBegIdx);
      var /** @type {Object} */ obj = {};
      obj.container = controller;
      obj.attributes = new org.apache.royale.textLayout.formats.TextLayoutFormat(controller.format);
      undoArray.push(obj);
      ctrlrBegIdx++;
    }
  }
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITextFlow} flowRoot
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} applyFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} undefineFormat
 */
org.apache.royale.textLayout.edit.ParaEdit.applyContainerStyleChange = function(flowRoot, begIdx, endIdx, applyFormat, undefineFormat) {
  
  if (flowRoot.flowComposer) {
    var /** @type {number} */ ctrlrBegIdx = flowRoot.flowComposer.findControllerIndexAtPosition(begIdx, false);
    if (ctrlrBegIdx == -1)
      return;
    var /** @type {number} */ ctrlrEndIdx = flowRoot.flowComposer.findControllerIndexAtPosition(endIdx, true);
    if (ctrlrEndIdx == -1)
      ctrlrEndIdx = (flowRoot.flowComposer.numControllers - 1) >> 0;
    while (ctrlrBegIdx <= ctrlrEndIdx) {
      var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = flowRoot.flowComposer.getControllerAt(ctrlrBegIdx);
      var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ newFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(controller.format);
      if (applyFormat)
        newFormat.apply(applyFormat);
      org.apache.royale.textLayout.edit.ParaEdit.undefineDefinedFormats(newFormat, undefineFormat);
      controller.format = newFormat;
      ctrlrBegIdx++;
    }
  }
};


/** obj is created by cacheContainerStyleInformation 
 * @export
 * @param {Object} obj
 */
org.apache.royale.textLayout.edit.ParaEdit.setContainerStyleChange = function(obj) {
  obj.container.format = obj.attributes;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.ParaEdit.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ParaEdit', qName: 'org.apache.royale.textLayout.edit.ParaEdit', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.ParaEdit.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|insertText': { type: 'org.apache.royale.textLayout.elements.ISpanElement', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'String', false ,'Boolean', false ]; }},
        '|deleteText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IParagraphElement', false ,'int', false ,'int', false ]; }},
        '|createImage': { type: 'org.apache.royale.textLayout.elements.IInlineGraphicElement', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ,'Object', false ,'Object', false ,'Object', false ,'Object', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|applyTextStyleChange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|setTextStyleChange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|splitElement': { type: 'org.apache.royale.textLayout.elements.IFlowGroupElement', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ]; }},
        '|mergeParagraphWithNext': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IParagraphElement', false ]; }},
        '|cacheParagraphStyleInformation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'Array', false ]; }},
        '|setParagraphStyleChange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|applyParagraphStyleChange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|cacheStyleInformation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'Array', false ]; }},
        '|cacheContainerStyleInformation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'Array', false ]; }},
        '|applyContainerStyleChange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|setContainerStyleChange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ParaEdit', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.ParaEdit.prototype.ROYALE_COMPILE_FLAGS = 10;
