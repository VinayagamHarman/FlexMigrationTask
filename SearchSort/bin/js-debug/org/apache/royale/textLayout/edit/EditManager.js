/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/EditManager.as
 * org.apache.royale.textLayout.edit.EditManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.EditManager');
/* Royale Dependency List: org.apache.royale.core.IUIBase,org.apache.royale.events.Event,org.apache.royale.events.KeyboardEvent,org.apache.royale.events.MouseEvent,org.apache.royale.events.utils.EditingKeys,org.apache.royale.events.utils.KeyConverter,org.apache.royale.events.utils.WhitespaceKeys,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.text.events.IMEEvent,org.apache.royale.text.events.TextEvent,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.edit.Clipboard,org.apache.royale.textLayout.edit.EditingMode,org.apache.royale.textLayout.edit.IMEClient,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.edit.Mark,org.apache.royale.textLayout.edit.SelectionFormatState,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.edit.TextClipboard,org.apache.royale.textLayout.edit.TextScrap,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IDivElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IInlineGraphicElement,org.apache.royale.textLayout.elements.ILinkElement,org.apache.royale.textLayout.elements.IListElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElement,org.apache.royale.textLayout.elements.ITCYElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.events.EditEvent,org.apache.royale.textLayout.events.FlowOperationEvent,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.operations.ApplyElementIDOperation,org.apache.royale.textLayout.operations.ApplyElementTypeNameOperation,org.apache.royale.textLayout.operations.ApplyFormatOperation,org.apache.royale.textLayout.operations.ApplyFormatToElementOperation,org.apache.royale.textLayout.operations.ApplyLinkOperation,org.apache.royale.textLayout.operations.ApplyTCYOperation,org.apache.royale.textLayout.operations.ClearFormatOnElementOperation,org.apache.royale.textLayout.operations.ClearFormatOperation,org.apache.royale.textLayout.operations.CompositeOperation,org.apache.royale.textLayout.operations.CreateDivOperation,org.apache.royale.textLayout.operations.CreateListOperation,org.apache.royale.textLayout.operations.CreateSubParagraphGroupOperation,org.apache.royale.textLayout.operations.CutOperation,org.apache.royale.textLayout.operations.DeleteTextOperation,org.apache.royale.textLayout.operations.FlowOperation,org.apache.royale.textLayout.operations.InsertInlineGraphicOperation,org.apache.royale.textLayout.operations.InsertTableElementOperation,org.apache.royale.textLayout.operations.InsertTextOperation,org.apache.royale.textLayout.operations.ModifyInlineGraphicOperation,org.apache.royale.textLayout.operations.MoveChildrenOperation,org.apache.royale.textLayout.operations.PasteOperation,org.apache.royale.textLayout.operations.RedoOperation,org.apache.royale.textLayout.operations.SplitElementOperation,org.apache.royale.textLayout.operations.SplitParagraphOperation,org.apache.royale.textLayout.operations.UndoOperation,org.apache.royale.textLayout.utils.CharacterUtil,org.apache.royale.textLayout.utils.NavigationUtil,org.apache.royale.utils.AnimationUtil,org.apache.royale.utils.event.hasPlatformModifier,org.apache.royale.utils.undo.IOperation,org.apache.royale.utils.undo.IUndoManager,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.edit.IEditManager');
goog.require('org.apache.royale.textLayout.edit.SelectionManager');



/** 
 * Creates an EditManager object.
 * 
 * <p>Assign an EditManager object to the <code>interactionManager</code> property
 * of a text flow to enable editing of that text flow. </p>
 *
 * <p>To enable support for undoing and redoing changes, pass an 
 * IUndoManager instance to the EditManager constructor. You can use
 * the <code>flashx.undo.UndoManager</code> class
 * or create a custom IUndoManager instance. Use a custom IUndoManager instance
 * to integrate Text Layout Framework changes with an existing
 * undo manager that is not an instance of the UndoManager class.
 * To create a custom IUndoManager instance, ensure that the class
 * you use to define the undo manager 
 * implements the IUndoManager interface.</p>
 * 
 * 
 * @asparam undo	The UndoManager for the application
 * 
 * @see org.apache.royale.textLayout.elements.TextFlow#interactionManager
 * @see flashx.undo.IUndoManager
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.edit.SelectionManager}
 * @implements {org.apache.royale.textLayout.edit.IEditManager}
 * @param {org.apache.royale.utils.undo.IUndoManager=} undoManager
 */
org.apache.royale.textLayout.edit.EditManager = function(undoManager) {
  undoManager = typeof undoManager !== 'undefined' ? undoManager : null;
  
  this.org_apache_royale_textLayout_edit_EditManager_captureOperations = [];
  org.apache.royale.textLayout.edit.EditManager.base(this, 'constructor');
  this.org_apache_royale_textLayout_edit_EditManager__undoManager = undoManager;
};
goog.inherits(org.apache.royale.textLayout.edit.EditManager, org.apache.royale.textLayout.edit.SelectionManager);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.textLayout.edit.EditManager', org.apache.royale.textLayout.edit.EditManager);


/**
 * @export
 * @nocollapse
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.EditManager.handleShiftAsSoftReturn = true;


/**
 * @private
 * @type {org.apache.royale.textLayout.operations.InsertTextOperation}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_pendingInsert;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager__delayUpdates = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager__allowDelayedOperations = true;


/**
 * @private
 * @type {org.apache.royale.core.IUIBase}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_redrawListener;


/**
 * @private
 * @type {org.apache.royale.utils.undo.IUndoManager}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager__undoManager;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.IMEClient}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager__imeSession;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager__imeOperationInProgress;


/**
 * @export
 * @nocollapse
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.EditManager.overwriteMode = false;


/** @asprivate 
 * @export
 * @param {org.apache.royale.utils.undo.IUndoManager} undoManager
 */
org.apache.royale.textLayout.edit.EditManager.prototype.setUndoManager = function(undoManager) {
  this.org_apache_royale_textLayout_edit_EditManager__undoManager = undoManager;
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.editHandler = function(event) {
  if (event.defaultPrevented)
    return;
  org.apache.royale.textLayout.edit.EditManager.superClass_.editHandler.apply(this, [ event] );
  switch (event.type) {
    case org.apache.royale.textLayout.events.EditEvent.CUT:
    
    case org.apache.royale.textLayout.events.EditEvent.CLEAR:
      if (this.activePosition != this.anchorPosition) {
        if (event.type == org.apache.royale.textLayout.events.EditEvent.CUT)
          org.apache.royale.textLayout.edit.TextClipboard.setContents(this.cutTextScrap());
        else
          this.deleteText(null);
        event.preventDefault();
      }
      break;
    case org.apache.royale.textLayout.events.EditEvent.PASTE:
      this.pasteTextScrap(org.apache.royale.textLayout.edit.TextClipboard.getContents());
      event.preventDefault();
      break;
  }
};


/**
 * @asprivate
 * @royaleignorecoercion org.apache.royale.textLayout.element.IListItemElement
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.keyDownHandler = function(event) {
  var /** @type {number} */ targetIndex = 0;
  var /** @type {number} */ sourceIndex = 0;
  var /** @type {number} */ numElements = 0;
  var /** @type {org.apache.royale.textLayout.elements.IListItemElement} */ listItem;
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ operationState;
  if (!this.hasSelection() || event.defaultPrevented)
    return;
  if (this.org_apache_royale_textLayout_edit_EditManager_redrawListener)
    this.updateAllControllers();
  org.apache.royale.textLayout.edit.EditManager.superClass_.keyDownHandler.apply(this, [ event] );
  var /** @type {boolean} */ platformModifier = org.apache.royale.utils.event.hasPlatformModifier(event);
  if (platformModifier) {
    if (!event.altKey) {
      if (this.org_apache_royale_textLayout_edit_EditManager__imeSession != null && ((event.code == "KeyZ") || (event.code == "KeyY")))
        this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
      switch (event.code) {
        case "KeyZ":
          this.ignoreNextTextEvent = true;
          if (event.shiftKey) {
            this.redo();
            event.preventDefault();
          } else {
            this.undo();
            event.preventDefault();
          }
          break;
        case "KeyY":
          this.ignoreNextTextEvent = true;
          this.redo();
          event.preventDefault();
          break;
        case org.apache.royale.events.utils.EditingKeys.BACKSPACE:
          if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
            this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
          this.deletePreviousWord();
          event.preventDefault();
          break;
      }
      switch (event.code) {
        case "KeyV":
        
        case "KeyX":
          org.apache.royale.textLayout.edit.Clipboard["generalClipboard"].registerCallback(org.apache.royale.utils.Language.closure(this.editHandler, this, 'editHandler'));
          break;
      }
      if (event.code == org.apache.royale.events.utils.EditingKeys.DELETE) {
        if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
          this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
        this.deleteNextWord();
        event.preventDefault();
      }
      if (event.shiftKey) {
        if (event.code == "Minus") {
          if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
            this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
          var /** @type {string} */ discretionaryHyphenString = String.fromCharCode(0x00AD);
          org.apache.royale.textLayout.edit.EditManager.overwriteMode ? this.overwriteText(discretionaryHyphenString) : this.insertText(discretionaryHyphenString);
          event.preventDefault();
        }
      }
    }
  } else if (event.altKey) {
    if (event.code == org.apache.royale.events.utils.EditingKeys.BACKSPACE) {
      this.deletePreviousWord();
      event.preventDefault();
    } else if (event.code == org.apache.royale.events.utils.EditingKeys.DELETE) {
      this.deleteNextWord();
      event.preventDefault();
    }
  } else if (event.code == org.apache.royale.events.utils.EditingKeys.DELETE) {
    this.deleteNextCharacter();
    event.preventDefault();
  } else if (event.code == org.apache.royale.events.utils.EditingKeys.INSERT) {
    org.apache.royale.textLayout.edit.EditManager.overwriteMode = !org.apache.royale.textLayout.edit.EditManager.overwriteMode;
    event.preventDefault();
  }
  else
    switch (event.code) {
      case org.apache.royale.events.utils.EditingKeys.BACKSPACE:
        this.deletePreviousCharacter();
        event.preventDefault();
        break;
      case org.apache.royale.events.utils.WhitespaceKeys.ENTER:
        if (this.textFlow.configuration.manageEnterKey) {
          var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ firstLeaf = this.textFlow.findLeaf(this.absoluteStart);
          listItem = firstLeaf.getParentByType("ListItemElement");
          if (listItem && firstLeaf.getParentByType("ListElement") != listItem.getParentByType("ListElement"))
            listItem = null;
          if (listItem && !event.shiftKey) {
            if (listItem.textLength == 1 && listItem.parent.getChildIndex(listItem) == listItem.parent.numChildren - 1) {
              operationState = this.defaultOperationState();
              if (!operationState)
                return;
              this.doOperation(new org.apache.royale.textLayout.operations.MoveChildrenOperation(operationState, listItem.parent, listItem.parent.getChildIndex(listItem), 1, listItem.parent.parent, listItem.parent.parent.getChildIndex(listItem.parent) + 1));
            } else {
              this.splitElement(listItem);
              this.selectRange((this.absoluteStart + 1) >> 0, (this.absoluteStart + 1) >> 0);
              this.refreshSelection();
            }
          } else if (event.shiftKey && ((!listItem && this.textFlow.configuration.shiftEnterLevel > 0) || this.textFlow.configuration.shiftEnterLevel > 1)) {
            org.apache.royale.textLayout.edit.EditManager.overwriteMode ? this.overwriteText("\u2028") : this.insertText("\u2028");
          }
          else
            this.splitParagraph();
          event.preventDefault();
          event.stopImmediatePropagation();
        }
        break;
      case org.apache.royale.events.utils.WhitespaceKeys.TAB:
        if (this.textFlow.configuration.manageTabKey) {
          listItem = this.textFlow.findLeaf(this.absoluteStart).getParentByType("ListItemElement");
          if (listItem && listItem.getAbsoluteStart() == this.absoluteStart) {
            operationState = this.defaultOperationState();
            if (!operationState)
              return;
            if (event.shiftKey) {
              if (org.apache.royale.utils.Language.is(listItem.parent.parent, org.apache.royale.textLayout.elements.IListElement) && listItem.parent.getChildIndex(listItem) == 0) {
                var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ source;
                var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ target;
                //var /** @type {number} */ numElements = 0;
                //var /** @type {number} */ sourceIndex = 0;
                //var /** @type {number} */ targetIndex = 0;
                source = listItem.parent;
                target = listItem.parent.parent;
                numElements = listItem.parent.numChildren;
                sourceIndex = 0;
                targetIndex = listItem.parent.parent.getChildIndex(listItem.parent);
                this.doOperation(new org.apache.royale.textLayout.operations.MoveChildrenOperation(operationState, source, sourceIndex, numElements, target, targetIndex));
              }
            } else {
              var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ element = listItem;
              if (listItem.parent.getChildIndex(listItem) == 0)
                element = listItem.parent;
              this.doOperation(new org.apache.royale.textLayout.operations.CreateListOperation(new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, element.getAbsoluteStart(), element.getAbsoluteStart() + element.textLength), listItem.parent));
            }
          } else if (this.textFlow.nestedInTable()) {
            var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ cell;
            if (event.shiftKey) {
              cell = this.textFlow.parentElement.getPreviousCell();
            } else {
              cell = this.textFlow.parentElement.getNextCell();
            }
            if (cell && cell.textFlow && org.apache.royale.utils.Language.is(cell.textFlow.interactionManager, org.apache.royale.textLayout.edit.EditManager)) {
              this.deselect();
              cell.textFlow.interactionManager.selectAll();
              cell.textFlow.interactionManager.setFocus();
            }
          } else {
            var /** @type {string} */ str = org.apache.royale.events.utils.KeyConverter.convertKey(event.key);
            org.apache.royale.textLayout.edit.EditManager.overwriteMode ? this.overwriteText(str) : this.insertText(str);
          }
          event.preventDefault();
        }
        break;
    }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.keyUpHandler = function(event) {
  if (!this.hasSelection() || event.defaultPrevented)
    return;
  org.apache.royale.textLayout.edit.EditManager.superClass_.keyUpHandler.apply(this, [ event] );
  if ((this.textFlow.configuration.manageEnterKey && event.code == org.apache.royale.events.utils.WhitespaceKeys.ENTER) || (this.textFlow.configuration.manageTabKey && event.code == org.apache.royale.events.utils.WhitespaceKeys.TAB)) {
    event.stopImmediatePropagation();
  }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.keyFocusChangeHandler = function(event) {
  if (this.textFlow.configuration.manageTabKey)
    event.preventDefault();
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.mouseDownHandler = function(event) {
  if (this.org_apache_royale_textLayout_edit_EditManager_redrawListener)
    this.updateAllControllers();
  org.apache.royale.textLayout.edit.EditManager.superClass_.mouseDownHandler.apply(this, [ event] );
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.textInputHandler = function(event) {
  if (!this.ignoreNextTextEvent) {
    var /** @type {number} */ charCode = (event.text.charCodeAt(0)) >> 0;
    if (charCode >= 32)
      org.apache.royale.textLayout.edit.EditManager.overwriteMode ? this.overwriteText(event.text) : this.insertText(event.text);
  }
  this.ignoreNextTextEvent = false;
  if (this.superManager)
    event.preventDefault();
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.focusOutHandler = function(event) {
  org.apache.royale.textLayout.edit.EditManager.superClass_.focusOutHandler.apply(this, [ event] );
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession && this.selectionFormatState != org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED)
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.deactivateHandler = function(event) {
  org.apache.royale.textLayout.edit.EditManager.superClass_.deactivateHandler.apply(this, [ event] );
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.imeStartCompositionHandler = function(event) {
  
  this.flushPendingOperations();
  if (!event["imeClient"]) {
    this.org_apache_royale_textLayout_edit_EditManager__imeSession = new org.apache.royale.textLayout.edit.IMEClient(this);
    this.org_apache_royale_textLayout_edit_EditManager__imeOperationInProgress = false;
    event["imeClient"] = this.org_apache_royale_textLayout_edit_EditManager__imeSession;
  }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.setFocus = function() {
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.textFlow ? this.textFlow.flowComposer : null;
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession && flowComposer && flowComposer.numControllers > 1) {
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.setFocus();
    this.setSelectionFormatState(org.apache.royale.textLayout.edit.SelectionFormatState.FOCUSED);
  }
  else
    org.apache.royale.textLayout.edit.EditManager.superClass_.setFocus.apply(this);
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.endIMESession = function() {
  this.org_apache_royale_textLayout_edit_EditManager__imeSession = null;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.textFlow ? this.textFlow.flowComposer : null;
  if (flowComposer && flowComposer.numControllers > 1)
    this.setFocus();
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.beginIMEOperation = function() {
  this.org_apache_royale_textLayout_edit_EditManager__imeOperationInProgress = true;
  this.beginCompositeOperation();
};


/** @asprivate 
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.endIMEOperation = function() {
  this.endCompositeOperation();
  this.org_apache_royale_textLayout_edit_EditManager__imeOperationInProgress = false;
};


/**
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.captureLevel = 0;


/** 
 * @copy IEditManager#doOperation()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.doOperation = function(operation) {
  
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession && !this.org_apache_royale_textLayout_edit_EditManager__imeOperationInProgress)
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
  this.flushPendingOperations();
  try {
    this.captureLevel++;
    operation = this.org_apache_royale_textLayout_edit_EditManager_doInternal(operation);
  } catch (e) {
    this.captureLevel--;
    throw e;
  }
  this.captureLevel--;
  if (operation)
    this.org_apache_royale_textLayout_edit_EditManager_finalizeDo(operation);
};


/**
 * @royaleemitcoercion org.apache.royale.textLayout.operations.FlowOperation
 * @private
 * @param {org.apache.royale.textLayout.operations.FlowOperation} op
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_finalizeDo = function(op) {
  var /** @type {Object} */ parentOperation;
  if (this.org_apache_royale_textLayout_edit_EditManager_parentStack && this.org_apache_royale_textLayout_edit_EditManager_parentStack.length > 0) {
    var /** @type {Object} */ parent = this.org_apache_royale_textLayout_edit_EditManager_parentStack[this.org_apache_royale_textLayout_edit_EditManager_parentStack.length - 1];
    if (parent.captureLevel == this.captureLevel)
      parentOperation = parent.operation;
  }
  if (parentOperation)
    parentOperation.addOperation(op); else if (this.captureLevel == 0) {
    this.org_apache_royale_textLayout_edit_EditManager_captureOperations.length = 0;
    if (this.org_apache_royale_textLayout_edit_EditManager__undoManager) {
      if (this.org_apache_royale_textLayout_edit_EditManager__undoManager.canUndo() && this.allowOperationMerge) {
        var /** @type {org.apache.royale.textLayout.operations.FlowOperation} */ lastOp = org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_edit_EditManager__undoManager.peekUndo(), org.apache.royale.textLayout.operations.FlowOperation);
        if (lastOp) {
          var /** @type {org.apache.royale.textLayout.operations.FlowOperation} */ combinedOp = lastOp.merge(op);
          if (combinedOp) {
            
            
            this.org_apache_royale_textLayout_edit_EditManager__undoManager.popUndo();
            op = combinedOp;
          }
        }
      }
      if (op.canUndo())
        this.org_apache_royale_textLayout_edit_EditManager__undoManager.pushUndo(op);
      this.allowOperationMerge = true;
      this.org_apache_royale_textLayout_edit_EditManager__undoManager.clearRedo();
    }
    this.org_apache_royale_textLayout_edit_EditManager_handleUpdate();
    if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
      var /** @type {Object} */ opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE, false, false, op, 0, null);
      this.textFlow.dispatchEvent(opEvent);
    }
  }
};


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_captureOperations;


/** Internal guts of a dooperation - Execute a FlowOperation.  This function proceeds in steps.
 * <p>Step 2. Send a canceallable OperationEvent.  If cancelled this method returns immediately.</p>
 * If it is not cancelled, the listener may "do" other operations by calling back into the EditManager. This will result
 * in a nested call to do which will post additional commands to the captureOperations array.
 * <p>Step 3. Execute the operation.  The operation returns true or false.  false indicates no changes were made.</p>
 * <p>Step 7. Send a OperationEvent. </p>
 * The listener may "do" other operations by calling back into the EditManager. This will result
 * in a nested call to do which will post additional commands to the captureOperations array.
 * <p>Exception handling.  If the operation throws the exception is caught and the error is attached to the event dispatched
 * at step 7.  If the event is not cancelled the error is rethrown.</p>
 * @private
 * @param {org.apache.royale.textLayout.operations.FlowOperation} op
 * @return {org.apache.royale.textLayout.operations.FlowOperation}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_doInternal = function(op) {
  
  var /** @type {number} */ captureStart = (this.org_apache_royale_textLayout_edit_EditManager_captureOperations.length) >> 0;
  var /** @type {boolean} */ success = false;
  var /** @type {org.apache.royale.textLayout.events.FlowOperationEvent} */ opEvent;
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN, false, true, op, this.captureLevel - 1, null);
    this.textFlow.dispatchEvent(opEvent);
    if (opEvent.defaultPrevented)
      return null;
    op = opEvent.operation;
    if (org.apache.royale.utils.Language.is(op, org.apache.royale.textLayout.operations.UndoOperation) || org.apache.royale.utils.Language.is(op, org.apache.royale.textLayout.operations.RedoOperation))
      throw new Error(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("illegalOperation", [org.apache.royale.reflection.getQualifiedClassName(op)]));
  }
  var /** @type {Error} */ opError = null;
  try {
    
    var /** @type {number} */ beforeGeneration = this.textFlow.generation;
    op.setGenerations(beforeGeneration, 0);
    this.org_apache_royale_textLayout_edit_EditManager_captureOperations.push(op);
    success = op.doOperation();
    if (success) {
      this.textFlow.normalize();
      op.setGenerations(beforeGeneration, this.textFlow.generation);
    } else {
      var /** @type {number} */ index = (this.org_apache_royale_textLayout_edit_EditManager_captureOperations.indexOf(op)) >> 0;
      if (index >= 0)
        this.org_apache_royale_textLayout_edit_EditManager_captureOperations.splice(index, 1);
    }
  } catch (e) {
    opError = e;
  }
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END, false, true, op, this.captureLevel - 1, opError);
    this.textFlow.dispatchEvent(opEvent);
    opError = opEvent.defaultPrevented ? null : opEvent.error;
  }
  if (opError)
    throw opError;
  if (this.org_apache_royale_textLayout_edit_EditManager_captureOperations.length - captureStart > 1) {
    op = new org.apache.royale.textLayout.operations.CompositeOperation(this.org_apache_royale_textLayout_edit_EditManager_captureOperations.slice(captureStart));
    op.setGenerations(org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(op, org.apache.royale.textLayout.operations.CompositeOperation, true).operations[0], org.apache.royale.textLayout.operations.FlowOperation, true).beginGeneration, this.textFlow.generation);
    this.allowOperationMerge = false;
    this.org_apache_royale_textLayout_edit_EditManager_captureOperations.length = captureStart;
  }
  return success ? op : null;
};


/**
 * @private
 * @param {number} stamp
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_redrawHandler = function(stamp) {
  this.updateAllControllers();
};


/** @copy IEditManager.updateAllControllers
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.updateAllControllers = function() {
  this.flushPendingOperations();
  if (this.org_apache_royale_textLayout_edit_EditManager_redrawListener) {
    this.org_apache_royale_textLayout_edit_EditManager_redrawListener = null;
  }
  if (this.textFlow.flowComposer) {
    this.textFlow.flowComposer.updateAllControllers();
    if (this.hasSelection()) {
      var /** @type {number} */ controllerIndex = this.textFlow.flowComposer.findControllerIndexAtPosition(this.activePosition);
      if (controllerIndex >= 0)
        this.textFlow.flowComposer.getControllerAt(controllerIndex).scrollToRange(this.activePosition, this.anchorPosition);
    }
  }
  this.selectionChanged(true, false);
  
};


/**
 * @private
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_handleUpdate = function() {
  if (this.org_apache_royale_textLayout_edit_EditManager__delayUpdates) {
    if (!this.org_apache_royale_textLayout_edit_EditManager_redrawListener) {
      var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this.textFlow.flowComposer.getControllerAt(0);
      if (controller) {
        this.org_apache_royale_textLayout_edit_EditManager_redrawListener = controller.container;
        if (this.org_apache_royale_textLayout_edit_EditManager_redrawListener)
          org.apache.royale.utils.AnimationUtil.requestFrame(org.apache.royale.utils.Language.closure(this.org_apache_royale_textLayout_edit_EditManager_redrawHandler, this, 'org_apache_royale_textLayout_edit_EditManager_redrawHandler'), this.org_apache_royale_textLayout_edit_EditManager_redrawListener);
      }
    }
  } else {
    this.updateAllControllers();
  }
};


/** @asprivate 
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.flushPendingOperations = function() {
  org.apache.royale.textLayout.edit.EditManager.superClass_.flushPendingOperations.apply(this);
  if (this.org_apache_royale_textLayout_edit_EditManager_pendingInsert) {
    var /** @type {org.apache.royale.textLayout.operations.InsertTextOperation} */ pi0 = this.org_apache_royale_textLayout_edit_EditManager_pendingInsert;
    this.org_apache_royale_textLayout_edit_EditManager_pendingInsert = null;
    this.doOperation(pi0);
  }
};


/** 
 * @copy IEditManager#undo()
 * 
 * @see flashx.undo.IUndoManager#undo()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.undo = function() {
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
  if (this.undoManager)
    this.undoManager.undo();
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.utils.undo.IOperation} theop
 */
org.apache.royale.textLayout.edit.EditManager.prototype.performUndo = function(theop) {
  var /** @type {org.apache.royale.textLayout.operations.FlowOperation} */ operation = theop;
  if ((!operation) || (operation.textFlow != this.textFlow))
    return;
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    var /** @type {org.apache.royale.textLayout.operations.UndoOperation} */ undoPsuedoOp = new org.apache.royale.textLayout.operations.UndoOperation(operation);
    var /** @type {org.apache.royale.textLayout.events.FlowOperationEvent} */ opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN, false, true, undoPsuedoOp, 0, null);
    this.textFlow.dispatchEvent(opEvent);
    if (opEvent.defaultPrevented) {
      this.undoManager.pushUndo(operation);
      return;
    }
    undoPsuedoOp = opEvent.operation;
    if (!undoPsuedoOp)
      throw new Error(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("illegalOperation", [org.apache.royale.reflection.getQualifiedClassName(opEvent.operation)]));
    operation = undoPsuedoOp.operation;
  }
  if (operation.endGeneration != this.textFlow.generation) {
    return;
  }
  var /** @type {Error} */ opError = null;
  try {
    
    var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ rslt;
    rslt = operation.undo();
    
    this.setSelectionState(rslt);
    if (this.org_apache_royale_textLayout_edit_EditManager__undoManager)
      this.org_apache_royale_textLayout_edit_EditManager__undoManager.pushRedo(operation);
  } catch (e) {
    opError = e;
  }
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END, false, true, undoPsuedoOp, 0, opError);
    this.textFlow.dispatchEvent(opEvent);
    opError = opEvent.defaultPrevented ? null : opEvent.error;
  }
  if (opError)
    throw opError;
  this.org_apache_royale_textLayout_edit_EditManager_handleUpdate();
  this.textFlow.setGeneration(operation.beginGeneration);
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE, false, false, undoPsuedoOp, 0, null);
    this.textFlow.dispatchEvent(opEvent);
  }
};


/** 
 * @copy IEditManager#redo()
 * 
 * @see flashx.undo.IUndoManager#redo()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.redo = function() {
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.compositionAbandoned();
  if (this.undoManager)
    this.undoManager.redo();
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.utils.undo.IOperation} theop
 */
org.apache.royale.textLayout.edit.EditManager.prototype.performRedo = function(theop) {
  var /** @type {org.apache.royale.textLayout.events.FlowOperationEvent} */ opEvent;
  var /** @type {org.apache.royale.textLayout.operations.FlowOperation} */ op = theop;
  if ((!op) || (op.textFlow != this.textFlow))
    return;
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    var /** @type {org.apache.royale.textLayout.operations.RedoOperation} */ redoPsuedoOp = new org.apache.royale.textLayout.operations.RedoOperation(op);
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN, false, true, redoPsuedoOp, 0, null);
    this.textFlow.dispatchEvent(opEvent);
    if (opEvent.defaultPrevented && this.org_apache_royale_textLayout_edit_EditManager__undoManager) {
      this.org_apache_royale_textLayout_edit_EditManager__undoManager.pushRedo(op);
      return;
    }
    redoPsuedoOp = opEvent.operation;
    if (!redoPsuedoOp)
      throw new Error(org.apache.royale.textLayout.elements.GlobalSettings["resourceStringFunction"]("illegalOperation", [org.apache.royale.reflection.getQualifiedClassName(opEvent.operation)]));
    op = redoPsuedoOp.operation;
  }
  if (op.beginGeneration != this.textFlow.generation) {
    return;
  }
  var /** @type {Error} */ opError = null;
  try {
    
    var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ rslt;
    rslt = op.redo();
    
    this.setSelectionState(rslt);
    if (this.org_apache_royale_textLayout_edit_EditManager__undoManager)
      this.org_apache_royale_textLayout_edit_EditManager__undoManager.pushUndo(op);
  } catch (e) {
    opError = e;
  }
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END, false, true, redoPsuedoOp, 0, opError);
    this.textFlow.dispatchEvent(opEvent);
    opError = opEvent.defaultPrevented ? null : opEvent.error;
  }
  if (opError)
    throw opError;
  this.org_apache_royale_textLayout_edit_EditManager_handleUpdate();
  this.textFlow.setGeneration(op.endGeneration);
  if (this.hasSelection()) {
    var /** @type {number} */ controllerIndex = this.textFlow.flowComposer.findControllerIndexAtPosition(this.activePosition);
    if (controllerIndex >= 0)
      this.textFlow.flowComposer.getControllerAt(controllerIndex).scrollToRange(this.activePosition, this.anchorPosition);
  }
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE, false, false, redoPsuedoOp, 0, null);
    this.textFlow.dispatchEvent(opEvent);
  }
};


/** @asprivate 
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.defaultOperationState = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (operationState) {
    var /** @type {org.apache.royale.textLayout.edit.Mark} */ markActive = this.createMark();
    var /** @type {org.apache.royale.textLayout.edit.Mark} */ markAnchor = this.createMark();
    try {
      markActive.position = operationState.activePosition;
      markAnchor.position = operationState.anchorPosition;
      this.flushPendingOperations();
    } finally {
      this.removeMark(markActive);
      this.removeMark(markAnchor);
      operationState.activePosition = markActive.position;
      operationState.anchorPosition = markAnchor.position;
    }
  } else {
    this.flushPendingOperations();
    if (this.hasSelection()) {
      operationState = this.getSelectionState();
      operationState.selectionManagerOperationState = true;
    }
  }
  return operationState;
};


/** 
 * @copy IEditManager#splitParagraph()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.splitParagraph = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.SplitElementOperation} */ op = new org.apache.royale.textLayout.operations.SplitParagraphOperation(operationState);
  this.doOperation(op);
  return op.newElement;
};


/** @copy IEditManager#splitElement() 
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} target
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.splitElement = function(target, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.SplitElementOperation} */ op = new org.apache.royale.textLayout.operations.SplitElementOperation(operationState, target);
  this.doOperation(op);
  return op.newElement;
};


/** @copy IEditManager#createDiv() 
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement=} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IDivElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.createDiv = function(parent, format, operationState) {
  parent = typeof parent !== 'undefined' ? parent : null;
  format = typeof format !== 'undefined' ? format : null;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.CreateDivOperation} */ operation = new org.apache.royale.textLayout.operations.CreateDivOperation(operationState, parent, format);
  this.doOperation(operation);
  return operation.newDivElement;
};


/** @copy IEditManager#createList() 
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement=} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IListElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.createList = function(parent, format, operationState) {
  parent = typeof parent !== 'undefined' ? parent : null;
  format = typeof format !== 'undefined' ? format : null;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.CreateListOperation} */ operation = new org.apache.royale.textLayout.operations.CreateListOperation(operationState, parent, format);
  this.doOperation(operation);
  return operation.newListElement;
};


/** @copy IEditManager#moveChildren() 
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} source
 * @param {number} sourceIndex
 * @param {number} numChildren
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} destination
 * @param {number} destinationIndex
 * @param {org.apache.royale.textLayout.edit.SelectionState=} selectionState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.moveChildren = function(source, sourceIndex, numChildren, destination, destinationIndex, selectionState) {
  selectionState = typeof selectionState !== 'undefined' ? selectionState : null;
  selectionState = this.defaultOperationState(selectionState);
  if (!selectionState)
    return;
  var /** @type {org.apache.royale.textLayout.operations.MoveChildrenOperation} */ operation = new org.apache.royale.textLayout.operations.MoveChildrenOperation(selectionState, source, sourceIndex, numChildren, destination, destinationIndex);
  this.doOperation(operation);
};


/** @copy IEditManager#createSubParagraphGroup() 
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement=} parent
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.ISubParagraphGroupElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.createSubParagraphGroup = function(parent, format, operationState) {
  parent = typeof parent !== 'undefined' ? parent : null;
  format = typeof format !== 'undefined' ? format : null;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.CreateSubParagraphGroupOperation} */ operation = new org.apache.royale.textLayout.operations.CreateSubParagraphGroupOperation(operationState, parent, format);
  this.doOperation(operation);
  return operation.newSubParagraphGroupElement;
};


/** 
 * @copy IEditManager#deleteText()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.deleteText = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.deleteText(operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState, operationState, false));
};


/**
 * @copy IEditManager#deleteNextCharacter()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.deleteNextCharacter = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.deleteNextCharacter(operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  var /** @type {org.apache.royale.textLayout.operations.DeleteTextOperation} */ deleteOp;
  if (operationState.absoluteStart == operationState.absoluteEnd) {
    var /** @type {number} */ nextPosition = org.apache.royale.textLayout.utils.NavigationUtil.nextAtomPosition(this.textFlow, this.absoluteStart);
    deleteOp = new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState, new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, this.absoluteStart, nextPosition, this.pointFormat), true);
  }
  else
    deleteOp = new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState, operationState, false);
  this.doOperation(deleteOp);
};


/** 
 * @copy IEditManager#deleteNextWord()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.deleteNextWord = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.deleteNextWord(operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if ((!operationState) || ((operationState.anchorPosition == operationState.activePosition) && (operationState.anchorPosition >= this.textFlow.textLength - 1)))
    return;
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ nextWordSelState = this.org_apache_royale_textLayout_edit_EditManager_getNextWordForDelete(operationState.absoluteStart);
  if (nextWordSelState.anchorPosition == nextWordSelState.activePosition)
    return;
  this.setSelectionState(new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, operationState.absoluteStart, operationState.absoluteStart, new org.apache.royale.textLayout.formats.TextLayoutFormat(this.textFlow.findLeaf(operationState.absoluteStart).format)));
  this.doOperation(new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState, nextWordSelState, false));
};


/**
 * @private
 * @param {number} absoluteStart
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_getNextWordForDelete = function(absoluteStart) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leafEl = this.textFlow.findLeaf(absoluteStart);
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paraEl = leafEl.getParagraph();
  var /** @type {number} */ paraElAbsStart = paraEl.getAbsoluteStart();
  var /** @type {number} */ nextPosition = -1;
  if ((absoluteStart - paraElAbsStart) >= (paraEl.textLength - 1)) {
    nextPosition = org.apache.royale.textLayout.utils.NavigationUtil.nextAtomPosition(this.textFlow, absoluteStart);
  } else {
    var /** @type {number} */ curPos = (absoluteStart - paraElAbsStart) >> 0;
    var /** @type {number} */ curPosCharCode = paraEl.getCharCodeAtPosition(curPos);
    var /** @type {number} */ prevPosCharCode = -1;
    if (curPos > 0)
      prevPosCharCode = paraEl.getCharCodeAtPosition((curPos - 1) >> 0);
    if (!org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(curPosCharCode) && ((curPos == 0) || ((curPos > 0) && org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevPosCharCode)))) {
      nextPosition = org.apache.royale.textLayout.utils.NavigationUtil.nextWordPosition(this.textFlow, absoluteStart);
    } else {
      if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(curPosCharCode) && ((curPos > 0) && !org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevPosCharCode))) {
        curPos = paraEl.findNextWordBoundary(curPos);
      }
      nextPosition = (paraElAbsStart + paraEl.findNextWordBoundary(curPos)) >> 0;
    }
  }
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, absoluteStart, nextPosition, this.pointFormat);
};


/**
 * @copy IEditManager#deletePreviousCharacter()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.deletePreviousCharacter = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  var /** @type {number} */ targetIndex = 0;
  var /** @type {number} */ numElementsToMove = 0;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.deletePreviousCharacter(operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  var /** @type {org.apache.royale.textLayout.operations.DeleteTextOperation} */ deleteOp;
  if (operationState.absoluteStart == operationState.absoluteEnd) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.textFlow.findLeaf(operationState.absoluteStart);
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = leaf.getParagraph();
    var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ parent = para.parent;
    var /** @type {boolean} */ movePara = false;
    if (!org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.ITextFlow)) {
      if (operationState.absoluteStart == para.getAbsoluteStart() && parent.getChildIndex(para) == 0 && (!org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IListItemElement) || parent.parent.getChildIndex(parent) == 0)) {
        movePara = true;
      }
    }
    if (movePara) {
      var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ source;
      var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ target;
      //var /** @type {number} */ numElementsToMove = 0;
      //var /** @type {number} */ targetIndex = 0;
      if (org.apache.royale.utils.Language.is(parent, org.apache.royale.textLayout.elements.IListItemElement)) {
        if (org.apache.royale.utils.Language.is(parent.parent.parent, org.apache.royale.textLayout.elements.IListElement)) {
          source = parent.parent;
          numElementsToMove = 1;
          target = parent.parent.parent;
          targetIndex = parent.parent.parent.getChildIndex(parent.parent);
        } else {
          source = para.parent;
          numElementsToMove = para.parent.numChildren;
          target = parent.parent.parent;
          targetIndex = parent.parent.parent.getChildIndex(parent.parent);
        }
      } else {
        source = para.parent;
        numElementsToMove = 1;
        target = parent.parent;
        targetIndex = parent.parent.getChildIndex(parent);
      }
      this.doOperation(new org.apache.royale.textLayout.operations.MoveChildrenOperation(operationState, source, 0, numElementsToMove, target, targetIndex));
    } else {
      var /** @type {number} */ beginPrevious = org.apache.royale.textLayout.utils.NavigationUtil.previousAtomPosition(this.textFlow, operationState.absoluteStart);
      deleteOp = new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState, new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, beginPrevious, operationState.absoluteStart), true);
      this.doOperation(deleteOp);
    }
  } else {
    deleteOp = new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState);
    this.doOperation(deleteOp);
  }
};


/** 
 * @copy IEditManager#deletePreviousWord()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.deletePreviousWord = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.deletePreviousWord(operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ prevWordSelState = this.org_apache_royale_textLayout_edit_EditManager_getPreviousWordForDelete(operationState.absoluteStart);
  if (prevWordSelState.anchorPosition == prevWordSelState.activePosition)
    return;
  this.setSelectionState(new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, operationState.absoluteStart, operationState.absoluteStart, new org.apache.royale.textLayout.formats.TextLayoutFormat(this.textFlow.findLeaf(operationState.absoluteStart).format)));
  this.doOperation(new org.apache.royale.textLayout.operations.DeleteTextOperation(operationState, prevWordSelState, false));
};


/**
 * @private
 * @param {number} absoluteStart
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_getPreviousWordForDelete = function(absoluteStart) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leafEl = this.textFlow.findLeaf(absoluteStart);
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paraEl = leafEl.getParagraph();
  var /** @type {number} */ paraElAbsStart = paraEl.getAbsoluteStart();
  if (absoluteStart == paraElAbsStart) {
    var /** @type {number} */ beginPrevious = org.apache.royale.textLayout.utils.NavigationUtil.previousAtomPosition(this.textFlow, absoluteStart);
    return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, beginPrevious, absoluteStart);
  }
  var /** @type {number} */ curPos = (absoluteStart - paraElAbsStart) >> 0;
  var /** @type {number} */ curPosCharCode = paraEl.getCharCodeAtPosition(curPos);
  var /** @type {number} */ prevPosCharCode = paraEl.getCharCodeAtPosition((curPos - 1) >> 0);
  var /** @type {number} */ curAbsStart = absoluteStart;
  if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(curPosCharCode) && (curPos != (paraEl.textLength - 1))) {
    if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevPosCharCode)) {
      curPos = paraEl.findPreviousWordBoundary(curPos);
    }
    if (curPos > 0) {
      curPos = paraEl.findPreviousWordBoundary(curPos);
      if (curPos > 0) {
        prevPosCharCode = paraEl.getCharCodeAtPosition((curPos - 1) >> 0);
        if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevPosCharCode)) {
          curPos = paraEl.findPreviousWordBoundary(curPos);
        }
      }
    }
  } else {
    if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevPosCharCode)) {
      curPos = paraEl.findPreviousWordBoundary(curPos);
      if (curPos > 0) {
        curPos = paraEl.findPreviousWordBoundary(curPos);
      }
    } else {
      curPos = paraEl.findPreviousWordBoundary(curPos);
    }
  }
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, paraElAbsStart + curPos, curAbsStart);
};


/**
 * @export
 * @param {org.apache.royale.textLayout.elements.ITableElement} table
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.insertTableElement = function(table, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.insertTableElement(table, operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  var /** @type {org.apache.royale.textLayout.operations.InsertTableElementOperation} */ operation = new org.apache.royale.textLayout.operations.InsertTableElementOperation(operationState, table);
  this.doOperation(operation);
};


/** 
 * @copy IEditManager#insertText()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} text
 * @param {org.apache.royale.textLayout.edit.SelectionState=} origOperationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.insertText = function(text, origOperationState) {
  origOperationState = typeof origOperationState !== 'undefined' ? origOperationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.insertText(text, origOperationState);
    return;
  }
  if (origOperationState == null && this.org_apache_royale_textLayout_edit_EditManager_pendingInsert)
    this.org_apache_royale_textLayout_edit_EditManager_pendingInsert.text += text; else {
    var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ operationState = this.defaultOperationState(origOperationState);
    if (!operationState)
      return;
    this.org_apache_royale_textLayout_edit_EditManager_pendingInsert = new org.apache.royale.textLayout.operations.InsertTextOperation(operationState, text);
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this.textFlow.flowComposer.getControllerAt(0);
    if (this.captureLevel == 0 && origOperationState == null && controller && controller.container && this.allowDelayedOperations) {
      org.apache.royale.utils.AnimationUtil.requestFrame(org.apache.royale.utils.Language.closure(this.enterFrameHandler, this, 'enterFrameHandler'), controller.container);
    }
    else
      this.flushPendingOperations();
  }
};


/** 
 * @copy IEditManager#overwriteText()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} text
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.overwriteText = function(text, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.overwriteText(text, operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  var /** @type {org.apache.royale.textLayout.edit.SelectionState} */ selState = this.getSelectionState();
  org.apache.royale.textLayout.utils.NavigationUtil.nextCharacter(selState, true);
  this.doOperation(new org.apache.royale.textLayout.operations.InsertTextOperation(operationState, text, selState));
};


/** 
 * @copy IEditManager#insertInlineGraphic()
 * Returns the new InlineGraphicElement that was created.
 * 
 * @playerversion Flash 10 + 10.2
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @see org.apache.royale.text.engine.TextRotation
 * @export
 * @param {Object} source
 * @param {Object} width
 * @param {Object} height
 * @param {Object=} options
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.IInlineGraphicElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.insertInlineGraphic = function(source, width, height, options, operationState) {
  options = typeof options !== 'undefined' ? options : null;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager))
    return this.subManager.insertInlineGraphic(source, width, height, options, operationState);
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.InsertInlineGraphicOperation} */ operation = new org.apache.royale.textLayout.operations.InsertInlineGraphicOperation(operationState, source, width, height, options);
  this.doOperation(operation);
  return operation.newInlineGraphicElement;
};


/** 
 * @copy IEditManager#modifyInlineGraphic()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {Object} source
 * @param {Object} width
 * @param {Object} height
 * @param {Object=} options
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.modifyInlineGraphic = function(source, width, height, options, operationState) {
  options = typeof options !== 'undefined' ? options : null;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.modifyInlineGraphic(source, width, height, options, operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ModifyInlineGraphicOperation(operationState, source, width, height, options));
};


/** 
 * @copy IEditManager#applyFormat()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} leafFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} paragraphFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} containerFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyFormat = function(leafFormat, paragraphFormat, containerFormat, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.applyFormat(leafFormat, paragraphFormat, containerFormat, operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ApplyFormatOperation(operationState, leafFormat, paragraphFormat, containerFormat));
};


/** 
 * @copy IEditManager#clearFormat()
 * 
 * Known issue is that undefines of leafFormat values with a point selection are not applied at the next insertion.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} leafFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} paragraphFormat
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} containerFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.clearFormat = function(leafFormat, paragraphFormat, containerFormat, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.clearFormat(leafFormat, paragraphFormat, containerFormat, operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ClearFormatOperation(operationState, leafFormat, paragraphFormat, containerFormat));
};


/** 
 * @copy IEditManager#applyLeafFormat()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} characterFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyLeafFormat = function(characterFormat, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager))
    this.subManager.applyLeafFormat(characterFormat, operationState);
  else
    this.applyFormat(characterFormat, null, null, operationState);
};


/** 
 * @copy IEditManager#applyParagraphFormat()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} paragraphFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyParagraphFormat = function(paragraphFormat, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager))
    this.subManager.applyParagraphFormat(paragraphFormat, operationState);
  else
    this.applyFormat(null, paragraphFormat, null, operationState);
};


/** 
 * @copy IEditManager#applyContainerFormat()
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} containerFormat
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyContainerFormat = function(containerFormat, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager))
    this.subManager.applyContainerFormat(containerFormat, operationState);
  else
    this.applyFormat(null, null, containerFormat, operationState);
};


/** 
 * @copy IEditManager#applyFormatToElement()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyFormatToElement = function(targetElement, format, relativeStart, relativeEnd, operationState) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ApplyFormatToElementOperation(operationState, targetElement, format, relativeStart, relativeEnd));
};


/** 
 * @copy IEditManager#clearFormatOnElement()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} format
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.clearFormatOnElement = function(targetElement, format, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ClearFormatOnElementOperation(operationState, targetElement, format));
};


/** 
 * @copy IEditManager#cutTextScrap()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 *  @see org.apache.royale.textLayout.edit.TextScrap
 * @export
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.edit.TextScrap}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.cutTextScrap = function(operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager))
    return this.subManager.cutTextScrap(operationState);
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  if (operationState.anchorPosition == operationState.activePosition)
    return null;
  var /** @type {org.apache.royale.textLayout.edit.TextScrap} */ tScrap = org.apache.royale.textLayout.edit.TextScrap.createTextScrap(operationState);
  var /** @type {number} */ beforeOpLen = this.textFlow.textLength;
  this.doOperation(new org.apache.royale.textLayout.operations.CutOperation(operationState, tScrap));
  if (operationState.textFlow.textLength != beforeOpLen) {
    return tScrap;
  }
  return null;
};


/** 
 * @copy IEditManager#pasteTextScrap()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 *  @see org.apache.royale.textLayout.edit.TextScrap
 * @export
 * @param {org.apache.royale.textLayout.edit.TextScrap} scrapToPaste
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.pasteTextScrap = function(scrapToPaste, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager)) {
    this.subManager.pasteTextScrap(scrapToPaste, operationState);
    return;
  }
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.PasteOperation(operationState, scrapToPaste));
};


/** 
 * @copy IEditManager#applyTCY()
 * Returns the new TCYElement that was created.
 * 
 * @playerversion Flash 10 + 10.2
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {boolean} tcyOn
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.ITCYElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyTCY = function(tcyOn, operationState) {
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  if (this.subManager && org.apache.royale.utils.Language.is(this.subManager, org.apache.royale.textLayout.edit.IEditManager))
    return this.subManager.applyTCY(tcyOn, operationState);
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.ApplyTCYOperation} */ operation = new org.apache.royale.textLayout.operations.ApplyTCYOperation(operationState, tcyOn);
  this.doOperation(operation);
  return operation.newTCYElement;
};


/** 
 * @copy IEditManager#applyLink()
 * Returns the new ILinkElement that was created.
 * 
 * @playerversion Flash 10 + 10.2
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @export
 * @param {string} href
 * @param {string=} targetString
 * @param {boolean=} extendToLinkBoundary
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 * @return {org.apache.royale.textLayout.elements.ILinkElement}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.applyLink = function(href, targetString, extendToLinkBoundary, operationState) {
  targetString = typeof targetString !== 'undefined' ? targetString : null;
  extendToLinkBoundary = typeof extendToLinkBoundary !== 'undefined' ? extendToLinkBoundary : false;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return null;
  if (operationState.absoluteStart == operationState.absoluteEnd)
    return null;
  var /** @type {org.apache.royale.textLayout.operations.ApplyLinkOperation} */ operation = new org.apache.royale.textLayout.operations.ApplyLinkOperation(operationState, href, targetString, extendToLinkBoundary);
  this.doOperation(operation);
  return operation.newLinkElement;
};


/**
 * @copy IEditManager#changeElementID()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @param {string} newID
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.changeElementID = function(newID, targetElement, relativeStart, relativeEnd, operationState) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  if (operationState.absoluteStart == operationState.absoluteEnd)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ApplyElementIDOperation(operationState, targetElement, newID, relativeStart, relativeEnd));
};


/**
 * @copy IEditManager#changeStyleName()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @param {string} newName
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.changeStyleName = function(newName, targetElement, relativeStart, relativeEnd, operationState) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ format = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  format.styleName = newName;
  this.doOperation(new org.apache.royale.textLayout.operations.ApplyFormatToElementOperation(operationState, targetElement, format, relativeStart, relativeEnd));
};


/**
 * @copy IEditManager#changeTypeName()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @export
 * @param {string} newName
 * @param {org.apache.royale.textLayout.elements.IFlowElement} targetElement
 * @param {number=} relativeStart
 * @param {number=} relativeEnd
 * @param {org.apache.royale.textLayout.edit.SelectionState=} operationState
 */
org.apache.royale.textLayout.edit.EditManager.prototype.changeTypeName = function(newName, targetElement, relativeStart, relativeEnd, operationState) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  operationState = typeof operationState !== 'undefined' ? operationState : null;
  operationState = this.defaultOperationState(operationState);
  if (!operationState)
    return;
  this.doOperation(new org.apache.royale.textLayout.operations.ApplyElementTypeNameOperation(operationState, targetElement, newName, relativeStart, relativeEnd));
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.org_apache_royale_textLayout_edit_EditManager_parentStack;


/** 
 * @copy IEditManager#beginCompositeOperation()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.beginCompositeOperation = function() {
  this.flushPendingOperations();
  if (!this.org_apache_royale_textLayout_edit_EditManager_parentStack)
    this.org_apache_royale_textLayout_edit_EditManager_parentStack = [];
  var /** @type {org.apache.royale.textLayout.operations.CompositeOperation} */ operation = new org.apache.royale.textLayout.operations.CompositeOperation();
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    var /** @type {org.apache.royale.textLayout.events.FlowOperationEvent} */ opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN, false, false, operation, this.captureLevel, null);
    this.textFlow.dispatchEvent(opEvent);
  }
  
  operation.setGenerations(this.textFlow.generation, 0);
  ++this.captureLevel;
  var /** @type {Object} */ parent = {};
  parent.operation = operation;
  parent.captureLevel = this.captureLevel;
  this.org_apache_royale_textLayout_edit_EditManager_parentStack.push(parent);
};


/** 
 * @copy IEditManager#endCompositeOperation()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @export
 */
org.apache.royale.textLayout.edit.EditManager.prototype.endCompositeOperation = function() {
  
  --this.captureLevel;
  var /** @type {Object} */ parent = this.org_apache_royale_textLayout_edit_EditManager_parentStack.pop();
  var /** @type {org.apache.royale.textLayout.operations.FlowOperation} */ operation = parent.operation;
  if (!this.org_apache_royale_textLayout_edit_EditManager__imeSession) {
    var /** @type {org.apache.royale.textLayout.events.FlowOperationEvent} */ opEvent = new org.apache.royale.textLayout.events.FlowOperationEvent(org.apache.royale.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END, false, false, operation, this.captureLevel, null);
    this.textFlow.dispatchEvent(opEvent);
  }
  operation.setGenerations(operation.beginGeneration, this.textFlow.generation);
  this.org_apache_royale_textLayout_edit_EditManager_finalizeDo(operation);
};


/** @asprivate
 * Handler function called when the selection has been changed.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @asparam doDispatchEvent	true if a selection changed event will be sent
 * @asparam resetPointFormat	true if the attributes associated with the caret should be discarded
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.selectionChanged = function(doDispatchEvent, resetPointFormat) {
  doDispatchEvent = typeof doDispatchEvent !== 'undefined' ? doDispatchEvent : true;
  resetPointFormat = typeof resetPointFormat !== 'undefined' ? resetPointFormat : true;
  if (this.org_apache_royale_textLayout_edit_EditManager__imeSession)
    this.org_apache_royale_textLayout_edit_EditManager__imeSession.selectionChanged();
  org.apache.royale.textLayout.edit.EditManager.superClass_.selectionChanged.apply(this, [ doDispatchEvent, resetPointFormat] );
};


/**
 * @export
 * @override
 */
org.apache.royale.textLayout.edit.EditManager.prototype.copy = function(sharedUndo) {
  if (sharedUndo)
    return new org.apache.royale.textLayout.edit.EditManager(this.undoManager);
  else
    return new org.apache.royale.textLayout.edit.EditManager();
};


org.apache.royale.textLayout.edit.EditManager.prototype.get__undoManager = function() {
  return this.org_apache_royale_textLayout_edit_EditManager__undoManager;
};


org.apache.royale.textLayout.edit.EditManager.prototype.set__textFlow = function(value) {
  this.flushPendingOperations();
  if (this.org_apache_royale_textLayout_edit_EditManager_redrawListener)
    this.updateAllControllers();
  org.apache.royale.textLayout.edit.EditManager.superClass_.set__textFlow.apply(this, [ value] );
};


org.apache.royale.textLayout.edit.EditManager.prototype.get__delayUpdates = function() {
  return this.org_apache_royale_textLayout_edit_EditManager__delayUpdates;
};


org.apache.royale.textLayout.edit.EditManager.prototype.set__delayUpdates = function(value) {
  this.org_apache_royale_textLayout_edit_EditManager__delayUpdates = value;
};


org.apache.royale.textLayout.edit.EditManager.prototype.get__allowDelayedOperations = function() {
  return this.org_apache_royale_textLayout_edit_EditManager__allowDelayedOperations;
};


org.apache.royale.textLayout.edit.EditManager.prototype.set__allowDelayedOperations = function(value) {
  if (!value)
    this.flushPendingOperations();
  this.org_apache_royale_textLayout_edit_EditManager__allowDelayedOperations = value;
};


org.apache.royale.textLayout.edit.EditManager.prototype.get__editingMode = function() {
  return org.apache.royale.textLayout.edit.EditingMode.READ_WRITE;
};


Object.defineProperties(org.apache.royale.textLayout.edit.EditManager.prototype, /** @lends {org.apache.royale.textLayout.edit.EditManager.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.utils.undo.IUndoManager} */
undoManager: {
get: org.apache.royale.textLayout.edit.EditManager.prototype.get__undoManager},
/**
  * @export
  * @type {org.apache.royale.textLayout.elements.ITextFlow} */
textFlow: {
get: org.apache.royale.textLayout.edit.SelectionManager.prototype.get__textFlow,
set: org.apache.royale.textLayout.edit.EditManager.prototype.set__textFlow},
/**
  * @export
  * @type {boolean} */
delayUpdates: {
get: org.apache.royale.textLayout.edit.EditManager.prototype.get__delayUpdates,
set: org.apache.royale.textLayout.edit.EditManager.prototype.set__delayUpdates},
/**
  * @export
  * @type {boolean} */
allowDelayedOperations: {
get: org.apache.royale.textLayout.edit.EditManager.prototype.get__allowDelayedOperations,
set: org.apache.royale.textLayout.edit.EditManager.prototype.set__allowDelayedOperations},
/**
  * @export
  * @type {string} */
editingMode: {
get: org.apache.royale.textLayout.edit.EditManager.prototype.get__editingMode}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EditManager', qName: 'org.apache.royale.textLayout.edit.EditManager', kind: 'class' }], interfaces: [org.apache.royale.textLayout.edit.IEditManager] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|handleShiftAsSoftReturn': { type: 'Boolean', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.edit.EditManager.handleShiftAsSoftReturn = v : org.apache.royale.textLayout.edit.EditManager.handleShiftAsSoftReturn;}},
        '|overwriteMode': { type: 'Boolean', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.edit.EditManager.overwriteMode = v : org.apache.royale.textLayout.edit.EditManager.overwriteMode;}},
        'captureLevel': { type: 'int', get_set: function (/** org.apache.royale.textLayout.edit.EditManager */ inst, /** * */ v) {return v !== undefined ? inst.captureLevel = v : inst.captureLevel;}}
      };
    },
    accessors: function () {
      return {
        'undoManager': { type: 'org.apache.royale.utils.undo.IUndoManager', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'writeonly', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'delayUpdates': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'allowDelayedOperations': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'editingMode': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'}
      };
    },
    methods: function () {
      return {
        'EditManager': { type: '', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IUndoManager', true ]; }},
        'setUndoManager': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IUndoManager', false ]; }},
        'editHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'keyDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyFocusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'mouseDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'textInputHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.text.events.TextEvent', false ]; }},
        'focusOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'deactivateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'imeStartCompositionHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.text.events.IMEEvent', false ]; }},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'endIMESession': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'beginIMEOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'endIMEOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'doOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.operations.FlowOperation', false ]; }},
        'updateAllControllers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'flushPendingOperations': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'undo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'performUndo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IOperation', false ]; }},
        'redo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'performRedo': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IOperation', false ]; }},
        'defaultOperationState': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'splitParagraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'splitElement': { type: 'org.apache.royale.textLayout.elements.IFlowGroupElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'createDiv': { type: 'org.apache.royale.textLayout.elements.IDivElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'createList': { type: 'org.apache.royale.textLayout.elements.IListElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'moveChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'createSubParagraphGroup': { type: 'org.apache.royale.textLayout.elements.ISubParagraphGroupElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deleteText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deleteNextCharacter': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deleteNextWord': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deletePreviousCharacter': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'deletePreviousWord': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'insertTableElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableElement', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'insertText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'overwriteText': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'insertInlineGraphic': { type: 'org.apache.royale.textLayout.elements.IInlineGraphicElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ,'Object', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'modifyInlineGraphic': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ,'Object', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'clearFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyLeafFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyParagraphFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyContainerFormat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyFormatToElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'clearFormatOnElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'cutTextScrap': { type: 'org.apache.royale.textLayout.edit.TextScrap', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'pasteTextScrap': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.TextScrap', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyTCY': { type: 'org.apache.royale.textLayout.elements.ITCYElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'Boolean', false ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'applyLink': { type: 'org.apache.royale.textLayout.elements.ILinkElement', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'String', false ,'String', true ,'Boolean', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'changeElementID': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'changeStyleName': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'changeTypeName': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', true ,'int', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'beginCompositeOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'endCompositeOperation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager'},
        'selectionChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'Boolean', true ,'Boolean', true ]; }},
        'copy': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', declaredBy: 'org.apache.royale.textLayout.edit.EditManager', parameters: function () { return [ 'Boolean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.EditManager.prototype.ROYALE_COMPILE_FLAGS = 10;
