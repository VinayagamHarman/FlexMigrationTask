/**
 * Generated by Apache Royale Compiler from org/apache/royale/text/html/TextLine.as
 * org.apache.royale.text.html.TextLine
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.text.html.TextLine');
/* Royale Dependency List: org.apache.royale.core.IUIBase,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ITextBlock,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.html.elements.Div');
goog.require('org.apache.royale.text.engine.ITextLine');



/**
 * @constructor
 * @extends {org.apache.royale.html.elements.Div}
 * @implements {org.apache.royale.text.engine.ITextLine}
 * @param {org.apache.royale.text.engine.ITextBlock} textBlock
 * @param {number} beginIndex
 */
org.apache.royale.text.html.TextLine = function(textBlock, beginIndex) {
  org.apache.royale.text.html.TextLine.base(this, 'constructor');
  
  this.org_apache_royale_text_html_TextLine__textBlock = textBlock;
  this.org_apache_royale_text_html_TextLine__beginIndex = beginIndex;
};
goog.inherits(org.apache.royale.text.html.TextLine, org.apache.royale.html.elements.Div);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.text.html.TextLine', org.apache.royale.text.html.TextLine);


/**
 * @royaleignorecoercion org.apache.royale.core.WrappedHTMLElement
 * @protected
 * @override
 */
org.apache.royale.text.html.TextLine.prototype.createElement = function() {
  var /** @type {Object} */ e = org.apache.royale.text.html.TextLine.superClass_.createElement.apply(this);
  e.style.position = "absolute";
  return e;
};


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.text.html.TextLine.prototype.org_apache_royale_text_html_TextLine__doubleClickEnabled;


/**
 * @private
 * @type {org.apache.royale.text.engine.ITextBlock}
 */
org.apache.royale.text.html.TextLine.prototype.org_apache_royale_text_html_TextLine__textBlock;


/**
 * @private
 * @type {number}
 */
org.apache.royale.text.html.TextLine.prototype.org_apache_royale_text_html_TextLine__beginIndex = 0;


/**
 * @private
 * @type {*}
 */
org.apache.royale.text.html.TextLine.prototype.org_apache_royale_text_html_TextLine__userData;


/**
 * @private
 * @type {string}
 */
org.apache.royale.text.html.TextLine.prototype.org_apache_royale_text_html_TextLine__validity = "valid";


/**
 * Not sure if we need this.
 * @export
 * @return {string}
 */
org.apache.royale.text.html.TextLine.prototype.dump = function() {
  return "";
};


/**
 * Gets the bidirectional level of the atom at the specified index.
 * The FTE system seems to make no sense. Here's the "explanation":
 *
 * Gets the bidirectional level of the atom at the specified index. Determined by a combination of TextBlock.bidiLevel
 * and the Unicode bidirectional properties of the characters that form the line.
 *
 * For example, if you start a text block with some Hebrew text, you set TextBlock.bidiLevel to 1, establishing a default of right to left.
 * If within the text you have a quote in English (left to right), that text has an AtomBidiLevel of 2.
 * If within the English you have a bit of Arabic (right to left), AtomBidiLevel for that run goes to 3.
 * If within the Arabic a number (left to right) occurs, the AtomBidiLevel setting for the number is 4.
 * It does not matter in which line the atoms end up; the Hebrew atoms are AtomBidiLevel 1,
 * the English atoms are AtomBidiLevel 2, Arabic atoms are AtomBidiLevel 3, and the number atoms are AtomBidiLevel 4.
 *
 * After further research. it seems like it's being faithful to the unicode spec which allows up 125 levels of bidi nesting.
 * Full details here: http://www.unicode.org/reports/tr9/
 * I'm not sure why this is important from a client perspective. Maybe to properly handle cursor management?
 * Either way, using it is pretty straight-forward: level % 2 should be 0 for ltr and 1 for rtl.
 * @export
 * @param {number} atomIndex
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomBidiLevel = function(atomIndex) {
  return 0;
};


/**
 * @export
 * @param {Object} ref
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.text.html.TextLine.prototype.getBounds = function(ref) {
  return new org.apache.royale.geom.Rectangle(this.element.offsetLeft, this.element.offsetTop, this.element.offsetWidth, this.element.offsetHeight);
};


/**
 *  @royaleignorecoercion HTMLCanvasElement
 *  @royaleignorecoercion CanvasRenderingContext2D
 * @export
 * @param {number} atomIndex
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomBounds = function(atomIndex) {
  
  var /** @type {number} */ w;
  if (atomIndex == this.element.firstChild.textContent.length - 1) {
    w = Number(org.apache.royale.utils.Language.as(this.element.firstChild, HTMLElement).getClientRects()[0].width);
    return new org.apache.royale.geom.Rectangle(w, 1.2, 3, 1.2 + this.org_apache_royale_text_html_TextLine__textBlock.content.elementFormat.fontSize);
  } else {
    var /** @type {string} */ s = this.element.firstChild.textContent;
    var /** @type {HTMLSpanElement} */ span = org.apache.royale.utils.Language.as(document.createElement("span"), HTMLSpanElement);
    this.element.appendChild(span);
    var /** @type {number} */ w1 = 0;
    if (atomIndex > 0) {
      span.innerHTML = s.substring(0, atomIndex);
      w1 = Number(span.getClientRects()[0].width);
    }
    span.innerHTML = s.substring(0, atomIndex + 1);
    w = Number(span.getClientRects()[0].width);
    this.element.removeChild(span);
    return new org.apache.royale.geom.Rectangle(w1, 1.2, w - w1, 1.2 + this.org_apache_royale_text_html_TextLine__textBlock.content.elementFormat.fontSize);
  }
};


/**
 * @export
 * @param {number} atomIndex
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomCenter = function(atomIndex) {
  var /** @type {org.apache.royale.geom.Rectangle} */ bounds = this.getAtomBounds(atomIndex);
  return bounds.left + (bounds.right - bounds.left);
};


/**
 * @export
 * @param {number} atomIndex
 * @return {org.apache.royale.core.IUIBase}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomGraphic = function(atomIndex) {
  return null;
};


/**
 * @export
 * @param {number} charIndex
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomIndexAtCharIndex = function(charIndex) {
  return charIndex;
};


/**
 * @export
 * @param {number} localX
 * @param {number} localY
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomIndexAtPoint = function(localX, localY) {
  
  var /** @type {org.apache.royale.geom.Point} */ pt = new org.apache.royale.geom.Point(localX, localY);
  var /** @type {string} */ s = this.element.firstChild.textContent;
  if (s === "")
    return 0;
  var /** @type {number} */ start = (Math.floor(s.length * pt.x / this.width)) >> 0;
  var /** @type {boolean} */ done = false;
  while (!done) {
    var /** @type {org.apache.royale.geom.Rectangle} */ r = this.getAtomBounds(start);
    if (r.left > pt.x) {
      start--;
      if (start == 0)
        return 0;
    } else if (r.right < pt.x) {
      start++;
      if (start >= s.length - 1)
        return (s.length - 1) >> 0;
    }
    else
      return start;
  }
  return 0;
};


/**
 * @export
 * @param {number} atomIndex
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomTextBlockBeginIndex = function(atomIndex) {
  return (this.org_apache_royale_text_html_TextLine__beginIndex + atomIndex) >> 0;
};


/**
 * @export
 * @param {number} atomIndex
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomTextBlockEndIndex = function(atomIndex) {
  return (this.org_apache_royale_text_html_TextLine__beginIndex + atomIndex + 1) >> 0;
};


/**
 * @export
 * @param {number} atomIndex
 * @return {string}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomTextRotation = function(atomIndex) {
  org.apache.royale.utils.Language.trace("getAtomTextRotation not implemented");
  return "rotate0";
};


/**
 * @export
 * @param {number} atomIndex
 * @return {boolean}
 */
org.apache.royale.text.html.TextLine.prototype.getAtomWordBoundaryOnLeft = function(atomIndex) {
  var /** @type {string} */ s;
  
  s = this.element.firstChild.textContent;
  s = s.substring(0, atomIndex);
  return s.indexOf(" ") != -1;
};


/**
 * @export
 * @param {string} baseline
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getBaselinePosition = function(baseline) {
  switch (baseline) {
    case "ascent":
      break;
    case "descent":
      break;
    case "ideographicBottom":
      break;
    case "ideographicCenter":
      break;
    case "ideographicTop":
      break;
    case "roman":
      break;
    case "useDominantBaseline":
      break;
    default:
      throw new Error("Invalid argument");
  }
  return 0;
};


/**
 * @private
 * @type {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.text.html.TextLine.prototype.org_apache_royale_text_html_TextLine__numberLine;


/**
 * @export
 * @return {number}
 */
org.apache.royale.text.html.TextLine.prototype.getAdornmentOffsetBase = function() {
  return 0;
};


org.apache.royale.text.html.TextLine.prototype.get__ascent = function() {
  
  return this.org_apache_royale_text_html_TextLine__textBlock.content.elementFormat.fontSize - 2;
};


org.apache.royale.text.html.TextLine.prototype.get__atomCount = function() {
  
  return (this.element.firstChild.firstChild["length"]) >> 0;
};


org.apache.royale.text.html.TextLine.prototype.get__blendMode = function() {
  return null;
};


org.apache.royale.text.html.TextLine.prototype.get__cacheAsBitmap = function() {
  return false;
};


org.apache.royale.text.html.TextLine.prototype.get__descent = function() {
  
  return 2;
};


org.apache.royale.text.html.TextLine.prototype.get__doubleClickEnabled = function() {
  return this.org_apache_royale_text_html_TextLine__doubleClickEnabled;
};


org.apache.royale.text.html.TextLine.prototype.set__doubleClickEnabled = function(value) {
  this.org_apache_royale_text_html_TextLine__doubleClickEnabled = value;
};


org.apache.royale.text.html.TextLine.prototype.get__hasGraphicElement = function() {
  return false;
};


org.apache.royale.text.html.TextLine.prototype.get__hasTabs = function() {
  return false;
};


org.apache.royale.text.html.TextLine.prototype.get__nextLine = function() {
  return null;
};


org.apache.royale.text.html.TextLine.prototype.get__previousLine = function() {
  return null;
};


org.apache.royale.text.html.TextLine.prototype.get__rawTextLength = function() {
  
  return this.atomCount;
};


org.apache.royale.text.html.TextLine.prototype.get__specifiedWidth = function() {
  return 0;
};


org.apache.royale.text.html.TextLine.prototype.get__textBlock = function() {
  return this.org_apache_royale_text_html_TextLine__textBlock;
};


org.apache.royale.text.html.TextLine.prototype.get__textBlockBeginIndex = function() {
  return this.org_apache_royale_text_html_TextLine__beginIndex;
};


org.apache.royale.text.html.TextLine.prototype.get__textHeight = function() {
  
  return Number(this.element.firstChild.getClientRects()[0].height);
};


org.apache.royale.text.html.TextLine.prototype.get__textWidth = function() {
  
  if (this.element.firstChild.textContent == "\u2029") {
    this.element.firstChild.innerHTML = "\u00A0";
    var /** @type {number} */ w = Number(this.element.firstChild.getClientRects()[0].width);
    this.element.firstChild.innerHTML = "\u2029";
    return w;
  }
  return Number(this.element.firstChild.getClientRects()[0].width);
};


org.apache.royale.text.html.TextLine.prototype.get__totalAscent = function() {
  return this.ascent;
};


org.apache.royale.text.html.TextLine.prototype.get__totalDescent = function() {
  return this.descent;
};


org.apache.royale.text.html.TextLine.prototype.get__totalHeight = function() {
  return this.textHeight;
};


org.apache.royale.text.html.TextLine.prototype.get__unjustifiedTextWidth = function() {
  return this.textWidth;
};


org.apache.royale.text.html.TextLine.prototype.get__userData = function() {
  return this.org_apache_royale_text_html_TextLine__userData;
};


org.apache.royale.text.html.TextLine.prototype.set__userData = function(value) {
  this.org_apache_royale_text_html_TextLine__userData = value;
};


org.apache.royale.text.html.TextLine.prototype.get__validity = function() {
  return this.org_apache_royale_text_html_TextLine__validity;
};


org.apache.royale.text.html.TextLine.prototype.set__validity = function(value) {
  this.org_apache_royale_text_html_TextLine__validity = value;
};


org.apache.royale.text.html.TextLine.prototype.get__numberLine = function() {
  return this.org_apache_royale_text_html_TextLine__numberLine;
};


org.apache.royale.text.html.TextLine.prototype.set__numberLine = function(value) {
  this.org_apache_royale_text_html_TextLine__numberLine = value;
};


Object.defineProperties(org.apache.royale.text.html.TextLine.prototype, /** @lends {org.apache.royale.text.html.TextLine.prototype} */ {
/**
  * @export
  * @type {number} */
ascent: {
get: org.apache.royale.text.html.TextLine.prototype.get__ascent},
/**
  * @export
  * @type {number} */
atomCount: {
get: org.apache.royale.text.html.TextLine.prototype.get__atomCount},
/**
  * @export
  * @type {string} */
blendMode: {
get: org.apache.royale.text.html.TextLine.prototype.get__blendMode},
/**
  * @export
  * @type {boolean} */
cacheAsBitmap: {
get: org.apache.royale.text.html.TextLine.prototype.get__cacheAsBitmap},
/**
  * @export
  * @type {number} */
descent: {
get: org.apache.royale.text.html.TextLine.prototype.get__descent},
/**
  * @export
  * @type {boolean} */
doubleClickEnabled: {
get: org.apache.royale.text.html.TextLine.prototype.get__doubleClickEnabled,
set: org.apache.royale.text.html.TextLine.prototype.set__doubleClickEnabled},
/**
  * @export
  * @type {boolean} */
hasGraphicElement: {
get: org.apache.royale.text.html.TextLine.prototype.get__hasGraphicElement},
/**
  * @export
  * @type {boolean} */
hasTabs: {
get: org.apache.royale.text.html.TextLine.prototype.get__hasTabs},
/**
  * @export
  * @type {org.apache.royale.text.engine.ITextLine} */
nextLine: {
get: org.apache.royale.text.html.TextLine.prototype.get__nextLine},
/**
  * @export
  * @type {org.apache.royale.text.engine.ITextLine} */
previousLine: {
get: org.apache.royale.text.html.TextLine.prototype.get__previousLine},
/**
  * @export
  * @type {number} */
rawTextLength: {
get: org.apache.royale.text.html.TextLine.prototype.get__rawTextLength},
/**
  * @export
  * @type {number} */
specifiedWidth: {
get: org.apache.royale.text.html.TextLine.prototype.get__specifiedWidth},
/**
  * @export
  * @type {org.apache.royale.text.engine.ITextBlock} */
textBlock: {
get: org.apache.royale.text.html.TextLine.prototype.get__textBlock},
/**
  * @export
  * @type {number} */
textBlockBeginIndex: {
get: org.apache.royale.text.html.TextLine.prototype.get__textBlockBeginIndex},
/**
  * @export
  * @type {number} */
textHeight: {
get: org.apache.royale.text.html.TextLine.prototype.get__textHeight},
/**
  * @export
  * @type {number} */
textWidth: {
get: org.apache.royale.text.html.TextLine.prototype.get__textWidth},
/**
  * @export
  * @type {number} */
totalAscent: {
get: org.apache.royale.text.html.TextLine.prototype.get__totalAscent},
/**
  * @export
  * @type {number} */
totalDescent: {
get: org.apache.royale.text.html.TextLine.prototype.get__totalDescent},
/**
  * @export
  * @type {number} */
totalHeight: {
get: org.apache.royale.text.html.TextLine.prototype.get__totalHeight},
/**
  * @export
  * @type {number} */
unjustifiedTextWidth: {
get: org.apache.royale.text.html.TextLine.prototype.get__unjustifiedTextWidth},
/**
  * @export
  * @type {*} */
userData: {
get: org.apache.royale.text.html.TextLine.prototype.get__userData,
set: org.apache.royale.text.html.TextLine.prototype.set__userData},
/**
  * @export
  * @type {string} */
validity: {
get: org.apache.royale.text.html.TextLine.prototype.get__validity,
set: org.apache.royale.text.html.TextLine.prototype.set__validity},
/**
  * @export
  * @type {org.apache.royale.text.engine.ITextLine} */
numberLine: {
get: org.apache.royale.text.html.TextLine.prototype.get__numberLine,
set: org.apache.royale.text.html.TextLine.prototype.set__numberLine}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.text.html.TextLine.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextLine', qName: 'org.apache.royale.text.html.TextLine', kind: 'class' }], interfaces: [org.apache.royale.text.engine.ITextLine] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.text.html.TextLine.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'ascent': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'atomCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'blendMode': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'cacheAsBitmap': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'descent': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'doubleClickEnabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'hasGraphicElement': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'hasTabs': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'nextLine': { type: 'org.apache.royale.text.engine.ITextLine', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'previousLine': { type: 'org.apache.royale.text.engine.ITextLine', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'rawTextLength': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'specifiedWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'textBlock': { type: 'org.apache.royale.text.engine.ITextBlock', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'textBlockBeginIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'textHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'textWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'totalAscent': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'totalDescent': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'totalHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'unjustifiedTextWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'userData': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'validity': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'numberLine': { type: 'org.apache.royale.text.engine.ITextLine', access: 'readwrite', declaredBy: 'org.apache.royale.text.html.TextLine'}
      };
    },
    methods: function () {
      return {
        'TextLine': { type: '', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'org.apache.royale.text.engine.ITextBlock', false ,'int', false ]; }},
        'dump': { type: 'String', declaredBy: 'org.apache.royale.text.html.TextLine'},
        'getAtomBidiLevel': { type: 'int', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'Object', false ]; }},
        'getAtomBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomCenter': { type: 'Number', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomGraphic': { type: 'org.apache.royale.core.IUIBase', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomIndexAtCharIndex': { type: 'int', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomIndexAtPoint': { type: 'int', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'getAtomTextBlockBeginIndex': { type: 'int', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomTextBlockEndIndex': { type: 'int', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomTextRotation': { type: 'String', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getAtomWordBoundaryOnLeft': { type: 'Boolean', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'int', false ]; }},
        'getBaselinePosition': { type: 'Number', declaredBy: 'org.apache.royale.text.html.TextLine', parameters: function () { return [ 'String', false ]; }},
        'getAdornmentOffsetBase': { type: 'Number', declaredBy: 'org.apache.royale.text.html.TextLine'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.text.html.TextLine.prototype.ROYALE_COMPILE_FLAGS = 10;
