/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/undo/IUndoManager.as
 * org.apache.royale.utils.undo.IUndoManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.undo.IUndoManager');
/* Royale Dependency List: org.apache.royale.utils.undo.IOperation*/




/**
 * @interface
 */
org.apache.royale.utils.undo.IUndoManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.utils.undo.IUndoManager', org.apache.royale.utils.undo.IUndoManager);
org.apache.royale.utils.undo.IUndoManager.prototype.clearAll = function() {
};
/**  * @type {number}
 */org.apache.royale.utils.undo.IUndoManager.prototype.undoAndRedoItemLimit;
/**
 * Indicates whether there is currently an operation that can be undone.
 * 
 * @asreturn Boolean <code>true</code>, if there is an operation on the undo stack that can be reversed.
 * Otherwise, <code>false</code>.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @return {boolean}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.canUndo = function() {
};
/**
 * Returns the next operation to be undone.
 * 
 * @asreturn The undoable IOperation object, or <code>null</code>, if no undoable operation
 * is on the stack.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @return {org.apache.royale.utils.undo.IOperation}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.peekUndo = function() {
};
/**
 * Removes the next operation to be undone from the undo stack, and returns it.
 * 
 * @asreturn The undoable IOperation object, or <code>null</code>, if no undoable operation
 * is on the stack.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @return {org.apache.royale.utils.undo.IOperation}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.popUndo = function() {
};
/**
 * Adds an undoable operation to the undo stack.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @param {org.apache.royale.utils.undo.IOperation} operation
 */
org.apache.royale.utils.undo.IUndoManager.prototype.pushUndo = function(operation) {
};
org.apache.royale.utils.undo.IUndoManager.prototype.clearRedo = function() {
};
/**
 * Indicates whether there is currently an operation that can be redone.
 * 
 * @asreturn Boolean <code>true</code>, if there is an operation on the redo stack that can be redone.
 * Otherwise, <code>false</code>.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @return {boolean}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.canRedo = function() {
};
/**
 * Returns the next operation to be redone.
 * 
 * @asreturn The redoable IOperation object, or <code>null</code>, if no redoable operation
 * is on the stack.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @return {org.apache.royale.utils.undo.IOperation}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.peekRedo = function() {
};
/**
 * Removes the next operation to be redone from the redo stack, and returns it.
 * 
 * @asreturn The redoable IOperation object, or <code>null</code>, if no redoable operation
 * is on the stack.
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @return {org.apache.royale.utils.undo.IOperation}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.popRedo = function() {
};
/**
 * Adds a redoable operation to the redo stack.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @param {org.apache.royale.utils.undo.IOperation} operation
 */
org.apache.royale.utils.undo.IUndoManager.prototype.pushRedo = function(operation) {
};
org.apache.royale.utils.undo.IUndoManager.prototype.undo = function() {
};
org.apache.royale.utils.undo.IUndoManager.prototype.redo = function() {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IUndoManager', qName: 'org.apache.royale.utils.undo.IUndoManager', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'undoAndRedoItemLimit': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'}
      };
    },
    methods: function () {
      return {
        'clearAll': { type: 'void', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'canUndo': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'peekUndo': { type: 'org.apache.royale.utils.undo.IOperation', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'popUndo': { type: 'org.apache.royale.utils.undo.IOperation', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'pushUndo': { type: 'void', declaredBy: 'org.apache.royale.utils.undo.IUndoManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IOperation', false ]; }},
        'clearRedo': { type: 'void', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'canRedo': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'peekRedo': { type: 'org.apache.royale.utils.undo.IOperation', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'popRedo': { type: 'org.apache.royale.utils.undo.IOperation', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'pushRedo': { type: 'void', declaredBy: 'org.apache.royale.utils.undo.IUndoManager', parameters: function () { return [ 'org.apache.royale.utils.undo.IOperation', false ]; }},
        'undo': { type: 'void', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'},
        'redo': { type: 'void', declaredBy: 'org.apache.royale.utils.undo.IUndoManager'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.utils.undo.IUndoManager.prototype.ROYALE_COMPILE_FLAGS = 10;
