/**
 * Generated by Apache Royale Compiler from MyInitialView.mxml
 * MyInitialView
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('MyInitialView');
/* Royale Dependency List: services.GitHubService,org.apache.royale.binding.ViewDataBinding,org.apache.royale.html.HGroup,org.apache.royale.html.Tree,org.apache.royale.binding.ConstantBinding,org.apache.royale.html.Label,org.apache.royale.html.VGroup,org.apache.royale.events.Event,org.apache.royale.events.MouseEvent*/

goog.require('org.apache.royale.core.View');



/**
 * @constructor
 * @extends {org.apache.royale.core.View}
 */
MyInitialView = function() {
  MyInitialView.base(this, 'constructor');
  
  /**
   * @private
   * @type {services.GitHubService}
   */
  this.service_;
  
  /**
   * @private
   * @type {services.GitHubService}
   */
  this.service1_;
  
  /**
   * @private
   * @type {org.apache.royale.binding.ViewDataBinding}
   */
  this.$ID0_;
  
  /**
   * @private
   * @type {org.apache.royale.html.HGroup}
   */
  this.$ID3_;
  
  /**
   * @private
   * @type {org.apache.royale.html.Tree}
   */
  this.tree_;
  
  /**
   * @private
   * @type {org.apache.royale.binding.ConstantBinding}
   */
  this.$ID1_;
  
  /**
   * @private
   * @type {org.apache.royale.html.Label}
   */
  this.jsnlbl_;
  
  /**
   * @private
   * @type {org.apache.royale.html.VGroup}
   */
  this.$ID2_;
  
  /**
   * @private
   * @type {org.apache.royale.html.Label}
   */
  this.selected_;
  
  /**
   * @private
   * @type {org.apache.royale.html.Label}
   */
  this.selected1_;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldd;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldp;

  this.generateMXMLAttributes([
    1,
    'beads',
    null,
    [
      org.apache.royale.binding.ViewDataBinding,
      1,
      '_id',
      true,
      '$ID0',
      0,
      0,
      null
    ],
    0,
    0
  ]);
  
};
goog.inherits(MyInitialView, org.apache.royale.core.View);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('MyInitialView', MyInitialView);



/**
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
MyInitialView.prototype.aClickHandler = function(event) {
};


/**
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
MyInitialView.prototype.getGithubContent = function(event) {
  if (this.tree.selectedIndex == 0) {
    this.service.getContent();
  } else if (this.tree.selectedIndex == 1) {
    this.service1.getContent();
  }
};


/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
MyInitialView.prototype.dataReadyHandler = function(event) {
  var /** @type {string} */ strdatajson = null;
  //var /** @type {string} */ strdatajson = null;
  if (this.tree.selectedIndex == 0) {
    strdatajson = this.service.jsonToString;
    var /** @type {Object} */ jsonData = JSON.parse(strdatajson);
    var /** @type {string} */ htmstr = "<table border=1><tr><th>userID</th><th>id</th><th>title</th><th>body</th></tr>";
    for (var /** @type {number} */ i = 0; i < jsonData.length; i++) {
      htmstr = htmstr + "<tr><td>" + jsonData[i].userId + "</td>";
      htmstr = htmstr + "<td>" + jsonData[i].id + "</td>";
      htmstr = htmstr + "<td>" + jsonData[i].title + "</td>";
      htmstr = htmstr + "<td>" + jsonData[i].body + "</td></tr>";
    }
    htmstr = htmstr + "</table>";
    this.jsnlbl.html = htmstr;
  } else if (this.tree.selectedIndex == 1) {
    strdatajson = this.service1.jsonToString;
    var /** @type {Object} */ jsonData1 = JSON.parse(strdatajson);
    var /** @type {string} */ htmstring = "<table border=1><tr><th>userID</th><th>id</th><th>title</th></tr>";
    for (var /** @type {number} */ j = 0; j < jsonData1.length; j++) {
      htmstring = htmstring + "<tr><td>" + jsonData1[j].userId + "</td>";
      htmstring = htmstring + "<td>" + jsonData1[j].id + "</td>";
      htmstring = htmstring + "<td>" + jsonData1[j].title + "</td></tr>";
    }
    htmstring = htmstring + "</table>";
    this.jsnlbl.html = htmstring;
  }
};


/**
 * @export
 * @override
 */
MyInitialView.prototype.addedToParent = function() {
  MyInitialView.superClass_.addedToParent.apply(this);
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
MyInitialView.prototype.MyInitialView_changeHandler = function(event) {
  this.selected.text = "Selected: " + this.tree.selectedItem.title;
};


/**
 * @export
 * @param {org.apache.royale.events.Event} event
 * @return {boolean}
 */
MyInitialView.prototype.visibility = function(event) {
  return true;
};


/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
MyInitialView.prototype.$EH0 = function(event)
{
  this.dataReadyHandler(event);
};


/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
MyInitialView.prototype.$EH1 = function(event)
{
  this.dataReadyHandler(event);
};


/**
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
MyInitialView.prototype.$EH2 = function(event)
{
  this.getGithubContent(event);
};


/**
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
MyInitialView.prototype.$EH3 = function(event)
{
  this.aClickHandler(event);
};


Object.defineProperties(MyInitialView.prototype, /** @lends {MyInitialView.prototype} */ {
/** @export */
    service: {
    /** @this {MyInitialView} */
    get: function() {
      return this.service_;
    },
    /** @this {MyInitialView} */
    set: function(value) {
      if (value != this.service_) {
        this.service_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'service', null, value));
      }
    }
  },
  /** @export */
    service1: {
    /** @this {MyInitialView} */
    get: function() {
      return this.service1_;
    },
    /** @this {MyInitialView} */
    set: function(value) {
      if (value != this.service1_) {
        this.service1_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'service1', null, value));
      }
    }
  },
  /** @export */
    tree: {
    /** @this {MyInitialView} */
    get: function() {
      return this.tree_;
    },
    /** @this {MyInitialView} */
    set: function(value) {
      if (value != this.tree_) {
        this.tree_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'tree', null, value));
      }
    }
  },
  /** @export */
    jsnlbl: {
    /** @this {MyInitialView} */
    get: function() {
      return this.jsnlbl_;
    },
    /** @this {MyInitialView} */
    set: function(value) {
      if (value != this.jsnlbl_) {
        this.jsnlbl_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'jsnlbl', null, value));
      }
    }
  },
  /** @export */
    selected: {
    /** @this {MyInitialView} */
    get: function() {
      return this.selected_;
    },
    /** @this {MyInitialView} */
    set: function(value) {
      if (value != this.selected_) {
        this.selected_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'selected', null, value));
      }
    }
  },
  /** @export */
    selected1: {
    /** @this {MyInitialView} */
    get: function() {
      return this.selected1_;
    },
    /** @this {MyInitialView} */
    set: function(value) {
      if (value != this.selected1_) {
        this.selected1_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'selected1', null, value));
      }
    }
  },
  'MXMLDescriptor': {
    /** @this {MyInitialView} */
    get: function() {
      if (this.mxmldd == undefined)
      {
        /** @type {Array} */
        var arr = MyInitialView.superClass_.get__MXMLDescriptor.apply(this);
        /** @type {Array} */
        var data = [
          services.GitHubService,
          2,
          'id',
          true,
          'service',
          'sourceCodeUrl',
          true,
          'https://jsonplaceholder.typicode.com/posts',
          0,
          1,
          'dataReady',
this.$EH0,
          null,
          services.GitHubService,
          2,
          'id',
          true,
          'service1',
          'sourceCodeUrl',
          true,
          'https://jsonplaceholder.typicode.com/posts',
          0,
          1,
          'dataReady',
this.$EH1,
          null,
          org.apache.royale.html.HGroup,
          1,
          '_id',
          true,
          '$ID3',
          0,
          0,
          [
            org.apache.royale.html.Tree,
            8,
            'id',
            true,
            'tree',
            'x',
            true,
            30,
            'y',
            true,
            30,
            'width',
            true,
            400,
            'height',
            true,
            500,
            'labelField',
            true,
            'title',
            'rowHeight',
            true,
            40,
            'beads',
            null,
            [
              org.apache.royale.binding.ConstantBinding,
              4,
              '_id',
              true,
              '$ID1',
              'sourceID',
              true,
              'applicationModel',
              'sourcePropertyName',
              true,
              'treeData',
              'destinationPropertyName',
              true,
              'dataProvider',
              0,
              0,
              null
            ],
            0,
            1,
            'click',
this.$EH2,
            null,
            org.apache.royale.html.Label,
            2,
            'id',
            true,
            'jsnlbl',
            'html',
            true,
            '',
            0,
            0,
            null,
            org.apache.royale.html.VGroup,
            1,
            '_id',
            true,
            '$ID2',
            0,
            0,
            [
              org.apache.royale.html.Label,
              1,
              'id',
              true,
              'selected',
              0,
              1,
              'click',
this.$EH3,
              null,
              org.apache.royale.html.Label,
              2,
              'id',
              true,
              'selected1',
              'text',
              true,
              '',
              0,
              0,
              null
            ]
          ]
        ];
        if (arr)
          this.mxmldd = arr.concat(data);
        else
          this.mxmldd = data;
      }
      return this.mxmldd;
    }
  }
});
/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
MyInitialView.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MyInitialView', qName: 'MyInitialView', kind: 'class'  }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
MyInitialView.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'service': { type: 'services.GitHubService', access: 'readwrite', declaredBy: 'MyInitialView'},
        'service1': { type: 'services.GitHubService', access: 'readwrite', declaredBy: 'MyInitialView'},
        'tree': { type: 'org.apache.royale.html.Tree', access: 'readwrite', declaredBy: 'MyInitialView'},
        'jsnlbl': { type: 'org.apache.royale.html.Label', access: 'readwrite', declaredBy: 'MyInitialView'},
        'selected': { type: 'org.apache.royale.html.Label', access: 'readwrite', declaredBy: 'MyInitialView'},
        'selected1': { type: 'org.apache.royale.html.Label', access: 'readwrite', declaredBy: 'MyInitialView'}
      };
    },
    methods: function () {
      return {
        'aClickHandler': { type: 'void', declaredBy: 'MyInitialView', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'getGithubContent': { type: 'void', declaredBy: 'MyInitialView', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'dataReadyHandler': { type: 'void', declaredBy: 'MyInitialView', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'addedToParent': { type: 'void', declaredBy: 'MyInitialView'},
        'visibility': { type: 'Boolean', declaredBy: 'MyInitialView', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'MyInitialView': { type: '', declaredBy: 'MyInitialView'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
MyInitialView.prototype.ROYALE_COMPILE_FLAGS = 9;



//# sourceMappingURL=./MyInitialView.js.map
