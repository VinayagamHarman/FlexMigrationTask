/**
 * Generated by Apache Royale Compiler from services/GitHubService.as
 * services.GitHubService
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('services.GitHubService');
/* Royale Dependency List: org.apache.royale.events.Event,org.apache.royale.net.HTTPConstants,org.apache.royale.net.HTTPService,org.apache.royale.utils.string.Base64,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');



/**
 * constructor
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 */
services.GitHubService = function() {
  services.GitHubService.base(this, 'constructor');
  this.services_GitHubService_service = new org.apache.royale.net.HTTPService();
  this.services_GitHubService_service.addEventListener(org.apache.royale.net.HTTPConstants.COMPLETE, org.apache.royale.utils.Language.closure(this.services_GitHubService_completeHandler, this, 'services_GitHubService_completeHandler'));
};
goog.inherits(services.GitHubService, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('services.GitHubService', services.GitHubService);


/**
 * @private
 * @type {org.apache.royale.net.HTTPService}
 */
services.GitHubService.prototype.services_GitHubService_service = null;


/**
 * we dispatch an event once we have the source code from github
 * @private
 * @param {org.apache.royale.events.Event} event
 */
services.GitHubService.prototype.services_GitHubService_completeHandler = function(event) {
  this.dispatchEvent(new org.apache.royale.events.Event("dataReady"));
};


/**
 * @private
 * @type {string}
 */
services.GitHubService.prototype.services_GitHubService__sourceCodeUrl = null;


/**
 * trigger the HTTPService to retrieve the GitHub data
 * @export
 */
services.GitHubService.prototype.getContent = function() {
  this.services_GitHubService_service.send();
};


services.GitHubService.prototype.get__sourceCodeUrl = function() {
  return this.services_GitHubService__sourceCodeUrl;
};


services.GitHubService.prototype.set__sourceCodeUrl = function(value) {
  this.services_GitHubService__sourceCodeUrl = value;
  this.services_GitHubService_service.url = this.sourceCodeUrl;
};


services.GitHubService.prototype.get__json = function() {
  return this.services_GitHubService_service.json;
};


services.GitHubService.prototype.get__jsonToString = function() {
  return this.services_GitHubService_service.data;
};


services.GitHubService.prototype.get__sourceCode = function() {
  return org.apache.royale.utils.string.Base64.decode(org.apache.royale.utils.Language.string(this.services_GitHubService_service.json.content));
};


Object.defineProperties(services.GitHubService.prototype, /** @lends {services.GitHubService.prototype} */ {
/**
  * @export
  * @type {string} */
sourceCodeUrl: {
get: services.GitHubService.prototype.get__sourceCodeUrl,
set: services.GitHubService.prototype.set__sourceCodeUrl},
/**
  * @export
  * @type {Object} */
json: {
get: services.GitHubService.prototype.get__json},
/**
  * @export
  * @type {string} */
jsonToString: {
get: services.GitHubService.prototype.get__jsonToString},
/**
  * @export
  * @type {string} */
sourceCode: {
get: services.GitHubService.prototype.get__sourceCode}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
services.GitHubService.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'GitHubService', qName: 'services.GitHubService', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
services.GitHubService.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'sourceCodeUrl': { type: 'String', access: 'readwrite', declaredBy: 'services.GitHubService'},
        'json': { type: 'Object', access: 'readonly', declaredBy: 'services.GitHubService'},
        'jsonToString': { type: 'String', access: 'readonly', declaredBy: 'services.GitHubService'},
        'sourceCode': { type: 'String', access: 'readonly', declaredBy: 'services.GitHubService'}
      };
    },
    methods: function () {
      return {
        'GitHubService': { type: 'void', declaredBy: 'services.GitHubService'},
        'getContent': { type: 'void', declaredBy: 'services.GitHubService'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
services.GitHubService.prototype.ROYALE_COMPILE_FLAGS = 9;

//# sourceMappingURL=./GitHubService.js.map
